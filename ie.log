time=2024-07-02T14:56:24-07:00 level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-02T14:56:24-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-02T14:56:24-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-02T14:56:24-07:00 level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM {  0 <nil>}}]
time=2024-07-02T14:56:24-07:00 level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-02T14:56:24-07:00 level=info msg=Changed directory to .
time=2024-07-02T14:56:24-07:00 level=info msg=Executing command: export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 isInteractive=false
time=2024-07-02T14:56:24-07:00 level=info msg=Command output to stdout:
 
time=2024-07-02T14:56:24-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:56:24-07:00 level=info msg=Executing command: az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 isInteractive=false
time=2024-07-02T14:56:29-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9360cb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-02T14:56:29-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:56:29-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9360cb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-02T14:56:29-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.760481
time=2024-07-02T14:56:29-07:00 level=info msg=Attempting to extract resource group name from command output
time=2024-07-02T14:56:29-07:00 level=info msg=Found resource group resourceGroup=myVMResourceGroup9360cb
time=2024-07-02T14:56:29-07:00 level=info msg=Executing command: az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 isInteractive=false
time=2024-07-02T14:57:46-07:00 level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb",
  "identity": {
    "systemAssignedIdentity": "a8c009f1-c34a-4abc-9e37-3d26af79d2a0",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-21-84-33",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.81.71.226",
  "resourceGroup": "myVMResourceGroup9360cb",
  "zones": ""
}

time=2024-07-02T14:57:46-07:00 level=info msg=Command output to stderr:
 WARNING: Selecting "uksouth" may reduce your costs.â€¯The region you've selected may cost more for the same services. You can disable this message in the future with the command "az config set core.display_region_identified=false". Learn more at https://go.microsoft.com/fwlink/?linkid=222571 
WARNING: Ignite (November) 2023 onwards "az vm/vmss create" command will deploy Gen2-Trusted Launch VM by default. To know more about the default change and Trusted Launch, please visit https://aka.ms/TLaD
WARNING: No access was given yet to the 'myVM9360cb', because '--scope' was not provided. You should setup by creating a role assignment, e.g. 'az role assignment create --assignee <principal-id> --role contributor -g myVMResourceGroup9360cb' would let it access the current resource group. To get the pricipal id, run 'az vm show -g myVMResourceGroup9360cb -n myVM9360cb --query "identity.principalId" -otsv'

time=2024-07-02T14:57:46-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb",
  "identity": {
    "systemAssignedIdentity": "a8c009f1-c34a-4abc-9e37-3d26af79d2a0",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-21-84-33",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.81.71.226",
  "resourceGroup": "myVMResourceGroup9360cb",
  "zones": ""
}

time=2024-07-02T14:57:46-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.710846
time=2024-07-02T14:57:46-07:00 level=info msg=Executing command: az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 isInteractive=false
time=2024-07-02T14:59:55-07:00 level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup9360cb",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-02T14:59:55-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:59:56-07:00 level=info msg=Executing command: export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 isInteractive=false
time=2024-07-02T14:59:59-07:00 level=info msg=Command output to stdout:
 
time=2024-07-02T14:59:59-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:59:59-07:00 level=info msg=Executing command: ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 isInteractive=true
time=2024-07-02T14:59:59-07:00 level=info msg=Not fetching resource URIs because we're not in the OCD environment.
time=2024-07-02T15:00:00-07:00 level=info msg=Found deployed resources. resourceURIs=[/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkSecurityGroups/myVM9360cbNSG /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/publicIPAddresses/myVM9360cbPublicIP /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/virtualNetworks/myVM9360cbVNET /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkInterfaces/myVM9360cbVMNic /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/MYVMRESOURCEGROUP9360CB/providers/Microsoft.Compute/disks/myVM9360cb_OsDisk_1_2fd4d46880b34d7d85d79235268440d3 /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux]
time=2024-07-02T15:00:19-07:00 level=info msg=Not fetching resource URIs because we're not in the OCD environment.
time=2024-07-02T15:00:20-07:00 level=info msg=Found deployed resources. resourceURIs=[/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkSecurityGroups/myVM9360cbNSG /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/publicIPAddresses/myVM9360cbPublicIP /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/virtualNetworks/myVM9360cbVNET /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkInterfaces/myVM9360cbVMNic /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/MYVMRESOURCEGROUP9360CB/providers/Microsoft.Compute/disks/myVM9360cb_OsDisk_1_2fd4d46880b34d7d85d79235268440d3 /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux]
time=2024-07-02T15:00:20-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:11:57-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:11:59-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:11:59-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:14-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:16-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:16-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:30-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:31-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:31-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:22-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:23-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:23-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:21:52-07:00 level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-05T15:21:52-07:00 level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-05T15:21:52-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:21:52-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:21:52-07:00 level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-05T15:21:52-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:21:52-07:00 level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-05T15:21:52-07:00 level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-05T15:21:53-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:21:53-07:00 level=info msg=Finished executing:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-05T15:21:53-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:21:55-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89",
  "location": "westus",
  "managedBy": null,
  "name": "rgkmlq1h89",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:21:55-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.753662
time=2024-07-05T15:21:55-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89",
  "location": "westus",
  "managedBy": null,
  "name": "rgkmlq1h89",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:21:55-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:21:55-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-05T15:21:55-07:00 level=info msg=Found resource group named: rgkmlq1h89
time=2024-07-05T15:21:55-07:00 level=info msg=Executing command asynchronously:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-05T15:22:21-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

Actual{
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-05T22:21:57.339758+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89/providers/Microsoft.Storage/storageAccounts/storagekmlq1h89",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-05T22:21:57.449209+00:00",
    "key2": "2024-07-05T22:21:57.449209+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storagekmlq1h89",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storagekmlq1h89.blob.core.windows.net/",
    "dfs": "https://storagekmlq1h89.dfs.core.windows.net/",
    "file": "https://storagekmlq1h89.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storagekmlq1h89.queue.core.windows.net/",
    "table": "https://storagekmlq1h89.table.core.windows.net/",
    "web": "https://storagekmlq1h89.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgkmlq1h89",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-05T15:22:21-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.790927
time=2024-07-05T15:22:21-07:00 level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-05T22:21:57.339758+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89/providers/Microsoft.Storage/storageAccounts/storagekmlq1h89",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-05T22:21:57.449209+00:00",
    "key2": "2024-07-05T22:21:57.449209+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storagekmlq1h89",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storagekmlq1h89.blob.core.windows.net/",
    "dfs": "https://storagekmlq1h89.dfs.core.windows.net/",
    "file": "https://storagekmlq1h89.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storagekmlq1h89.queue.core.windows.net/",
    "table": "https://storagekmlq1h89.table.core.windows.net/",
    "web": "https://storagekmlq1h89.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgkmlq1h89",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-05T15:22:21-07:00 level=info msg=Finished executing:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-05T15:22:21-07:00 level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-05T15:22:22-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:22-07:00 level=info msg=Finished executing:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-05T15:22:22-07:00 level=info msg=Executing command asynchronously:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-05T15:22:23-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "created": true
}

Actual{
  "created": false
}

time=2024-07-05T15:22:23-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.859069
time=2024-07-05T15:22:23-07:00 level=info msg=Command output to stdout:
 {
  "created": false
}

time=2024-07-05T15:22:23-07:00 level=info msg=Finished executing:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-05T15:22:23-07:00 level=info msg=Executing command asynchronously:
 az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes

time=2024-07-05T15:22:26-07:00 level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.
'
time=2024-07-05T15:22:26-07:00 level=info msg=Attempting to delete the deployed resource group with the name: rgkmlq1h89
time=2024-07-05T15:22:27-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:22:27-07:00 level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.
'
StdErr: WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.

time=2024-07-05T15:22:29-07:00 level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-05T15:22:29-07:00 level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-05T15:22:29-07:00 level=info msg=Successfully built out the scenario: Env vars
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:22:29-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Finished executing:
 
time=2024-07-05T15:22:29-07:00 level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:22:29-07:00 level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-05T15:22:29-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-05T15:22:29-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-05T15:22:29-07:00 level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-05T15:22:29-07:00 level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-05T15:22:29-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:22:29-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:22:32-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup4af110",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup4af110",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:22:32-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764887
time=2024-07-05T15:22:32-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup4af110",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup4af110",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:22:32-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:22:32-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-05T15:22:32-07:00 level=info msg=Found resource group named: myVMResourceGroup4af110
time=2024-07-05T15:22:32-07:00 level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-05T15:22:51-07:00 level=debug msg=Window size changed to: 108 x 21
time=2024-07-11T20:20:56Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-11T20:20:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:20:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:20:56Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-11T20:20:56Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-11T20:20:56Z level=info msg=Changed directory to .
time=2024-07-11T20:20:56Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-11T20:20:56Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:20:56Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-11T20:20:56Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:21:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9a29a1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:21:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.761950
time=2024-07-11T20:21:00Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9a29a1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:21:00Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:21:00Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:21:00Z level=info msg=Found resource group named: myVMResourceGroup9a29a1
time=2024-07-11T20:21:00Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-11T20:22:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1/providers/Microsoft.Compute/virtualMachines/myVM9a29a1",
  "identity": {
    "systemAssignedIdentity": "d0d9148b-bc1b-4663-922b-1391eb028e0a",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-43-F6-45",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.174.184.171",
  "resourceGroup": "myVMResourceGroup9a29a1",
  "zones": ""
}

time=2024-07-11T20:22:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.721691
time=2024-07-11T20:22:50Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1/providers/Microsoft.Compute/virtualMachines/myVM9a29a1",
  "identity": {
    "systemAssignedIdentity": "d0d9148b-bc1b-4663-922b-1391eb028e0a",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-43-F6-45",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.174.184.171",
  "resourceGroup": "myVMResourceGroup9a29a1",
  "zones": ""
}

time=2024-07-11T20:22:50Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-11T20:22:50Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-11T20:24:58Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1/providers/Microsoft.Compute/virtualMachines/myVM9a29a1/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup9a29a1",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-11T20:24:58Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-11T20:24:58Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-11T20:25:00Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:25:00Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-11T20:25:00Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-11T20:25:02Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-11T20:25:02Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-11T20:25:02Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:25:02Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup9a29a1
time=2024-07-11T20:25:06Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:25:06Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-11T20:25:06Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:25:06Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:25:06Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:25:06Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-11T20:25:06Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-11T20:25:06Z level=info msg=Changed directory to .
time=2024-07-11T20:25:06Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:25:07Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:25:07Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:25:07Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:25:07Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:25:10Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup8f92a6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:25:10Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-11T20:25:10Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup8f92a6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:25:10Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:25:10Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:25:10Z level=info msg=Found resource group named: myAKSResourceGroup8f92a6
time=2024-07-11T20:25:10Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:25:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.169.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6",
    "location": "westeurope",
    "name": "myVNet8f92a6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup8f92a6",
    "resourceGuid": "0241b791-836e-4ed0-9fff-2f2b7f4b16a8",
    "subnets": [
      {
        "addressPrefix": "10.169.0.0/22",
        "delegations": [],
        "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6/subnets/mySN8f92a6",
        "name": "mySN8f92a6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup8f92a6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:25:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.720060
time=2024-07-11T20:25:24Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.169.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6",
    "location": "westeurope",
    "name": "myVNet8f92a6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup8f92a6",
    "resourceGuid": "0241b791-836e-4ed0-9fff-2f2b7f4b16a8",
    "subnets": [
      {
        "addressPrefix": "10.169.0.0/22",
        "delegations": [],
        "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6/subnets/mySN8f92a6",
        "name": "mySN8f92a6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup8f92a6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:25:24Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:25:24Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-11T20:25:33Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:25:33Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-11T20:25:33Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-11T20:30:37Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6/subnets/mySN8f92a6",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-iq239nby.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-iq239nby.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup8f92a6/providers/Microsoft.ContainerService/managedClusters/myAKSCluster8f92a6",
  "identity": {
    "delegatedResources": null,
    "principalId": "317654c8-c25d-49af-b5f1-bec847f89bd1",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "7b262e02-c6e6-4097-8093-1c84fb33278e",
      "objectId": "d942fe5e-1307-4549-9c88-e239ac5be42d",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster8f92a6-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster8f92a6",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope/providers/Microsoft.Network/publicIPAddresses/1a8239a3-edee-43f9-b50e-1d836e78723e",
          "resourceGroup": "MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup8f92a6",
  "resourceUid": "66903fd58709cf00012cd1c3",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-11T20:30:37Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-11T20:30:37Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-11T20:30:37Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:30:37Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-11T20:30:37Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-11T20:30:39Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:30:39Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-11T20:30:39Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-11T20:30:43Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-36625524-vmss000000   Ready    agent   2m26s   v1.28.9

time=2024-07-11T20:30:43Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-11T20:30:43Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-11T20:31:51Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Thu Jul 11 20:30:54 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-11T20:31:51Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-11T20:31:51Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-11T20:31:51Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:31:51Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-11T20:31:51Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-11T20:31:54Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-11T20:31:54Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-11T20:31:54Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:32:36Z level=info msg=Command output to stdout:
 False
False
False
False
True

time=2024-07-11T20:32:36Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:32:36Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-11T20:32:37Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-11T20:32:37Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-11T20:32:37Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-11T20:32:37Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-11T20:32:37Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-11T20:32:37Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 helm repo update

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Thu Jul 11 20:32:44 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 57.153.6.62

time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel8f92a6.westeurope.cloudapp.azure.com

time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-11T20:33:17Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:33:17Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup8f92a6
time=2024-07-11T20:33:21Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:33:21Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-11T20:33:21Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:33:21Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:33:21Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:33:21Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:33:21Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-11T20:33:21Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-11T20:33:21Z level=info msg=Changed directory to .
time=2024-07-11T20:33:21Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:33:21Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:21Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:33:21Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:33:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup04ea4a",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup04ea4a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:33:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750683
time=2024-07-11T20:33:24Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup04ea4a",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup04ea4a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:33:24Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:33:24Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:33:24Z level=info msg=Found resource group named: myAKSResourceGroup04ea4a
time=2024-07-11T20:33:24Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-11T20:37:09Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-xxh60r2c.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-xxh60r2c.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup04ea4a/providers/Microsoft.ContainerService/managedClusters/myAKSCluster04ea4a",
  "identity": {
    "delegatedResources": null,
    "principalId": "b860ded6-e1b3-449d-be2f-6049b2feb991",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "0943991a-a7a8-45ae-a715-2bc6aa3b1036",
      "objectId": "3e2e4e8e-3bb5-4962-be0d-c19217f075c8",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster04ea4a-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/N7iKuyTQeFrNT9tI2sz64xbIeMoyC6S2/AaJgSRvV2WDqixmRhpWbbLdn8cCQspKMch8suH3oJQ4sYNHzHvqlbrW/JbnAnTibndgjD8a/30h3nmqUvzgs5LOb+RNxoVzGQYNu+Y0fUV+BFp8JBI7F7vcNub+d31j1bYV4/FToR8kV//LfHUkCiy4cIyvhiMJTdSgAp551TocavjH6ahtUF3V5MG3fA7V7t1iPZCDk7mXB+5TYOkpSH4yi1TAnMrqJFEzC/MMG3edXh3rK3Xls2T3gZaTlBMqTQUNqSCRfDK3PK7gcXF0PKBtOOuZZ87yFZgjyhJZA4n1/7Oy0d83"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster04ea4a",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope/providers/Microsoft.Network/publicIPAddresses/8247bd65-65d1-45c6-bc79-682d1217cfec",
          "resourceGroup": "MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup04ea4a",
  "resourceUid": "6690419e99f6b000016c7cf6",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-11T20:37:09Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-11T20:37:09Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:37:10Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:10Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:37:10Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-11T20:37:11Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-26792675-vmss000000   Ready    agent   64s   v1.28.9

time=2024-07-11T20:37:11Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-11T20:37:11Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-11T20:37:11Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-11T20:37:11Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup04ea4a
time=2024-07-11T20:37:16Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:37:16Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-11T20:37:17Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-11T20:37:17Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-11T20:37:17Z level=info msg=Changed directory to .
time=2024-07-11T20:37:17Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-11T20:37:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:17Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-11T20:37:17Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-11T20:37:17Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-11T20:37:17Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:37:17Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-11T20:37:19Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:37:19Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-11T20:37:19Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-11T20:37:19Z level=info msg=Changed directory to .
time=2024-07-11T20:37:19Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:37:19Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:19Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:37:19Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:37:19Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup8f948f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:37:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747348
time=2024-07-11T20:37:22Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup8f948f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:37:22Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:22Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:37:22Z level=info msg=Found resource group named: myLEMPResourceGroup8f948f
time=2024-07-11T20:37:22Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-11T20:37:37Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.115.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f",
    "location": "westeurope",
    "name": "myVNet8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "ae63e5ea-e901-4ebb-9ba8-bcb02950bb55",
    "subnets": [
      {
        "addressPrefix": "10.115.0.0/24",
        "delegations": [],
        "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
        "name": "mySN8f948f",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:37:37Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731877
time=2024-07-11T20:37:37Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.115.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f",
    "location": "westeurope",
    "name": "myVNet8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "ae63e5ea-e901-4ebb-9ba8-bcb02950bb55",
    "subnets": [
      {
        "addressPrefix": "10.115.0.0/24",
        "delegations": [],
        "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
        "name": "mySN8f948f",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:37:37Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-11T20:37:37Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-11T20:37:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel8f948f",
      "fqdn": "mydnslabel8f948f.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"4a3e492a-16ee-49d5-ae39-a6b6383debd5\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.6.46",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP8f948f",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f7280d30-ab1b-4c8f-93b0-079ef5cca4e4",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:37:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.754118
time=2024-07-11T20:37:43Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel8f948f",
      "fqdn": "mydnslabel8f948f.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"4a3e492a-16ee-49d5-ae39-a6b6383debd5\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.6.46",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP8f948f",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f7280d30-ab1b-4c8f-93b0-079ef5cca4e4",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:37:43Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-11T20:37:43Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
    "location": "westeurope",
    "name": "myNSG8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "6c2a87a5-c3ef-41c4-bcc4-d3efeafa5dbf",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-11T20:37:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.568177
time=2024-07-11T20:37:47Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
    "location": "westeurope",
    "name": "myNSG8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "6c2a87a5-c3ef-41c4-bcc4-d3efeafa5dbf",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-11T20:37:47Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:47Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-11T20:37:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"db2cfba3-415b-4722-a55d-62cd4a2159a2\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/securityRules/Allow-Access8f948f",
  "name": "Allow-Access8f948f",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup8f948f",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-11T20:37:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.792033
time=2024-07-11T20:37:50Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"db2cfba3-415b-4722-a55d-62cd4a2159a2\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/securityRules/Allow-Access8f948f",
  "name": "Allow-Access8f948f",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup8f948f",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-11T20:37:50Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-11T20:37:50Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-11T20:37:53Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "3lswhlqb3g3u3g3ixsycsuf1kf.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f",
    "ipConfigurations": [
      {
        "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.115.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic8f948f",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
      "resourceGroup": "myLEMPResourceGroup8f948f"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f661ff92-e4fa-4933-9655-4f0dbd6cb5f4",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-11T20:37:53Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.704592
time=2024-07-11T20:37:53Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "3lswhlqb3g3u3g3ixsycsuf1kf.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f",
    "ipConfigurations": [
      {
        "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.115.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic8f948f",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
      "resourceGroup": "myLEMPResourceGroup8f948f"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f661ff92-e4fa-4933-9655-4f0dbd6cb5f4",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-11T20:37:53Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-11T20:37:53Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-11T20:37:53Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:53Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-11T20:37:53Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-11T20:38:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "c758e177-95aa-4aa0-b783-cd5d85bf0650",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup8f948f/providers/Microsoft.Network/privateDnsZones/mydnslabel8f948f.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel8f948f.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup8f948f",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-11T20:38:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751878
time=2024-07-11T20:38:28Z level=info msg=Command output to stdout:
 {
  "etag": "c758e177-95aa-4aa0-b783-cd5d85bf0650",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup8f948f/providers/Microsoft.Network/privateDnsZones/mydnslabel8f948f.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel8f948f.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup8f948f",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-11T20:38:28Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-11T20:38:28Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-11T20:38:31Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup8f948f'...
WARNING: Resource group 'myLEMPResourceGroup8f948f' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-11T20:38:31Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup8f948f
time=2024-07-11T20:38:36Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:38:36Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup8f948f'...
WARNING: Resource group 'myLEMPResourceGroup8f948f' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup8f948f'...
WARNING: Resource group 'myLEMPResourceGroup8f948f' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-11T20:38:38Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-11T20:38:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:38Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-11T20:38:38Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-11T20:38:38Z level=info msg=Changed directory to .
time=2024-07-11T20:38:38Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-11T20:38:38Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:38:38Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-11T20:38:38Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:38:39Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupfd627a",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupfd627a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:39Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.767626
time=2024-07-11T20:38:39Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupfd627a",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupfd627a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:39Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:38:39Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:38:39Z level=info msg=Found resource group named: myVMResourceGroupfd627a
time=2024-07-11T20:38:39Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-11T20:38:45Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_uvenv41yCiQ2MWYkWfaQw6aXA400m68z' is not valid according to the validation procedure. The tracking id is '2951086b-b461-4b27-b37f-b5a337822d8b'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-11T20:38:45Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupfd627a
time=2024-07-11T20:38:47Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:38:47Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_uvenv41yCiQ2MWYkWfaQw6aXA400m68z' is not valid according to the validation procedure. The tracking id is '2951086b-b461-4b27-b37f-b5a337822d8b'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_uvenv41yCiQ2MWYkWfaQw6aXA400m68z' is not valid according to the validation procedure. The tracking id is '2951086b-b461-4b27-b37f-b5a337822d8b'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-11T20:38:49Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-11T20:38:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:49Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:38:49Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:38:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:49Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:38:49Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-11T20:38:49Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-11T20:38:49Z level=info msg=Changed directory to .
time=2024-07-11T20:38:49Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-11T20:38:49Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:38:49Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-11T20:38:49Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-11T20:38:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupde2379",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupde2379",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712991
time=2024-07-11T20:38:50Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupde2379",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupde2379",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:50Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-11T20:38:50Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:38:50Z level=info msg=Found resource group named: myStaticWebAppResourceGroupde2379
time=2024-07-11T20:38:50Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-11T20:38:55Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "blue-sand-0d4492b0f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupde2379/providers/Microsoft.Web/staticSites/myStaticWebAppde2379",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebAppde2379",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroupde2379",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-11T20:38:55Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-11T20:38:55Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-11T20:38:56Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:38:56Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-11T20:38:56Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-11T20:38:56Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-11T20:38:56Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-11T20:38:56Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-11T20:38:56Z level=info msg=Command output to stdout:
 You can now visit your web server at https://blue-sand-0d4492b0f.5.azurestaticapps.net

time=2024-07-11T20:38:56Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-11T20:38:56Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-11T20:38:58Z level=info msg=Command output to stdout:
 "blue-sand-0d4492b0f.5.azurestaticapps.net"

time=2024-07-11T20:38:58Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-11T20:38:58Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:38:58Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroupde2379
time=2024-07-11T20:39:00Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:39:00Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-11T20:39:00Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-11T20:39:00Z level=info msg=Changed directory to .
time=2024-07-11T20:39:00Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-11T20:39:00Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:39:00Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-11T20:39:00Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-11T20:39:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupf9e029",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:39:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.757226
time=2024-07-11T20:39:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupf9e029",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:39:01Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-11T20:39:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:39:01Z level=info msg=Found resource group named: myVMSSResourceGroupf9e029
time=2024-07-11T20:39:01Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-11T20:39:14Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.220.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029",
    "location": "eastus",
    "name": "myVNetf9e029",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "c1ac3f40-293e-4e01-94a3-9e5af33a89f1",
    "subnets": [
      {
        "addressPrefix": "10.220.0.0/24",
        "delegations": [],
        "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myVMSNf9e029",
        "name": "myVMSNf9e029",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:39:14Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.717601
time=2024-07-11T20:39:14Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.220.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029",
    "location": "eastus",
    "name": "myVNetf9e029",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "c1ac3f40-293e-4e01-94a3-9e5af33a89f1",
    "subnets": [
      {
        "addressPrefix": "10.220.0.0/24",
        "delegations": [],
        "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myVMSNf9e029",
        "name": "myVMSNf9e029",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:39:14Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-11T20:39:14Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-11T20:39:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.220.1.0/24",
  "delegations": [],
  "etag": "W/\"0ccfa810-3874-434a-a9db-83fee072af18\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
  "name": "myAPPGWSNf9e029",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupf9e029",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:39:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731824
time=2024-07-11T20:39:27Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.220.1.0/24",
  "delegations": [],
  "etag": "W/\"0ccfa810-3874-434a-a9db-83fee072af18\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
  "name": "myAPPGWSNf9e029",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupf9e029",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:39:27Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-11T20:39:27Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-11T20:39:31Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"7c29baee-a561-459e-9934-919e7f98473b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.171.56.54",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPf9e029",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "6527a621-cf9b-4035-988c-e673a0ae67ff",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:39:31Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.745732
time=2024-07-11T20:39:31Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"7c29baee-a561-459e-9934-919e7f98473b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.171.56.54",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPf9e029",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "6527a621-cf9b-4035-988c-e673a0ae67ff",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:39:31Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-11T20:39:31Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-11T20:47:40Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "97a6695c-52bb-4824-b6c4-baf13822fdf6",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-11T20:47:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.733191
time=2024-07-11T20:47:40Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "97a6695c-52bb-4824-b6c4-baf13822fdf6",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-11T20:47:40Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-11T20:47:40Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-11T20:48:18Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_HDg0p3ypGUit0nmkcfQiKLr9jIrYF70r' is not valid according to the validation procedure. The tracking id is '3583d69f-7652-4dcb-a39f-ed750fd07a08'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-11T20:48:18Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupf9e029
time=2024-07-11T20:48:21Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:48:21Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_HDg0p3ypGUit0nmkcfQiKLr9jIrYF70r' is not valid according to the validation procedure. The tracking id is '3583d69f-7652-4dcb-a39f-ed750fd07a08'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_HDg0p3ypGUit0nmkcfQiKLr9jIrYF70r' is not valid according to the validation procedure. The tracking id is '3583d69f-7652-4dcb-a39f-ed750fd07a08'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-11T20:48:22Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=warning msg=The node before the codeblock `az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Found 27 code blocks CodeBlocks=[{bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-11T20:48:22Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-11T20:48:22Z level=info msg=Changed directory to .
time=2024-07-11T20:48:23Z level=info msg=Executing command asynchronously:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:48:23Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:48:23Z level=info msg=Finished executing:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:48:23Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:48:23Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-11T20:48:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup70fcba",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.748837
time=2024-07-11T20:48:26Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup70fcba",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:26Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-11T20:48:26Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:48:26Z level=info msg=Found resource group named: myWordPressAKSResourceGroup70fcba
time=2024-07-11T20:48:26Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:48:40Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.24.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba",
    "location": "westeurope",
    "name": "myVNet70fcba",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup70fcba",
    "resourceGuid": "157bf281-73b7-4ad6-a185-84ae43f129ff",
    "subnets": [
      {
        "addressPrefix": "10.24.0.0/22",
        "delegations": [],
        "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba/subnets/mySN70fcba",
        "name": "mySN70fcba",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup70fcba",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:48:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729591
time=2024-07-11T20:48:40Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.24.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba",
    "location": "westeurope",
    "name": "myVNet70fcba",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup70fcba",
    "resourceGuid": "157bf281-73b7-4ad6-a185-84ae43f129ff",
    "subnets": [
      {
        "addressPrefix": "10.24.0.0/22",
        "delegations": [],
        "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba/subnets/mySN70fcba",
        "name": "mySN70fcba",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup70fcba",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:48:40Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:48:40Z level=info msg=Executing command asynchronously:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-11T20:48:40Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin70fcba password is: iHWNuj6lyKZg8Z9OTDq3YcCd0zIGtpjfN6ycpalY3BY=

time=2024-07-11T20:48:40Z level=info msg=Finished executing:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-11T20:48:40Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-11T20:48:43Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup70fcba'...
WARNING: Resource group 'myWordPressAKSResourceGroup70fcba' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-11T20:48:43Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup70fcba
time=2024-07-11T20:48:47Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:48:47Z level=error msg=Error testing scenario: failed to execute code block 1 on step 3.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup70fcba'...
WARNING: Resource group 'myWordPressAKSResourceGroup70fcba' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup70fcba'...
WARNING: Resource group 'myWordPressAKSResourceGroup70fcba' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-11T20:48:49Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-11T20:48:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:49Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:48:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:49Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:48:49Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-11T20:48:49Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-11T20:48:49Z level=info msg=Changed directory to .
time=2024-07-11T20:48:49Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:48:49Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:48:49Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:48:49Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:48:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup51ed0b",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup51ed0b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-11T20:48:52Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup51ed0b",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup51ed0b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:52Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:48:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:48:52Z level=info msg=Found resource group named: myAKSResourceGroup51ed0b
time=2024-07-11T20:48:52Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-11T20:52:36Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-ztxlk5g6.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-ztxlk5g6.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup51ed0b/providers/Microsoft.ContainerService/managedClusters/myAKSCluster51ed0b",
  "identity": {
    "delegatedResources": null,
    "principalId": "0c08ab1e-cdbb-4b7b-bf43-76b7cebd1dd1",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "e82e3854-a3f5-476e-ab9c-51446d64b39b",
      "objectId": "11bbad14-1dcf-4d09-8a8f-ae873eb87f25",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster51ed0b-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/N7iKuyTQeFrNT9tI2sz64xbIeMoyC6S2/AaJgSRvV2WDqixmRhpWbbLdn8cCQspKMch8suH3oJQ4sYNHzHvqlbrW/JbnAnTibndgjD8a/30h3nmqUvzgs5LOb+RNxoVzGQYNu+Y0fUV+BFp8JBI7F7vcNub+d31j1bYV4/FToR8kV//LfHUkCiy4cIyvhiMJTdSgAp551TocavjH6ahtUF3V5MG3fA7V7t1iPZCDk7mXB+5TYOkpSH4yi1TAnMrqJFEzC/MMG3edXh3rK3Xls2T3gZaTlBMqTQUNqSCRfDK3PK7gcXF0PKBtOOuZZ87yFZgjyhJZA4n1/7Oy0d83"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster51ed0b",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope/providers/Microsoft.Network/publicIPAddresses/17619f70-fc4e-4462-8f0f-0ff49297a5a6",
          "resourceGroup": "MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup51ed0b",
  "resourceUid": "6690453dc6617f0001c57a83",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-11T20:52:36Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-11T20:52:36Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:52:37Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:52:37Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:52:37Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-11T20:52:38Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-19017769-vmss000000   Ready    agent   77s   v1.28.9

time=2024-07-11T20:52:38Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-11T20:52:38Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-11T20:52:38Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-11T20:52:38Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup51ed0b
time=2024-07-11T20:52:43Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:52:43Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-11T20:52:45Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-11T20:52:45Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:52:45Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-11T20:52:45Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-11T20:52:45Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-11T20:52:45Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-11T20:52:45Z level=info msg=Changed directory to .
time=2024-07-11T20:52:45Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-11T20:52:45Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:52:45Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-11T20:52:45Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:52:46Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup5be4bb",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup5be4bb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:52:46Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.762943
time=2024-07-11T20:52:46Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup5be4bb",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup5be4bb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:52:46Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:52:46Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:52:46Z level=info msg=Found resource group named: myResourceGroup5be4bb
time=2024-07-11T20:52:46Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-11T20:52:56Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-11T20:52:56Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup5be4bb
time=2024-07-11T20:52:58Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:52:58Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-11T20:53:01Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-11T20:53:01Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-11T20:53:01Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-11T20:53:01Z level=info msg=Changed directory to .
time=2024-07-11T20:53:01Z level=info msg=Executing command asynchronously:
 
time=2024-07-11T20:53:01Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:53:01Z level=info msg=Finished executing:
 
time=2024-07-11T20:53:01Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:53:01Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:53:01Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-11T20:53:01Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-11T20:53:01Z level=info msg=Changed directory to .
time=2024-07-11T20:53:01Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-11T20:53:02Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:53:02Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-11T20:53:02Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:53:02Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-11T20:53:02Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:53:02Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-11T20:53:02Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-11T20:53:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"164ee3d7-5eee-4c11-a84d-95bf0d88ea5a\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "bb085447-7709-4255-b2a8-738585368f7c",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:53:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712721
time=2024-07-11T20:53:15Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"164ee3d7-5eee-4c11-a84d-95bf0d88ea5a\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "bb085447-7709-4255-b2a8-738585368f7c",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:53:15Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-11T20:53:15Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-11T20:53:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"01ade483-48cd-4ff6-916d-a14c90dd6214\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.726797
time=2024-07-11T20:53:27Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"01ade483-48cd-4ff6-916d-a14c90dd6214\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:27Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-11T20:53:27Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-11T20:53:39Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"2546d215-c301-48de-9114-441d2dc3e580\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:39Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728469
time=2024-07-11T20:53:39Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"2546d215-c301-48de-9114-441d2dc3e580\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:39Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-11T20:53:39Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-11T20:54:08Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-11T20:53:43.753634+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-11T20:53:44.003668+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-11T20:53:44.003668+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-11T20:53:43.862932+00:00",
    "key2": "2024-07-11T20:53:43.862932+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-11T20:54:08Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-11T20:54:08Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-11T20:54:13Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:10.0559289Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 79814455-cc00-41d4-906c-0c364ccfd400 Correlation ID: 30c2e57b-af65-417e-9785-408b42b9849b Timestamp: 2024-07-11 20:54:10Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:11.1811032Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f5413bee-aec3-422e-8308-25467f50d600 Correlation ID: e45b6055-11e4-4247-bbc6-dd3f968235fe Timestamp: 2024-07-11 20:54:11Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:12.1626287Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 8a823e87-2667-4dd2-93d4-d6d83534c400 Correlation ID: 4edb5729-77b4-4c5e-b158-3ab109dc0b8f Timestamp: 2024-07-11 20:54:12Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-11T20:54:13Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-11T20:54:15Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:54:15Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:10.0559289Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 79814455-cc00-41d4-906c-0c364ccfd400 Correlation ID: 30c2e57b-af65-417e-9785-408b42b9849b Timestamp: 2024-07-11 20:54:10Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:11.1811032Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f5413bee-aec3-422e-8308-25467f50d600 Correlation ID: e45b6055-11e4-4247-bbc6-dd3f968235fe Timestamp: 2024-07-11 20:54:11Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:12.1626287Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 8a823e87-2667-4dd2-93d4-d6d83534c400 Correlation ID: 4edb5729-77b4-4c5e-b158-3ab109dc0b8f Timestamp: 2024-07-11 20:54:12Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:10.0559289Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 79814455-cc00-41d4-906c-0c364ccfd400 Correlation ID: 30c2e57b-af65-417e-9785-408b42b9849b Timestamp: 2024-07-11 20:54:10Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:11.1811032Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f5413bee-aec3-422e-8308-25467f50d600 Correlation ID: e45b6055-11e4-4247-bbc6-dd3f968235fe Timestamp: 2024-07-11 20:54:11Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:12.1626287Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 8a823e87-2667-4dd2-93d4-d6d83534c400 Correlation ID: 4edb5729-77b4-4c5e-b158-3ab109dc0b8f Timestamp: 2024-07-11 20:54:12Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

time=2024-07-12T15:05:25Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-12T15:05:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:05:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:05:25Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-12T15:05:25Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-12T15:05:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:05:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:05:25Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-12T15:05:25Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-12T15:05:25Z level=info msg=Changed directory to .
time=2024-07-12T15:05:25Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-12T15:05:25Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:05:25Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-12T15:05:25Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:05:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb7e20e",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupb7e20e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:05:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.757544
time=2024-07-12T15:05:28Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb7e20e",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupb7e20e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:05:28Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:05:28Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:05:28Z level=info msg=Found resource group named: myVMResourceGroupb7e20e
time=2024-07-12T15:05:28Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-12T15:06:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb7e20e/providers/Microsoft.Compute/virtualMachines/myVMb7e20e",
  "identity": {
    "systemAssignedIdentity": "57a15127-0543-4866-94f2-fa25c21d2adf",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-38-69-AF",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.94.230.24",
  "resourceGroup": "myVMResourceGroupb7e20e",
  "zones": ""
}

time=2024-07-12T15:06:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.721558
time=2024-07-12T15:06:43Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb7e20e/providers/Microsoft.Compute/virtualMachines/myVMb7e20e",
  "identity": {
    "systemAssignedIdentity": "57a15127-0543-4866-94f2-fa25c21d2adf",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-38-69-AF",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.94.230.24",
  "resourceGroup": "myVMResourceGroupb7e20e",
  "zones": ""
}

time=2024-07-12T15:06:43Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-12T15:06:43Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-12T15:08:49Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb7e20e/providers/Microsoft.Compute/virtualMachines/myVMb7e20e/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroupb7e20e",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-12T15:08:49Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-12T15:08:49Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-12T15:08:50Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:08:50Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-12T15:08:50Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-12T15:08:52Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-12T15:08:52Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-12T15:08:52Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-12T15:08:52Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupb7e20e
time=2024-07-12T15:08:55Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:08:55Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-12T15:08:55Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:08:55Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:08:55Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:08:55Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-12T15:08:55Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-12T15:08:55Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:08:55Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:08:55Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-12T15:08:55Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:08:55Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:08:55Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:08:55Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:08:55Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-12T15:08:55Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-12T15:08:55Z level=info msg=Changed directory to .
time=2024-07-12T15:08:55Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-12T15:08:56Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:08:56Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-12T15:08:56Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:08:56Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:08:58Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup3ff232",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:08:58Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-12T15:08:58Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup3ff232",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:08:58Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:08:58Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:08:58Z level=info msg=Found resource group named: myAKSResourceGroup3ff232
time=2024-07-12T15:08:58Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-12T15:09:12Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.155.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"62a323b8-6238-43a8-9b05-1be2346ef145\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232/providers/Microsoft.Network/virtualNetworks/myVNet3ff232",
    "location": "westeurope",
    "name": "myVNet3ff232",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup3ff232",
    "resourceGuid": "7f70c858-74cb-4ebf-8063-971e7f7af4b5",
    "subnets": [
      {
        "addressPrefix": "10.155.0.0/22",
        "delegations": [],
        "etag": "W/\"62a323b8-6238-43a8-9b05-1be2346ef145\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232/providers/Microsoft.Network/virtualNetworks/myVNet3ff232/subnets/mySN3ff232",
        "name": "mySN3ff232",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup3ff232",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:09:12Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.723574
time=2024-07-12T15:09:12Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.155.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"62a323b8-6238-43a8-9b05-1be2346ef145\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232/providers/Microsoft.Network/virtualNetworks/myVNet3ff232",
    "location": "westeurope",
    "name": "myVNet3ff232",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup3ff232",
    "resourceGuid": "7f70c858-74cb-4ebf-8063-971e7f7af4b5",
    "subnets": [
      {
        "addressPrefix": "10.155.0.0/22",
        "delegations": [],
        "etag": "W/\"62a323b8-6238-43a8-9b05-1be2346ef145\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232/providers/Microsoft.Network/virtualNetworks/myVNet3ff232/subnets/mySN3ff232",
        "name": "mySN3ff232",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup3ff232",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:09:12Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-12T15:09:12Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-12T15:09:20Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:09:20Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-12T15:09:20Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-12T15:13:50Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3ff232/providers/Microsoft.Network/virtualNetworks/myVNet3ff232/subnets/mySN3ff232",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-8c7cbupv.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-8c7cbupv.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup3ff232/providers/Microsoft.ContainerService/managedClusters/myAKSCluster3ff232",
  "identity": {
    "delegatedResources": null,
    "principalId": "244e71f4-55f2-4987-895f-328cea366e3d",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "7cc5225f-d57c-4f68-9d21-770553903b59",
      "objectId": "3af4ba6a-79ba-4bfa-bd45-d790fb447a71",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup3ff232_myAKSCluster3ff232_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster3ff232-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster3ff232",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup3ff232_myAKSCluster3ff232_westeurope/providers/Microsoft.Network/publicIPAddresses/5a6431fb-06d9-4155-9268-764a7406f052",
          "resourceGroup": "MC_myAKSResourceGroup3ff232_myAKSCluster3ff232_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup3ff232_myAKSCluster3ff232_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup3ff232",
  "resourceUid": "66914735daa304000101054c",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-12T15:13:50Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-12T15:13:50Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-12T15:13:50Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:13:50Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-12T15:13:50Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-12T15:13:51Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:13:51Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-12T15:13:51Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-12T15:13:54Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-39781974-vmss000000   Ready    agent   2m    v1.28.9

time=2024-07-12T15:13:54Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-12T15:13:54Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-12T15:14:58Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Fri Jul 12 15:14:04 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-12T15:14:58Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-12T15:14:58Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-12T15:14:58Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:14:58Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-12T15:14:58Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-12T15:15:00Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-12T15:15:00Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-12T15:15:00Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-12T15:15:21Z level=info msg=Command output to stdout:
 False
False
True

time=2024-07-12T15:15:21Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-12T15:15:21Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-12T15:15:22Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-12T15:15:22Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-12T15:15:22Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-12T15:15:23Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-12T15:15:23Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-12T15:15:23Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-12T15:15:25Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-12T15:15:25Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-12T15:15:25Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-12T15:15:26Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-12T15:15:26Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-12T15:15:26Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-12T15:15:26Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-12T15:15:26Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-12T15:15:26Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-12T15:15:26Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-12T15:15:26Z level=info msg=Finished executing:
 helm repo update

time=2024-07-12T15:15:26Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-12T15:16:00Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Fri Jul 12 15:15:27 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-12T15:16:00Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-12T15:16:00Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-12T15:16:00Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:16:00Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-12T15:16:00Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-12T15:16:00Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:16:00Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-12T15:16:00Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-12T15:16:00Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:16:00Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-12T15:16:00Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-12T15:16:01Z level=info msg=Command output to stdout:
 4.175.191.20

time=2024-07-12T15:16:01Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-12T15:16:01Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-12T15:16:01Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel3ff232.westeurope.cloudapp.azure.com

time=2024-07-12T15:16:01Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-12T15:16:01Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-12T15:16:01Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup3ff232
time=2024-07-12T15:16:04Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:16:04Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-12T15:16:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:16:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:16:04Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-12T15:16:04Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-12T15:16:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:16:04Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:16:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:16:04Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:16:04Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-12T15:16:04Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-12T15:16:04Z level=info msg=Changed directory to .
time=2024-07-12T15:16:04Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-12T15:16:04Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:16:04Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-12T15:16:04Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:16:06Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup140435",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup140435",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:16:06Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-12T15:16:06Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup140435",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup140435",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:16:06Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:16:06Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:16:06Z level=info msg=Found resource group named: myAKSResourceGroup140435
time=2024-07-12T15:16:06Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-12T15:19:49Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-bc55pfma.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-bc55pfma.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup140435/providers/Microsoft.ContainerService/managedClusters/myAKSCluster140435",
  "identity": {
    "delegatedResources": null,
    "principalId": "083e8bc2-58be-4890-8b68-4833c88b7616",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "3b141748-9c59-45a2-9a4e-1f768c7ee155",
      "objectId": "983f6652-7e68-48c5-b830-658c1a86b66a",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup140435_myAKSCluster140435_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster140435-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCtFD6ZQIcIZamIzG/27wN77Pzs2EfFjO6c4GlwEAoYwZz5v3xxEU7HMlEmrsnVI5j94WuiQRSie1xev70QZ1nEchtZfpsbNP3KYMDiH8WLN9TSkC9iQzxe435P+aDAfU2B1Yj3QIoGH8/ZJceJcS4ekR3yeL4CrAuYyXx9H68TPXDT0dIKj+mAuo2vCnWkdBbhhWwOEW78W35+gB2S2SxuWGvrXwhE/chAQvLNoVIsNeci+WQf0cHH70GPwyr390Vk+JKPZ9w470bYOsvCgLshfVxV2LLGtmvarwjEZuE8vubDnjfXZ82Iq0VaV4VNg1RZW8AtKUAVJZmNMCPAil1J"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster140435",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup140435_myAKSCluster140435_westeurope/providers/Microsoft.Network/publicIPAddresses/6e779f30-903b-4f52-b11f-091c18cfb0d4",
          "resourceGroup": "MC_myAKSResourceGroup140435_myAKSCluster140435_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup140435_myAKSCluster140435_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup140435",
  "resourceUid": "669148bfabbaa60001a39945",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-12T15:19:49Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-12T15:19:49Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-12T15:19:50Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:19:50Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-12T15:19:50Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-12T15:19:51Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-19616659-vmss000000   Ready    agent   86s   v1.28.9

time=2024-07-12T15:19:51Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-12T15:19:51Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-12T15:19:51Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-12T15:19:51Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup140435
time=2024-07-12T15:19:54Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:19:54Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-12T15:19:55Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-12T15:19:55Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-12T15:19:55Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-12T15:19:55Z level=info msg=Changed directory to .
time=2024-07-12T15:19:55Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-12T15:19:55Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:19:55Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-12T15:19:55Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-12T15:19:56Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-12T15:19:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:19:56Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-12T15:19:58Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:19:58Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:19:58Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-12T15:19:58Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-12T15:19:58Z level=info msg=Changed directory to .
time=2024-07-12T15:19:58Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-12T15:19:58Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:19:58Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-12T15:19:58Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:19:58Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-12T15:20:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup737925",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:20:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.748791
time=2024-07-12T15:20:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup737925",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:20:01Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-12T15:20:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:20:01Z level=info msg=Found resource group named: myLEMPResourceGroup737925
time=2024-07-12T15:20:01Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-12T15:20:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.3.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"17c972f8-d897-4f1a-9904-eb152ea35efd\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/virtualNetworks/myVNet737925",
    "location": "westeurope",
    "name": "myVNet737925",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "f24be3f4-1c2b-4077-b3e8-a71f937df121",
    "subnets": [
      {
        "addressPrefix": "10.3.0.0/24",
        "delegations": [],
        "etag": "W/\"17c972f8-d897-4f1a-9904-eb152ea35efd\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/virtualNetworks/myVNet737925/subnets/mySN737925",
        "name": "mySN737925",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:20:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.724847
time=2024-07-12T15:20:15Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.3.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"17c972f8-d897-4f1a-9904-eb152ea35efd\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/virtualNetworks/myVNet737925",
    "location": "westeurope",
    "name": "myVNet737925",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "f24be3f4-1c2b-4077-b3e8-a71f937df121",
    "subnets": [
      {
        "addressPrefix": "10.3.0.0/24",
        "delegations": [],
        "etag": "W/\"17c972f8-d897-4f1a-9904-eb152ea35efd\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/virtualNetworks/myVNet737925/subnets/mySN737925",
        "name": "mySN737925",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:20:15Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-12T15:20:15Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-12T15:20:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel737925",
      "fqdn": "mydnslabel737925.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"1038cbf6-2e75-4e1f-b91e-d7a6515fab03\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/publicIPAddresses/myPublicIP737925",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "20.61.177.134",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP737925",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "7492bbde-b422-410b-af2e-ceb706977313",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-12T15:20:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.759504
time=2024-07-12T15:20:22Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel737925",
      "fqdn": "mydnslabel737925.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"1038cbf6-2e75-4e1f-b91e-d7a6515fab03\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/publicIPAddresses/myPublicIP737925",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "20.61.177.134",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP737925",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "7492bbde-b422-410b-af2e-ceb706977313",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-12T15:20:22Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-12T15:20:22Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-12T15:20:25Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925",
    "location": "westeurope",
    "name": "myNSG737925",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "a9f4de7c-b7cd-4835-9f4b-d55a82747839",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-12T15:20:25Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.565671
time=2024-07-12T15:20:25Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup737925",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"eafa9877-3209-44a0-b5ae-fdb8f8713b47\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925",
    "location": "westeurope",
    "name": "myNSG737925",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "a9f4de7c-b7cd-4835-9f4b-d55a82747839",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-12T15:20:25Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-12T15:20:25Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-12T15:20:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"1deaad2f-42d0-4599-9a93-10fbf46c4479\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/securityRules/Allow-Access737925",
  "name": "Allow-Access737925",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup737925",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-12T15:20:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.793190
time=2024-07-12T15:20:27Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"1deaad2f-42d0-4599-9a93-10fbf46c4479\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925/securityRules/Allow-Access737925",
  "name": "Allow-Access737925",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup737925",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-12T15:20:27Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-12T15:20:27Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-12T15:20:30Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "4trux2rldr1ubm5iu2pzg5preb.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"c920283b-e30e-4636-9c71-5c31a8d02d81\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkInterfaces/myVMNic737925",
    "ipConfigurations": [
      {
        "etag": "W/\"c920283b-e30e-4636-9c71-5c31a8d02d81\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkInterfaces/myVMNic737925/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.3.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/publicIPAddresses/myPublicIP737925",
          "resourceGroup": "myLEMPResourceGroup737925"
        },
        "resourceGroup": "myLEMPResourceGroup737925",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/virtualNetworks/myVNet737925/subnets/mySN737925",
          "resourceGroup": "myLEMPResourceGroup737925"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic737925",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925",
      "resourceGroup": "myLEMPResourceGroup737925"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "34bd81c8-bea7-4f6e-bd27-e8550d348b0a",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-12T15:20:30Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.703120
time=2024-07-12T15:20:30Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "4trux2rldr1ubm5iu2pzg5preb.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"c920283b-e30e-4636-9c71-5c31a8d02d81\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkInterfaces/myVMNic737925",
    "ipConfigurations": [
      {
        "etag": "W/\"c920283b-e30e-4636-9c71-5c31a8d02d81\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkInterfaces/myVMNic737925/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.3.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/publicIPAddresses/myPublicIP737925",
          "resourceGroup": "myLEMPResourceGroup737925"
        },
        "resourceGroup": "myLEMPResourceGroup737925",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/virtualNetworks/myVNet737925/subnets/mySN737925",
          "resourceGroup": "myLEMPResourceGroup737925"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic737925",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup737925/providers/Microsoft.Network/networkSecurityGroups/myNSG737925",
      "resourceGroup": "myLEMPResourceGroup737925"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup737925",
    "resourceGuid": "34bd81c8-bea7-4f6e-bd27-e8550d348b0a",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-12T15:20:30Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-12T15:20:30Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-12T15:20:30Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:20:30Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-12T15:20:30Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-12T15:21:04Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "c054c76c-54a0-4b2a-93a0-7e5f63884dde",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup737925/providers/Microsoft.Network/privateDnsZones/mydnslabel737925.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel737925.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup737925",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-12T15:21:04Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751878
time=2024-07-12T15:21:04Z level=info msg=Command output to stdout:
 {
  "etag": "c054c76c-54a0-4b2a-93a0-7e5f63884dde",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup737925/providers/Microsoft.Network/privateDnsZones/mydnslabel737925.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel737925.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup737925",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-12T15:21:04Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-12T15:21:04Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-12T15:21:07Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup737925'...
WARNING: Resource group 'myLEMPResourceGroup737925' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-12T15:21:07Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup737925
time=2024-07-12T15:21:10Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:21:10Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup737925'...
WARNING: Resource group 'myLEMPResourceGroup737925' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup737925'...
WARNING: Resource group 'myLEMPResourceGroup737925' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-12T15:21:12Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-12T15:21:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:12Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-12T15:21:12Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-12T15:21:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:12Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-12T15:21:12Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-12T15:21:12Z level=info msg=Changed directory to .
time=2024-07-12T15:21:12Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-12T15:21:12Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:21:12Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-12T15:21:12Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:21:13Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup73afef",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup73afef",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:21:13Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.772012
time=2024-07-12T15:21:13Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup73afef",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup73afef",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:21:13Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:21:13Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:21:13Z level=info msg=Found resource group named: myVMResourceGroup73afef
time=2024-07-12T15:21:13Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-12T15:21:17Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_GEEfTF4EI4uALHuLcRJQNfi7Xpqak6ub' is not valid according to the validation procedure. The tracking id is '7c5b22a6-4ec7-4abf-afd1-837bc167aaa7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-12T15:21:17Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup73afef
time=2024-07-12T15:21:18Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:21:18Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_GEEfTF4EI4uALHuLcRJQNfi7Xpqak6ub' is not valid according to the validation procedure. The tracking id is '7c5b22a6-4ec7-4abf-afd1-837bc167aaa7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_GEEfTF4EI4uALHuLcRJQNfi7Xpqak6ub' is not valid according to the validation procedure. The tracking id is '7c5b22a6-4ec7-4abf-afd1-837bc167aaa7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-12T15:21:20Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-12T15:21:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:20Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:21:20Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:21:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:20Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:21:20Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-12T15:21:20Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-12T15:21:20Z level=info msg=Changed directory to .
time=2024-07-12T15:21:20Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-12T15:21:20Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:21:20Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-12T15:21:20Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-12T15:21:21Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup76ed42",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup76ed42",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:21:21Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712991
time=2024-07-12T15:21:21Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup76ed42",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup76ed42",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:21:21Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-12T15:21:21Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:21:21Z level=info msg=Found resource group named: myStaticWebAppResourceGroup76ed42
time=2024-07-12T15:21:21Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-12T15:21:24Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "thankful-sky-0dd625d0f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup76ed42/providers/Microsoft.Web/staticSites/myStaticWebApp76ed42",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebApp76ed42",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroup76ed42",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-12T15:21:24Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-12T15:21:24Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-12T15:21:26Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:21:26Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-12T15:21:26Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-12T15:21:26Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-12T15:21:26Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-12T15:21:26Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-12T15:21:26Z level=info msg=Command output to stdout:
 You can now visit your web server at https://thankful-sky-0dd625d0f.5.azurestaticapps.net

time=2024-07-12T15:21:26Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-12T15:21:26Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-12T15:21:27Z level=info msg=Command output to stdout:
 "thankful-sky-0dd625d0f.5.azurestaticapps.net"

time=2024-07-12T15:21:27Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-12T15:21:27Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-12T15:21:27Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroup76ed42
time=2024-07-12T15:21:28Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:21:28Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:21:28Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-12T15:21:28Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-12T15:21:28Z level=info msg=Changed directory to .
time=2024-07-12T15:21:28Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-12T15:21:28Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:21:28Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-12T15:21:28Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-12T15:21:30Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupc2e0ec",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:21:30Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.758662
time=2024-07-12T15:21:30Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupc2e0ec",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:21:30Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-12T15:21:30Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:21:30Z level=info msg=Found resource group named: myVMSSResourceGroupc2e0ec
time=2024-07-12T15:21:30Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-12T15:21:42Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.141.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"3549c539-c56d-4af8-a8fb-e8385ce2cf0c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec",
    "location": "eastus",
    "name": "myVNetc2e0ec",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupc2e0ec",
    "resourceGuid": "533a2faf-0b51-4fad-b5be-2716b6d27e46",
    "subnets": [
      {
        "addressPrefix": "10.141.0.0/24",
        "delegations": [],
        "etag": "W/\"3549c539-c56d-4af8-a8fb-e8385ce2cf0c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec/subnets/myVMSNc2e0ec",
        "name": "myVMSNc2e0ec",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:21:42Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716825
time=2024-07-12T15:21:42Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.141.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"3549c539-c56d-4af8-a8fb-e8385ce2cf0c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec",
    "location": "eastus",
    "name": "myVNetc2e0ec",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupc2e0ec",
    "resourceGuid": "533a2faf-0b51-4fad-b5be-2716b6d27e46",
    "subnets": [
      {
        "addressPrefix": "10.141.0.0/24",
        "delegations": [],
        "etag": "W/\"3549c539-c56d-4af8-a8fb-e8385ce2cf0c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec/subnets/myVMSNc2e0ec",
        "name": "myVMSNc2e0ec",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:21:42Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-12T15:21:42Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-12T15:21:54Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.141.1.0/24",
  "delegations": [],
  "etag": "W/\"05aaa0f2-f3ec-473d-827a-94ad1066630a\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec/subnets/myAPPGWSNc2e0ec",
  "name": "myAPPGWSNc2e0ec",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupc2e0ec",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-12T15:21:54Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.730274
time=2024-07-12T15:21:54Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.141.1.0/24",
  "delegations": [],
  "etag": "W/\"05aaa0f2-f3ec-473d-827a-94ad1066630a\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec/subnets/myAPPGWSNc2e0ec",
  "name": "myAPPGWSNc2e0ec",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupc2e0ec",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-12T15:21:54Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-12T15:21:54Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-12T15:22:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"830aa017-a348-404d-aed2-66f6e6747f2c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPc2e0ec",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.114.107",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPc2e0ec",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupc2e0ec",
    "resourceGuid": "2cd69b7f-925c-46e9-848c-b0474a9bec89",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-12T15:22:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750634
time=2024-07-12T15:22:00Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"830aa017-a348-404d-aed2-66f6e6747f2c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPc2e0ec",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.114.107",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPc2e0ec",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupc2e0ec",
    "resourceGuid": "2cd69b7f-925c-46e9-848c-b0474a9bec89",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-12T15:22:00Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-12T15:22:00Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-12T15:28:35Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPc2e0ec",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          }
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec/subnets/myAPPGWSNc2e0ec",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          }
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "b6c30a6f-385c-496f-84da-a999eab0478e",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-12T15:28:35Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.732919
time=2024-07-12T15:28:35Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPc2e0ec",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          }
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/virtualNetworks/myVNetc2e0ec/subnets/myAPPGWSNc2e0ec",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          }
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupc2e0ec"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"080c7ba0-d298-4801-8ebc-f1a3a0f54650\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupc2e0ec/providers/Microsoft.Network/applicationGateways/myAPPGWc2e0ec/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupc2e0ec"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupc2e0ec",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "b6c30a6f-385c-496f-84da-a999eab0478e",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-12T15:28:35Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-12T15:28:35Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-12T15:29:09Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_5FIYrKWIqqh9RztyNKPCrGAPAAgizoGO' is not valid according to the validation procedure. The tracking id is '1201dbbf-a819-44b0-969e-055bd5e458fe'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-12T15:29:09Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupc2e0ec
time=2024-07-12T15:29:11Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:29:11Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_5FIYrKWIqqh9RztyNKPCrGAPAAgizoGO' is not valid according to the validation procedure. The tracking id is '1201dbbf-a819-44b0-969e-055bd5e458fe'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_5FIYrKWIqqh9RztyNKPCrGAPAAgizoGO' is not valid according to the validation procedure. The tracking id is '1201dbbf-a819-44b0-969e-055bd5e458fe'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-12T15:29:12Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-12T15:29:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:12Z level=warning msg=The node before the codeblock `az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:29:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:12Z level=debug msg=Found 27 code blocks CodeBlocks=[{bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-12T15:29:12Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-12T15:29:12Z level=info msg=Changed directory to .
time=2024-07-12T15:29:12Z level=info msg=Executing command asynchronously:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-12T15:29:12Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:29:12Z level=info msg=Finished executing:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-12T15:29:12Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:29:12Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-12T15:29:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup92a3d3",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup92a3d3",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:29:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.744600
time=2024-07-12T15:29:15Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup92a3d3",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup92a3d3",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:29:15Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-12T15:29:15Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:29:15Z level=info msg=Found resource group named: myWordPressAKSResourceGroup92a3d3
time=2024-07-12T15:29:15Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-12T15:29:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.122.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7b377d8c-9ad0-4a5b-a045-6102bc4557db\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup92a3d3/providers/Microsoft.Network/virtualNetworks/myVNet92a3d3",
    "location": "westeurope",
    "name": "myVNet92a3d3",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup92a3d3",
    "resourceGuid": "66fff2ba-9012-45bb-9c11-94707202d819",
    "subnets": [
      {
        "addressPrefix": "10.122.0.0/22",
        "delegations": [],
        "etag": "W/\"7b377d8c-9ad0-4a5b-a045-6102bc4557db\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup92a3d3/providers/Microsoft.Network/virtualNetworks/myVNet92a3d3/subnets/mySN92a3d3",
        "name": "mySN92a3d3",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup92a3d3",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:29:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.735763
time=2024-07-12T15:29:28Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.122.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7b377d8c-9ad0-4a5b-a045-6102bc4557db\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup92a3d3/providers/Microsoft.Network/virtualNetworks/myVNet92a3d3",
    "location": "westeurope",
    "name": "myVNet92a3d3",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup92a3d3",
    "resourceGuid": "66fff2ba-9012-45bb-9c11-94707202d819",
    "subnets": [
      {
        "addressPrefix": "10.122.0.0/22",
        "delegations": [],
        "etag": "W/\"7b377d8c-9ad0-4a5b-a045-6102bc4557db\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup92a3d3/providers/Microsoft.Network/virtualNetworks/myVNet92a3d3/subnets/mySN92a3d3",
        "name": "mySN92a3d3",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup92a3d3",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:29:28Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-12T15:29:28Z level=info msg=Executing command asynchronously:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-12T15:29:28Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin92a3d3 password is: kxecGptKBU/ewe/+QqYxd+gO0oUXqC1muf5xiglW7jU=

time=2024-07-12T15:29:28Z level=info msg=Finished executing:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-12T15:29:28Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-12T15:29:31Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup92a3d3'...
WARNING: Resource group 'myWordPressAKSResourceGroup92a3d3' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-12T15:29:31Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup92a3d3
time=2024-07-12T15:29:34Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:29:34Z level=error msg=Error testing scenario: failed to execute code block 1 on step 3.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup92a3d3'...
WARNING: Resource group 'myWordPressAKSResourceGroup92a3d3' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup92a3d3'...
WARNING: Resource group 'myWordPressAKSResourceGroup92a3d3' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-12T15:29:35Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-12T15:29:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:29:35Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-12T15:29:35Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-12T15:29:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:35Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:29:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:29:35Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-12T15:29:35Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-12T15:29:35Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-12T15:29:35Z level=info msg=Changed directory to .
time=2024-07-12T15:29:35Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-12T15:29:35Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:29:35Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-12T15:29:35Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:29:38Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupc6aa81",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupc6aa81",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:29:38Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.749202
time=2024-07-12T15:29:38Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupc6aa81",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupc6aa81",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:29:38Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:29:38Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:29:38Z level=info msg=Found resource group named: myAKSResourceGroupc6aa81
time=2024-07-12T15:29:38Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-12T15:33:54Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-ej1e042a.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-ej1e042a.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupc6aa81/providers/Microsoft.ContainerService/managedClusters/myAKSClusterc6aa81",
  "identity": {
    "delegatedResources": null,
    "principalId": "3e2a9cda-21da-4d1f-8f2d-c09401574fb9",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "e1c62e35-ca3e-4061-8a77-b25b7dc74521",
      "objectId": "1be7fa23-7f2c-403c-a1de-2e6ec91c3291",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupc6aa81_myAKSClusterc6aa81_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClusterc6aa81-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCtFD6ZQIcIZamIzG/27wN77Pzs2EfFjO6c4GlwEAoYwZz5v3xxEU7HMlEmrsnVI5j94WuiQRSie1xev70QZ1nEchtZfpsbNP3KYMDiH8WLN9TSkC9iQzxe435P+aDAfU2B1Yj3QIoGH8/ZJceJcS4ekR3yeL4CrAuYyXx9H68TPXDT0dIKj+mAuo2vCnWkdBbhhWwOEW78W35+gB2S2SxuWGvrXwhE/chAQvLNoVIsNeci+WQf0cHH70GPwyr390Vk+JKPZ9w470bYOsvCgLshfVxV2LLGtmvarwjEZuE8vubDnjfXZ82Iq0VaV4VNg1RZW8AtKUAVJZmNMCPAil1J"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClusterc6aa81",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupc6aa81_myAKSClusterc6aa81_westeurope/providers/Microsoft.Network/publicIPAddresses/4f2c7f18-0df4-4115-90f0-c5d62fb7b27b",
          "resourceGroup": "MC_myAKSResourceGroupc6aa81_myAKSClusterc6aa81_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupc6aa81_myAKSClusterc6aa81_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupc6aa81",
  "resourceUid": "66914bebc6617f0001c57c98",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-12T15:33:54Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-12T15:33:54Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-12T15:33:55Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:33:55Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-12T15:33:55Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-12T15:33:56Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-32913306-vmss000000   Ready    agent   97s   v1.28.9

time=2024-07-12T15:33:56Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-12T15:33:56Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-12T15:33:56Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-12T15:33:56Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupc6aa81
time=2024-07-12T15:33:59Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:33:59Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-12T15:34:00Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-12T15:34:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:00Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-12T15:34:00Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-12T15:34:00Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-12T15:34:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:00Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-12T15:34:00Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-12T15:34:00Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-12T15:34:00Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-12T15:34:00Z level=info msg=Changed directory to .
time=2024-07-12T15:34:00Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-12T15:34:00Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:34:00Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-12T15:34:00Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:34:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup3eab72",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup3eab72",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:34:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.761468
time=2024-07-12T15:34:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup3eab72",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup3eab72",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:34:01Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-12T15:34:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:34:01Z level=info msg=Found resource group named: myResourceGroup3eab72
time=2024-07-12T15:34:01Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-12T15:34:10Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster3eab72 in resource group MC_myResourceGroup3eab72_myAKSCluster3eab72_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster3eab72 in resource group MC_myResourceGroup3eab72_myAKSCluster3eab72_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-12T15:34:10Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup3eab72
time=2024-07-12T15:34:11Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:34:11Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster3eab72 in resource group MC_myResourceGroup3eab72_myAKSCluster3eab72_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster3eab72 in resource group MC_myResourceGroup3eab72_myAKSCluster3eab72_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster3eab72 in resource group MC_myResourceGroup3eab72_myAKSCluster3eab72_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster3eab72 in resource group MC_myResourceGroup3eab72_myAKSCluster3eab72_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-12T15:34:12Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-12T15:34:12Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-12T15:34:12Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-12T15:34:12Z level=info msg=Changed directory to .
time=2024-07-12T15:34:12Z level=info msg=Executing command asynchronously:
 
time=2024-07-12T15:34:12Z level=info msg=Command output to stdout:
 
time=2024-07-12T15:34:12Z level=info msg=Finished executing:
 
time=2024-07-12T15:34:12Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-12T15:34:12Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:34:12Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-12T15:34:12Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-12T15:34:12Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-12T15:34:12Z level=info msg=Changed directory to .
time=2024-07-12T15:34:12Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-12T15:34:14Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:34:14Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-12T15:34:14Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-12T15:34:14Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-12T15:34:14Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-12T15:34:14Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-12T15:34:14Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-12T15:34:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"12d4d632-ca60-4402-b6af-5d5f3686411c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "808a3f76-424d-4d3f-83b3-6ebe79cf92a6",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:34:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716131
time=2024-07-12T15:34:27Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"12d4d632-ca60-4402-b6af-5d5f3686411c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "808a3f76-424d-4d3f-83b3-6ebe79cf92a6",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-12T15:34:27Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-12T15:34:27Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-12T15:34:39Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"d3e089b1-9188-475d-ae95-7e7ecff54508\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-12T15:34:39Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729408
time=2024-07-12T15:34:39Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"d3e089b1-9188-475d-ae95-7e7ecff54508\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-12T15:34:39Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-12T15:34:39Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-12T15:34:51Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"3414478d-b7f6-4128-b85f-b2a9c0689c81\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-12T15:34:51Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729330
time=2024-07-12T15:34:51Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"3414478d-b7f6-4128-b85f-b2a9c0689c81\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-12T15:34:51Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-12T15:34:51Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-12T15:35:20Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-12T15:34:55.321765+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-12T15:34:55.462389+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-12T15:34:55.462389+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-12T15:34:55.446762+00:00",
    "key2": "2024-07-12T15:34:55.446762+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-12T15:35:20Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-12T15:35:20Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-12T15:35:24Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:21.7878790Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b8b59c38-c002-4f3d-8706-511eecac1100 Correlation ID: dd0404cd-7bf0-42a2-ad15-8709ec11dc41 Timestamp: 2024-07-12 15:35:21Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:22.7915966Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b5810fda-3653-4b76-99ad-9f3b5a990e00 Correlation ID: ae7f5371-6840-49ff-8d26-42022b39bb7c Timestamp: 2024-07-12 15:35:22Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:23.7124010Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: a28b8199-e54f-4d85-83de-832f3cc41100 Correlation ID: 2ba4c232-bc79-4301-a727-f5dffb9140f6 Timestamp: 2024-07-12 15:35:23Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-12T15:35:24Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-12T15:35:26Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-12T15:35:26Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:21.7878790Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b8b59c38-c002-4f3d-8706-511eecac1100 Correlation ID: dd0404cd-7bf0-42a2-ad15-8709ec11dc41 Timestamp: 2024-07-12 15:35:21Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:22.7915966Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b5810fda-3653-4b76-99ad-9f3b5a990e00 Correlation ID: ae7f5371-6840-49ff-8d26-42022b39bb7c Timestamp: 2024-07-12 15:35:22Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:23.7124010Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: a28b8199-e54f-4d85-83de-832f3cc41100 Correlation ID: 2ba4c232-bc79-4301-a727-f5dffb9140f6 Timestamp: 2024-07-12 15:35:23Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:21.7878790Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b8b59c38-c002-4f3d-8706-511eecac1100 Correlation ID: dd0404cd-7bf0-42a2-ad15-8709ec11dc41 Timestamp: 2024-07-12 15:35:21Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:22.7915966Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b5810fda-3653-4b76-99ad-9f3b5a990e00 Correlation ID: ae7f5371-6840-49ff-8d26-42022b39bb7c Timestamp: 2024-07-12 15:35:22Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-12T15:35:23.7124010Z, assertion valid from 2024-07-12T15:05:14.0000000Z, expiry time of assertion 2024-07-12T15:10:14.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: a28b8199-e54f-4d85-83de-832f3cc41100 Correlation ID: 2ba4c232-bc79-4301-a727-f5dffb9140f6 Timestamp: 2024-07-12 15:35:23Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

<<<<<<< HEAD
time=2024-07-13T19:20:37-07:00 level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:20:37-07:00 level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
=======
time=2024-07-13T15:05:26Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-13T15:05:26Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:05:26Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:05:26Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-13T15:05:26Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-13T15:05:26Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:05:26Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:05:26Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-13T15:05:26Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-13T15:05:26Z level=info msg=Changed directory to .
time=2024-07-13T15:05:26Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-13T15:05:26Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:05:26Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-13T15:05:26Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:05:29Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbde0ff",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupbde0ff",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:05:29Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764887
time=2024-07-13T15:05:29Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbde0ff",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupbde0ff",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:05:29Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:05:29Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:05:29Z level=info msg=Found resource group named: myVMResourceGroupbde0ff
time=2024-07-13T15:05:29Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-13T15:06:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbde0ff/providers/Microsoft.Compute/virtualMachines/myVMbde0ff",
  "identity": {
    "systemAssignedIdentity": "b1a54a40-ba74-415f-b1b2-bb363c0f9bbd",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-22-48-82-A2-31",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.95.109.88",
  "resourceGroup": "myVMResourceGroupbde0ff",
  "zones": ""
}

time=2024-07-13T15:06:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716240
time=2024-07-13T15:06:47Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbde0ff/providers/Microsoft.Compute/virtualMachines/myVMbde0ff",
  "identity": {
    "systemAssignedIdentity": "b1a54a40-ba74-415f-b1b2-bb363c0f9bbd",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-22-48-82-A2-31",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.95.109.88",
  "resourceGroup": "myVMResourceGroupbde0ff",
  "zones": ""
}

time=2024-07-13T15:06:47Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-13T15:06:47Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-13T15:08:55Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbde0ff/providers/Microsoft.Compute/virtualMachines/myVMbde0ff/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroupbde0ff",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-13T15:08:55Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-13T15:08:55Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-13T15:08:57Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:08:57Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-13T15:08:57Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-13T15:08:59Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-13T15:08:59Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-13T15:08:59Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-13T15:08:59Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupbde0ff
time=2024-07-13T15:09:03Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:09:03Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-13T15:09:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:09:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:09:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:09:03Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-13T15:09:03Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-13T15:09:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:09:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:09:03Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-13T15:09:03Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:09:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:09:03Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:09:03Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:09:03Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-13T15:09:03Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-13T15:09:03Z level=info msg=Changed directory to .
time=2024-07-13T15:09:03Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-13T15:09:04Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:09:04Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-13T15:09:04Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:09:04Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:09:07Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup8973b6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:09:07Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-13T15:09:07Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup8973b6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:09:07Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:09:07Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:09:07Z level=info msg=Found resource group named: myAKSResourceGroup8973b6
time=2024-07-13T15:09:07Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-13T15:09:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.53.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"5b403791-edd8-4696-9e2e-b37012518e98\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6/providers/Microsoft.Network/virtualNetworks/myVNet8973b6",
    "location": "westeurope",
    "name": "myVNet8973b6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup8973b6",
    "resourceGuid": "9a5c7256-da29-4f44-a940-be59624bb2dc",
    "subnets": [
      {
        "addressPrefix": "10.53.0.0/22",
        "delegations": [],
        "etag": "W/\"5b403791-edd8-4696-9e2e-b37012518e98\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6/providers/Microsoft.Network/virtualNetworks/myVNet8973b6/subnets/mySN8973b6",
        "name": "mySN8973b6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup8973b6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:09:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.715668
time=2024-07-13T15:09:22Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.53.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"5b403791-edd8-4696-9e2e-b37012518e98\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6/providers/Microsoft.Network/virtualNetworks/myVNet8973b6",
    "location": "westeurope",
    "name": "myVNet8973b6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup8973b6",
    "resourceGuid": "9a5c7256-da29-4f44-a940-be59624bb2dc",
    "subnets": [
      {
        "addressPrefix": "10.53.0.0/22",
        "delegations": [],
        "etag": "W/\"5b403791-edd8-4696-9e2e-b37012518e98\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6/providers/Microsoft.Network/virtualNetworks/myVNet8973b6/subnets/mySN8973b6",
        "name": "mySN8973b6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup8973b6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:09:22Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-13T15:09:22Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-13T15:09:31Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:09:31Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-13T15:09:31Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-13T15:13:00Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8973b6/providers/Microsoft.Network/virtualNetworks/myVNet8973b6/subnets/mySN8973b6",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-nlr723r5.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-nlr723r5.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup8973b6/providers/Microsoft.ContainerService/managedClusters/myAKSCluster8973b6",
  "identity": {
    "delegatedResources": null,
    "principalId": "f9a71764-1da3-45dd-b919-bbf0321553a8",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "f2195b5f-d404-4059-b8b6-02f28257d630",
      "objectId": "a42f6567-4ab8-4568-a307-3e684606eff9",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup8973b6_myAKSCluster8973b6_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster8973b6-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster8973b6",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup8973b6_myAKSCluster8973b6_westeurope/providers/Microsoft.Network/publicIPAddresses/c34d7026-9445-499d-9b7b-9722bf6d164c",
          "resourceGroup": "MC_myAKSResourceGroup8973b6_myAKSCluster8973b6_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup8973b6_myAKSCluster8973b6_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup8973b6",
  "resourceUid": "669298bfc7b915000142b74d",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-13T15:13:00Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-13T15:13:00Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-13T15:13:00Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:13:00Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-13T15:13:00Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-13T15:13:02Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:13:02Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-13T15:13:02Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-13T15:13:06Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-28722089-vmss000000   Ready    agent   72s   v1.28.9

time=2024-07-13T15:13:06Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-13T15:13:06Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-13T15:14:17Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Sat Jul 13 15:13:16 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-13T15:14:17Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-13T15:14:17Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-13T15:14:17Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:14:17Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-13T15:14:17Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-13T15:14:20Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-13T15:14:20Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-13T15:14:20Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-13T15:14:52Z level=info msg=Command output to stdout:
 False
False
False
True

time=2024-07-13T15:14:52Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-13T15:14:52Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-13T15:14:59Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-13T15:14:59Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-13T15:14:59Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-13T15:15:00Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-13T15:15:00Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-13T15:15:00Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-13T15:15:04Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-13T15:15:04Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-13T15:15:04Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-13T15:15:05Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-13T15:15:05Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-13T15:15:05Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-13T15:15:05Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-13T15:15:05Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-13T15:15:05Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-13T15:15:05Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-13T15:15:05Z level=info msg=Finished executing:
 helm repo update

time=2024-07-13T15:15:05Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-13T15:15:41Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Sat Jul 13 15:15:07 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-13T15:15:41Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-13T15:15:41Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-13T15:15:41Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:15:41Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-13T15:15:41Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-13T15:15:41Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:15:41Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-13T15:15:41Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-13T15:15:41Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:15:41Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-13T15:15:41Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-13T15:15:41Z level=info msg=Command output to stdout:
 57.153.163.239

time=2024-07-13T15:15:41Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-13T15:15:41Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-13T15:15:41Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel8973b6.westeurope.cloudapp.azure.com

time=2024-07-13T15:15:41Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-13T15:15:41Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-13T15:15:41Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup8973b6
time=2024-07-13T15:15:46Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:15:46Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-13T15:15:46Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:15:46Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:15:46Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-13T15:15:46Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-13T15:15:46Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:15:46Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:15:46Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:15:46Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:15:46Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-13T15:15:46Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-13T15:15:46Z level=info msg=Changed directory to .
time=2024-07-13T15:15:46Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-13T15:15:46Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:15:46Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-13T15:15:46Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:15:49Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3649df",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup3649df",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:15:49Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-13T15:15:49Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3649df",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup3649df",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:15:49Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:15:49Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:15:49Z level=info msg=Found resource group named: myAKSResourceGroup3649df
time=2024-07-13T15:15:49Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-13T15:21:05Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-u1dmx8kb.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-u1dmx8kb.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup3649df/providers/Microsoft.ContainerService/managedClusters/myAKSCluster3649df",
  "identity": {
    "delegatedResources": null,
    "principalId": "4bdf1014-fca5-4a49-8173-5b35ef61f1ea",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "d5b8398e-caf0-4224-a80a-34b92e6ba51c",
      "objectId": "0edc5e5d-dd12-4d7c-bbfd-77b2f955d202",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup3649df_myAKSCluster3649df_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster3649df-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwNH2EE4k4cOuKXzFTVgelXUwsVuuQZLXgOWRSsvuz+xzpI3cuKOoyZJ6/twAdriWoCGB+idesZRVxhjXyK4bXjviOHqU3kxI5YU8HAnDPaOs6zOARmer/2csPc+7ygQaenLOz165T34RvoXK0QX1GT9hjaSkaj+pxs/ut6WIo6Mhb2/5m8Iq+V4ompfSA7rons3H2/GN21U6A91cCjGIhXlA2EiG3cSAA/rLsON9jMKoLKLdfzFpcrOSLZc1Kmy2z2qnZIZZstIC0ZarixbsW6uo/a8yXFQ8uyiUebXc4buxsO1m1zVkJfc763N4YYaWJITV52iD06MVDpc9nT8yh"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster3649df",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup3649df_myAKSCluster3649df_westeurope/providers/Microsoft.Network/publicIPAddresses/1fecd7cc-ef40-4a02-ba9e-46bdf5c874c5",
          "resourceGroup": "MC_myAKSResourceGroup3649df_myAKSCluster3649df_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup3649df_myAKSCluster3649df_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup3649df",
  "resourceUid": "66929a2f93a7be00011ad0cf",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-13T15:21:05Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-13T15:21:05Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-13T15:21:07Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:21:07Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-13T15:21:07Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-13T15:21:07Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-12621141-vmss000000   Ready    agent   2m3s   v1.28.9

time=2024-07-13T15:21:07Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-13T15:21:07Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-13T15:21:07Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-13T15:21:07Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup3649df
time=2024-07-13T15:21:12Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:21:12Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-13T15:21:13Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T15:21:13Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
<<<<<<< HEAD
time=2024-07-13T19:20:37-07:00 level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-13T19:20:37-07:00 level=info msg=Changed directory to .
time=2024-07-13T19:20:37-07:00 level=info msg=Executing command asynchronously:
=======
time=2024-07-13T15:21:13Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-13T15:21:13Z level=info msg=Changed directory to .
time=2024-07-13T15:21:13Z level=info msg=Executing command asynchronously:
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

<<<<<<< HEAD
time=2024-07-13T19:20:37-07:00 level=debug msg=Window size changed to: 107 x 13
time=2024-07-13T19:20:37-07:00 level=info msg=Command output to stdout:
 
time=2024-07-13T19:20:37-07:00 level=info msg=Finished executing:
=======
time=2024-07-13T15:21:13Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:21:13Z level=info msg=Finished executing:
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

<<<<<<< HEAD
time=2024-07-13T19:20:37-07:00 level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-13T19:20:38-07:00 level=info msg=Command output to stdout:
 
time=2024-07-13T19:20:38-07:00 level=info msg=Finished executing:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-13T19:20:38-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T19:20:42-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
=======
time=2024-07-13T15:21:13Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-13T15:21:14Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-13T15:21:14Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:21:14Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-13T15:21:15Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:21:15Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:21:15Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
<<<<<<< HEAD

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgqcajnhgt",
  "location": "westus",
  "managedBy": null,
  "name": "rgqcajnhgt",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T19:20:42-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.739432
time=2024-07-13T19:20:42-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgqcajnhgt",
  "location": "westus",
  "managedBy": null,
  "name": "rgqcajnhgt",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T19:20:42-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T19:20:42-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T19:20:42-07:00 level=info msg=Found resource group named: rgqcajnhgt
time=2024-07-13T19:20:42-07:00 level=info msg=Executing command asynchronously:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-13T19:21:04-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

Actual{
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-14T02:20:43.413124+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-14T02:20:43.647507+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-14T02:20:43.647507+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgqcajnhgt/providers/Microsoft.Storage/storageAccounts/storageqcajnhgt",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-14T02:20:43.506877+00:00",
    "key2": "2024-07-14T02:20:43.506877+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storageqcajnhgt",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storageqcajnhgt.blob.core.windows.net/",
    "dfs": "https://storageqcajnhgt.dfs.core.windows.net/",
    "file": "https://storageqcajnhgt.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storageqcajnhgt.queue.core.windows.net/",
    "table": "https://storageqcajnhgt.table.core.windows.net/",
    "web": "https://storageqcajnhgt.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgqcajnhgt",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-13T19:21:04-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.782234
time=2024-07-13T19:21:04-07:00 level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-14T02:20:43.413124+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-14T02:20:43.647507+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-14T02:20:43.647507+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgqcajnhgt/providers/Microsoft.Storage/storageAccounts/storageqcajnhgt",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-14T02:20:43.506877+00:00",
    "key2": "2024-07-14T02:20:43.506877+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storageqcajnhgt",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storageqcajnhgt.blob.core.windows.net/",
    "dfs": "https://storageqcajnhgt.dfs.core.windows.net/",
    "file": "https://storageqcajnhgt.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storageqcajnhgt.queue.core.windows.net/",
    "table": "https://storageqcajnhgt.table.core.windows.net/",
    "web": "https://storageqcajnhgt.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgqcajnhgt",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-13T19:21:04-07:00 level=info msg=Finished executing:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-13T19:21:04-07:00 level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-13T19:21:05-07:00 level=info msg=Command output to stdout:
 
time=2024-07-13T19:21:05-07:00 level=info msg=Finished executing:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-13T19:21:05-07:00 level=info msg=Executing command asynchronously:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-13T19:24:06-07:00 level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-13T19:24:06-07:00 level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-13T19:24:06-07:00 level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-13T19:24:06-07:00 level=info msg=Changed directory to .
time=2024-07-13T19:24:06-07:00 level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-13T19:24:06-07:00 level=debug msg=Window size changed to: 104 x 13
time=2024-07-13T19:24:06-07:00 level=info msg=Command output to stdout:
 
time=2024-07-13T19:24:06-07:00 level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-13T19:24:06-07:00 level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-13T19:24:07-07:00 level=info msg=Command output to stdout:
 
time=2024-07-13T19:24:07-07:00 level=info msg=Finished executing:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-13T19:24:07-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T19:24:08-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
=======
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-13T15:21:15Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-13T15:21:15Z level=info msg=Changed directory to .
time=2024-07-13T15:21:15Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-13T15:21:16Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:21:16Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-13T15:21:16Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:21:16Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-13T15:21:19Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup1dbdde",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:21:19Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.748791
time=2024-07-13T15:21:19Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup1dbdde",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:21:19Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-13T15:21:19Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:21:19Z level=info msg=Found resource group named: myLEMPResourceGroup1dbdde
time=2024-07-13T15:21:19Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-13T15:21:34Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.45.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"06141331-d636-4f2e-80bf-d56ad0d464a8\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/virtualNetworks/myVNet1dbdde",
    "location": "westeurope",
    "name": "myVNet1dbdde",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "c5507c94-561b-4b72-82cb-d7fcfe4d0ca2",
    "subnets": [
      {
        "addressPrefix": "10.45.0.0/24",
        "delegations": [],
        "etag": "W/\"06141331-d636-4f2e-80bf-d56ad0d464a8\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/virtualNetworks/myVNet1dbdde/subnets/mySN1dbdde",
        "name": "mySN1dbdde",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:21:34Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.722297
time=2024-07-13T15:21:34Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.45.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"06141331-d636-4f2e-80bf-d56ad0d464a8\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/virtualNetworks/myVNet1dbdde",
    "location": "westeurope",
    "name": "myVNet1dbdde",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "c5507c94-561b-4b72-82cb-d7fcfe4d0ca2",
    "subnets": [
      {
        "addressPrefix": "10.45.0.0/24",
        "delegations": [],
        "etag": "W/\"06141331-d636-4f2e-80bf-d56ad0d464a8\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/virtualNetworks/myVNet1dbdde/subnets/mySN1dbdde",
        "name": "mySN1dbdde",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:21:34Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-13T15:21:34Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-13T15:21:40Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel1dbdde",
      "fqdn": "mydnslabel1dbdde.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"f92022dd-48aa-441c-a743-73f265fa9b30\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/publicIPAddresses/myPublicIP1dbdde",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.163.239",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP1dbdde",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "3624aa8e-d868-4761-b741-1b6991de3b01",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-13T15:21:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751033
time=2024-07-13T15:21:40Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel1dbdde",
      "fqdn": "mydnslabel1dbdde.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"f92022dd-48aa-441c-a743-73f265fa9b30\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/publicIPAddresses/myPublicIP1dbdde",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.163.239",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP1dbdde",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "3624aa8e-d868-4761-b741-1b6991de3b01",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-13T15:21:40Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-13T15:21:40Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-13T15:21:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde",
    "location": "westeurope",
    "name": "myNSG1dbdde",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "7d69bf1b-fd7a-4ac5-a4a1-56e6e9c421b2",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-13T15:21:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.567550
time=2024-07-13T15:21:43Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"3366e209-f628-4e80-873d-431e7c337f05\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde",
    "location": "westeurope",
    "name": "myNSG1dbdde",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "7d69bf1b-fd7a-4ac5-a4a1-56e6e9c421b2",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-13T15:21:43Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-13T15:21:43Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-13T15:21:46Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"a324eea4-c4b4-4ec9-b12a-c7411e793264\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/securityRules/Allow-Access1dbdde",
  "name": "Allow-Access1dbdde",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup1dbdde",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-13T15:21:46Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.794348
time=2024-07-13T15:21:46Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"a324eea4-c4b4-4ec9-b12a-c7411e793264\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde/securityRules/Allow-Access1dbdde",
  "name": "Allow-Access1dbdde",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup1dbdde",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-13T15:21:46Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-13T15:21:46Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-13T15:21:49Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "sr4fbri1kzzexawl054p2timuc.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"591ab4ea-b5ad-48c8-8a41-eded87ff7cab\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkInterfaces/myVMNic1dbdde",
    "ipConfigurations": [
      {
        "etag": "W/\"591ab4ea-b5ad-48c8-8a41-eded87ff7cab\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkInterfaces/myVMNic1dbdde/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.45.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/publicIPAddresses/myPublicIP1dbdde",
          "resourceGroup": "myLEMPResourceGroup1dbdde"
        },
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/virtualNetworks/myVNet1dbdde/subnets/mySN1dbdde",
          "resourceGroup": "myLEMPResourceGroup1dbdde"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic1dbdde",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde",
      "resourceGroup": "myLEMPResourceGroup1dbdde"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "2f48445c-d49d-4f52-998a-56e172be8206",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-13T15:21:49Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.707603
time=2024-07-13T15:21:49Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "sr4fbri1kzzexawl054p2timuc.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"591ab4ea-b5ad-48c8-8a41-eded87ff7cab\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkInterfaces/myVMNic1dbdde",
    "ipConfigurations": [
      {
        "etag": "W/\"591ab4ea-b5ad-48c8-8a41-eded87ff7cab\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkInterfaces/myVMNic1dbdde/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.45.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/publicIPAddresses/myPublicIP1dbdde",
          "resourceGroup": "myLEMPResourceGroup1dbdde"
        },
        "resourceGroup": "myLEMPResourceGroup1dbdde",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/virtualNetworks/myVNet1dbdde/subnets/mySN1dbdde",
          "resourceGroup": "myLEMPResourceGroup1dbdde"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic1dbdde",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup1dbdde/providers/Microsoft.Network/networkSecurityGroups/myNSG1dbdde",
      "resourceGroup": "myLEMPResourceGroup1dbdde"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup1dbdde",
    "resourceGuid": "2f48445c-d49d-4f52-998a-56e172be8206",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-13T15:21:49Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-13T15:21:49Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-13T15:21:49Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:21:49Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-13T15:21:49Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-13T15:22:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "a017ba20-8b83-4d5c-87fb-b11bf1d5969e",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup1dbdde/providers/Microsoft.Network/privateDnsZones/mydnslabel1dbdde.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel1dbdde.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup1dbdde",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-13T15:22:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751878
time=2024-07-13T15:22:24Z level=info msg=Command output to stdout:
 {
  "etag": "a017ba20-8b83-4d5c-87fb-b11bf1d5969e",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup1dbdde/providers/Microsoft.Network/privateDnsZones/mydnslabel1dbdde.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel1dbdde.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup1dbdde",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-13T15:22:24Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-13T15:22:24Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-13T15:22:26Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup1dbdde'...
WARNING: Resource group 'myLEMPResourceGroup1dbdde' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-13T15:22:26Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup1dbdde
time=2024-07-13T15:22:30Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:22:30Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup1dbdde'...
WARNING: Resource group 'myLEMPResourceGroup1dbdde' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup1dbdde'...
WARNING: Resource group 'myLEMPResourceGroup1dbdde' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-13T15:22:31Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-13T15:22:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:31Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-13T15:22:31Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-13T15:22:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:31Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-13T15:22:31Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-13T15:22:31Z level=info msg=Changed directory to .
time=2024-07-13T15:22:31Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-13T15:22:31Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:22:31Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-13T15:22:31Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:22:32Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup2db2e3",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup2db2e3",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:22:32Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.767626
time=2024-07-13T15:22:32Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup2db2e3",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup2db2e3",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:22:32Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:22:32Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:22:32Z level=info msg=Found resource group named: myVMResourceGroup2db2e3
time=2024-07-13T15:22:32Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-13T15:22:37Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_cve1ezFczbPGg9PMqtOhnnjnB7QmCNJb' is not valid according to the validation procedure. The tracking id is 'da3ee103-4563-4211-9d19-01beb29aa996'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-13T15:22:37Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup2db2e3
time=2024-07-13T15:22:38Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:22:38Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_cve1ezFczbPGg9PMqtOhnnjnB7QmCNJb' is not valid according to the validation procedure. The tracking id is 'da3ee103-4563-4211-9d19-01beb29aa996'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_cve1ezFczbPGg9PMqtOhnnjnB7QmCNJb' is not valid according to the validation procedure. The tracking id is 'da3ee103-4563-4211-9d19-01beb29aa996'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-13T15:22:39Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-13T15:22:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:39Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:22:39Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:22:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:39Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:22:39Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-13T15:22:39Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-13T15:22:39Z level=info msg=Changed directory to .
time=2024-07-13T15:22:39Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-13T15:22:39Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:22:39Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-13T15:22:39Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-13T15:22:41Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup8f6ac9",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup8f6ac9",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:22:41Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716151
time=2024-07-13T15:22:41Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup8f6ac9",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup8f6ac9",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:22:41Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-13T15:22:41Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:22:41Z level=info msg=Found resource group named: myStaticWebAppResourceGroup8f6ac9
time=2024-07-13T15:22:41Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-13T15:22:46Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "calm-forest-037a4280f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup8f6ac9/providers/Microsoft.Web/staticSites/myStaticWebApp8f6ac9",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebApp8f6ac9",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroup8f6ac9",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-13T15:22:46Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-13T15:22:46Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-13T15:22:47Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:22:47Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-13T15:22:47Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-13T15:22:47Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-13T15:22:47Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-13T15:22:47Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-13T15:22:47Z level=info msg=Command output to stdout:
 You can now visit your web server at https://calm-forest-037a4280f.5.azurestaticapps.net

time=2024-07-13T15:22:47Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-13T15:22:47Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-13T15:22:49Z level=info msg=Command output to stdout:
 "calm-forest-037a4280f.5.azurestaticapps.net"

time=2024-07-13T15:22:49Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-13T15:22:49Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-13T15:22:49Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroup8f6ac9
time=2024-07-13T15:22:51Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:22:51Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:22:51Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-13T15:22:51Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-13T15:22:51Z level=info msg=Changed directory to .
time=2024-07-13T15:22:51Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-13T15:22:51Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:22:51Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-13T15:22:51Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-13T15:22:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
<<<<<<< HEAD
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgxyyijjm6",
  "location": "westus",
  "managedBy": null,
  "name": "rgxyyijjm6",
=======
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupd01b7c",
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

<<<<<<< HEAD
time=2024-07-13T19:24:08-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.750569
time=2024-07-13T19:24:08-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgxyyijjm6",
  "location": "westus",
  "managedBy": null,
  "name": "rgxyyijjm6",
=======
time=2024-07-13T15:22:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.754352
time=2024-07-13T15:22:52Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupd01b7c",
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

<<<<<<< HEAD
time=2024-07-13T19:24:08-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T19:24:08-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T19:24:08-07:00 level=info msg=Found resource group named: rgxyyijjm6
time=2024-07-13T19:24:08-07:00 level=info msg=Executing command asynchronously:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
=======
time=2024-07-13T15:22:52Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-13T15:22:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:22:52Z level=info msg=Found resource group named: myVMSSResourceGroupd01b7c
time=2024-07-13T15:22:52Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-13T15:23:05Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.28.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"c0e2ce7c-c49d-4463-9037-cd19bf225f48\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c",
    "location": "eastus",
    "name": "myVNetd01b7c",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupd01b7c",
    "resourceGuid": "95f752a5-d0f8-4a77-a292-c0c2eee9f1cb",
    "subnets": [
      {
        "addressPrefix": "10.28.0.0/24",
        "delegations": [],
        "etag": "W/\"c0e2ce7c-c49d-4463-9037-cd19bf225f48\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c/subnets/myVMSNd01b7c",
        "name": "myVMSNd01b7c",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:23:05Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.718870
time=2024-07-13T15:23:05Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.28.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"c0e2ce7c-c49d-4463-9037-cd19bf225f48\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c",
    "location": "eastus",
    "name": "myVNetd01b7c",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupd01b7c",
    "resourceGuid": "95f752a5-d0f8-4a77-a292-c0c2eee9f1cb",
    "subnets": [
      {
        "addressPrefix": "10.28.0.0/24",
        "delegations": [],
        "etag": "W/\"c0e2ce7c-c49d-4463-9037-cd19bf225f48\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c/subnets/myVMSNd01b7c",
        "name": "myVMSNd01b7c",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:23:05Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-13T15:23:05Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-13T15:23:18Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.28.1.0/24",
  "delegations": [],
  "etag": "W/\"1127cfa8-65af-4476-8346-7ef4a680a467\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c/subnets/myAPPGWSNd01b7c",
  "name": "myAPPGWSNd01b7c",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupd01b7c",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-13T15:23:18Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.735446
time=2024-07-13T15:23:18Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.28.1.0/24",
  "delegations": [],
  "etag": "W/\"1127cfa8-65af-4476-8346-7ef4a680a467\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c/subnets/myAPPGWSNd01b7c",
  "name": "myAPPGWSNd01b7c",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupd01b7c",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-13T15:23:18Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-13T15:23:18Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-13T15:23:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"be4ccba7-c205-4879-88f6-15a1b2e51aa5\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPd01b7c",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.78.14",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPd01b7c",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupd01b7c",
    "resourceGuid": "e3c1a8fc-b988-4032-bff6-ce7570a0f68f",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-13T15:23:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747430
time=2024-07-13T15:23:22Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"be4ccba7-c205-4879-88f6-15a1b2e51aa5\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPd01b7c",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.78.14",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPd01b7c",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupd01b7c",
    "resourceGuid": "e3c1a8fc-b988-4032-bff6-ce7570a0f68f",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-13T15:23:22Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-13T15:23:22Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-13T15:30:31Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPd01b7c",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          }
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c/subnets/myAPPGWSNd01b7c",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          }
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "a7ced488-f3ea-4e12-8cdb-b6084b8efd65",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-13T15:30:31Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731832
time=2024-07-13T15:30:31Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPd01b7c",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          }
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/virtualNetworks/myVNetd01b7c/subnets/myAPPGWSNd01b7c",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          }
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupd01b7c"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"fef7dcfe-d010-4df6-a9d0-7dbcc7a5a905\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupd01b7c/providers/Microsoft.Network/applicationGateways/myAPPGWd01b7c/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupd01b7c"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupd01b7c",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "a7ced488-f3ea-4e12-8cdb-b6084b8efd65",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-13T15:30:31Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-13T15:30:31Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-13T15:31:05Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_PlpdMtWqyqPklClpVrdDLRAfRqggQozj' is not valid according to the validation procedure. The tracking id is 'eabcabed-888a-442f-a454-f4a401ffb3a7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-13T15:31:05Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupd01b7c
time=2024-07-13T15:31:06Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:31:06Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_PlpdMtWqyqPklClpVrdDLRAfRqggQozj' is not valid according to the validation procedure. The tracking id is 'eabcabed-888a-442f-a454-f4a401ffb3a7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_PlpdMtWqyqPklClpVrdDLRAfRqggQozj' is not valid according to the validation procedure. The tracking id is 'eabcabed-888a-442f-a454-f4a401ffb3a7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-13T15:31:08Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-13T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:31:08Z level=warning msg=The node before the codeblock `az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:31:08Z level=debug msg=Found 27 code blocks CodeBlocks=[{bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-13T15:31:08Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-13T15:31:08Z level=info msg=Changed directory to .
time=2024-07-13T15:31:08Z level=info msg=Executing command asynchronously:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-13T15:31:08Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:31:08Z level=info msg=Finished executing:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-13T15:31:08Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:31:08Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-13T15:31:11Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup80df52",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup80df52",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:31:11Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747425
time=2024-07-13T15:31:11Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup80df52",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup80df52",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:31:11Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-13T15:31:11Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:31:11Z level=info msg=Found resource group named: myWordPressAKSResourceGroup80df52
time=2024-07-13T15:31:11Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-13T15:31:25Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.65.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"1abecdb6-f9e1-439d-8b27-b885832ba72b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup80df52/providers/Microsoft.Network/virtualNetworks/myVNet80df52",
    "location": "westeurope",
    "name": "myVNet80df52",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup80df52",
    "resourceGuid": "431ae1ca-de16-4a4b-b8e1-adf2cb9d75d7",
    "subnets": [
      {
        "addressPrefix": "10.65.0.0/22",
        "delegations": [],
        "etag": "W/\"1abecdb6-f9e1-439d-8b27-b885832ba72b\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup80df52/providers/Microsoft.Network/virtualNetworks/myVNet80df52/subnets/mySN80df52",
        "name": "mySN80df52",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup80df52",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:31:25Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729591
time=2024-07-13T15:31:25Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.65.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"1abecdb6-f9e1-439d-8b27-b885832ba72b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup80df52/providers/Microsoft.Network/virtualNetworks/myVNet80df52",
    "location": "westeurope",
    "name": "myVNet80df52",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup80df52",
    "resourceGuid": "431ae1ca-de16-4a4b-b8e1-adf2cb9d75d7",
    "subnets": [
      {
        "addressPrefix": "10.65.0.0/22",
        "delegations": [],
        "etag": "W/\"1abecdb6-f9e1-439d-8b27-b885832ba72b\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup80df52/providers/Microsoft.Network/virtualNetworks/myVNet80df52/subnets/mySN80df52",
        "name": "mySN80df52",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup80df52",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:31:25Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-13T15:31:25Z level=info msg=Executing command asynchronously:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-13T15:31:25Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin80df52 password is: 42uirmGzJOO+GT/WTg02B/ilv7wcD5bKCF5VMd5jmNE=

time=2024-07-13T15:31:25Z level=info msg=Finished executing:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-13T15:31:25Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-13T15:31:28Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup80df52'...
WARNING: Resource group 'myWordPressAKSResourceGroup80df52' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-13T15:31:28Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup80df52
time=2024-07-13T15:31:32Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:31:32Z level=error msg=Error testing scenario: failed to execute code block 1 on step 3.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup80df52'...
WARNING: Resource group 'myWordPressAKSResourceGroup80df52' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup80df52'...
WARNING: Resource group 'myWordPressAKSResourceGroup80df52' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-13T15:31:33Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-13T15:31:33Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-13T15:31:33Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-13T15:31:33Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-13T15:31:33Z level=info msg=Changed directory to .
time=2024-07-13T15:31:33Z level=info msg=Executing command asynchronously:
 
time=2024-07-13T15:31:33Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:31:33Z level=info msg=Finished executing:
 
time=2024-07-13T15:31:33Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-13T15:31:33Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:31:33Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-13T15:31:33Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-13T15:31:33Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-13T15:31:33Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-13T15:31:33Z level=info msg=Changed directory to .
time=2024-07-13T15:31:33Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-13T15:31:34Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:31:34Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-13T15:31:34Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-13T15:31:47Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:31:47Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-13T15:31:47Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:31:47Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-13T15:31:52Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-13T15:31:52Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-13T15:31:52Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-13T15:31:54Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-13T15:31:54Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-13T15:31:54Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:31:54Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-13T15:31:56Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:31:56Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-13T15:31:56Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:31:56Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-13T15:31:56Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-13T15:31:56Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-13T15:31:56Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-13T15:32:20Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-13T15:32:20Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-13T15:32:20Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:32:20Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-13T15:32:21Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:32:21.6205390Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 7623e259-acd4-4017-922f-2370a1900b00 Correlation ID: edf72b85-7ac0-4abe-a800-22c08d80b2d9 Timestamp: 2024-07-13 15:32:21Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-13T15:32:21Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:32:21Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:32:21.6205390Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 7623e259-acd4-4017-922f-2370a1900b00 Correlation ID: edf72b85-7ac0-4abe-a800-22c08d80b2d9 Timestamp: 2024-07-13 15:32:21Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:32:21.6205390Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 7623e259-acd4-4017-922f-2370a1900b00 Correlation ID: edf72b85-7ac0-4abe-a800-22c08d80b2d9 Timestamp: 2024-07-13 15:32:21Z
Interactive authentication is needed. Please run:
az login

time=2024-07-13T15:32:23Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-13T15:32:23Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-13T15:32:23Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:23Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:23Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:23Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:23Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:23Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-13T15:32:23Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-13T15:32:23Z level=info msg=Changed directory to .
time=2024-07-13T15:32:23Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-13T15:32:23Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-4ti9tzkt" does not exist
'
time=2024-07-13T15:32:23Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:32:23Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-4ti9tzkt" does not exist
'
StdErr: error: context "aks-primary-cnpg-4ti9tzkt" does not exist

time=2024-07-13T15:32:25Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-13T15:32:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:32:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:32:25Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-13T15:32:25Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-13T15:32:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:32:25Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:32:25Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-13T15:32:25Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-13T15:32:25Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-13T15:32:25Z level=info msg=Changed directory to .
time=2024-07-13T15:32:25Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-13T15:32:25Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:32:25Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-13T15:32:25Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:32:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup93c5ad",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup93c5ad",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:32:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750683
time=2024-07-13T15:32:28Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup93c5ad",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup93c5ad",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:32:28Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:32:28Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:32:28Z level=info msg=Found resource group named: myAKSResourceGroup93c5ad
time=2024-07-13T15:32:28Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-13T15:36:13Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "eTag": "5c73cde4-8a79-47e6-8614-d261993a80a8",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-nw8j3j07.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "f6994507-5a98-45dd-8aa9-42208dd2fb79",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-nw8j3j07.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup93c5ad/providers/Microsoft.ContainerService/managedClusters/myAKSCluster93c5ad",
  "identity": {
    "delegatedResources": null,
    "principalId": "a9dd0daf-8d1b-4af3-89db-0e69b190869b",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "82ffdb5e-9a25-4f2c-bd49-f2042e566640",
      "objectId": "250b2e15-260a-404a-8856-a74233727552",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup93c5ad_myAKSCluster93c5ad_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster93c5ad-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwNH2EE4k4cOuKXzFTVgelXUwsVuuQZLXgOWRSsvuz+xzpI3cuKOoyZJ6/twAdriWoCGB+idesZRVxhjXyK4bXjviOHqU3kxI5YU8HAnDPaOs6zOARmer/2csPc+7ygQaenLOz165T34RvoXK0QX1GT9hjaSkaj+pxs/ut6WIo6Mhb2/5m8Iq+V4ompfSA7rons3H2/GN21U6A91cCjGIhXlA2EiG3cSAA/rLsON9jMKoLKLdfzFpcrOSLZc1Kmy2z2qnZIZZstIC0ZarixbsW6uo/a8yXFQ8uyiUebXc4buxsO1m1zVkJfc763N4YYaWJITV52iD06MVDpc9nT8yh"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster93c5ad",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup93c5ad_myAKSCluster93c5ad_westeurope/providers/Microsoft.Network/publicIPAddresses/15d48221-539d-4668-88b7-06a9f3b7fcb4",
          "resourceGroup": "MC_myAKSResourceGroup93c5ad_myAKSCluster93c5ad_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup93c5ad_myAKSCluster93c5ad_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup93c5ad",
  "resourceUid": "66929e15c7b915000142b752",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-13T15:36:13Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-13T15:36:13Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-13T15:36:15Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:36:15Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-13T15:36:15Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-13T15:36:16Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-14212662-vmss000000   Ready    agent   86s   v1.28.9

time=2024-07-13T15:36:16Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-13T15:36:16Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-13T15:36:16Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-13T15:36:16Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup93c5ad
time=2024-07-13T15:36:20Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:36:20Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-13T15:36:21Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-13T15:36:21Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:21Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-13T15:36:21Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-13T15:36:21Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-13T15:36:21Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:21Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-13T15:36:21Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-13T15:36:21Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-13T15:36:21Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-13T15:36:21Z level=info msg=Changed directory to .
time=2024-07-13T15:36:21Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-13T15:36:21Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:36:21Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-13T15:36:21Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:36:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup27344f",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup27344f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:36:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.765893
time=2024-07-13T15:36:22Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup27344f",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup27344f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:36:22Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-13T15:36:22Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:36:22Z level=info msg=Found resource group named: myResourceGroup27344f
time=2024-07-13T15:36:22Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-13T15:36:36Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster27344f in resource group MC_myResourceGroup27344f_myAKSCluster27344f_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster27344f in resource group MC_myResourceGroup27344f_myAKSCluster27344f_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-13T15:36:36Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup27344f
time=2024-07-13T15:36:37Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:36:37Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster27344f in resource group MC_myResourceGroup27344f_myAKSCluster27344f_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster27344f in resource group MC_myResourceGroup27344f_myAKSCluster27344f_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster27344f in resource group MC_myResourceGroup27344f_myAKSCluster27344f_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster27344f in resource group MC_myResourceGroup27344f_myAKSCluster27344f_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-13T15:36:39Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-13T15:36:39Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-13T15:36:39Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-13T15:36:39Z level=info msg=Changed directory to .
time=2024-07-13T15:36:39Z level=info msg=Executing command asynchronously:
 
time=2024-07-13T15:36:39Z level=info msg=Command output to stdout:
 
time=2024-07-13T15:36:39Z level=info msg=Finished executing:
 
time=2024-07-13T15:36:39Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-13T15:36:39Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:36:39Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-13T15:36:39Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-13T15:36:39Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-13T15:36:39Z level=info msg=Changed directory to .
time=2024-07-13T15:36:39Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-13T15:36:40Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:36:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-13T15:36:40Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-13T15:36:40Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-13T15:36:40Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-13T15:36:40Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-13T15:36:40Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-13T15:36:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"56aa95f4-e730-49d3-85c6-1ee5b486c8a7\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "9d172473-ba20-4fbd-b960-d205ceb779ee",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:36:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712721
time=2024-07-13T15:36:52Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"56aa95f4-e730-49d3-85c6-1ee5b486c8a7\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "9d172473-ba20-4fbd-b960-d205ceb779ee",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-13T15:36:52Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-13T15:36:52Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-13T15:37:03Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"40a5e227-822d-4112-aaa1-6c114e74e045\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-13T15:37:03Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.727668
time=2024-07-13T15:37:03Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"40a5e227-822d-4112-aaa1-6c114e74e045\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-13T15:37:03Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-13T15:37:03Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-13T15:37:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"3572b3e8-7770-4dbd-bd29-b11a074b91b6\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-13T15:37:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729330
time=2024-07-13T15:37:15Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"3572b3e8-7770-4dbd-bd29-b11a074b91b6\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-13T15:37:15Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-13T15:37:15Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-13T15:37:43Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-13T15:37:17.374849+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-13T15:37:17.515477+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-13T15:37:17.515477+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-13T15:37:17.499849+00:00",
    "key2": "2024-07-13T15:37:17.499849+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-13T15:37:43Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-13T15:37:43Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-13T15:37:48Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:45.1662346Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 5ae89785-50f8-4003-85df-3350243d0c00 Correlation ID: 6e71d95f-e2a5-41ca-a7a4-2ac9b6933ed5 Timestamp: 2024-07-13 15:37:45Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:46.2250922Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 0d5dc8a2-d33f-4ec6-8dd2-f4e90e9f0600 Correlation ID: a3d38fdf-4951-4710-8e11-aac1468c5734 Timestamp: 2024-07-13 15:37:46Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:47.2486115Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e1964c01-710d-4935-b841-34a92dfc0f00 Correlation ID: 6b580ff3-bcf0-41a4-8eb3-c9042fbe7928 Timestamp: 2024-07-13 15:37:47Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-13T15:37:48Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-13T15:37:48Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-13T15:37:48Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:45.1662346Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 5ae89785-50f8-4003-85df-3350243d0c00 Correlation ID: 6e71d95f-e2a5-41ca-a7a4-2ac9b6933ed5 Timestamp: 2024-07-13 15:37:45Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:46.2250922Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 0d5dc8a2-d33f-4ec6-8dd2-f4e90e9f0600 Correlation ID: a3d38fdf-4951-4710-8e11-aac1468c5734 Timestamp: 2024-07-13 15:37:46Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:47.2486115Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e1964c01-710d-4935-b841-34a92dfc0f00 Correlation ID: 6b580ff3-bcf0-41a4-8eb3-c9042fbe7928 Timestamp: 2024-07-13 15:37:47Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:45.1662346Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 5ae89785-50f8-4003-85df-3350243d0c00 Correlation ID: 6e71d95f-e2a5-41ca-a7a4-2ac9b6933ed5 Timestamp: 2024-07-13 15:37:45Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:46.2250922Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 0d5dc8a2-d33f-4ec6-8dd2-f4e90e9f0600 Correlation ID: a3d38fdf-4951-4710-8e11-aac1468c5734 Timestamp: 2024-07-13 15:37:46Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-13T15:37:47.2486115Z, assertion valid from 2024-07-13T15:05:06.0000000Z, expiry time of assertion 2024-07-13T15:10:06.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e1964c01-710d-4935-b841-34a92dfc0f00 Correlation ID: 6b580ff3-bcf0-41a4-8eb3-c9042fbe7928 Timestamp: 2024-07-13 15:37:47Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
>>>>>>> e9ca01e540cdcd64d7d9346fc30e4286e76421e4

time=2024-07-17T15:07:09Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-17T15:07:09Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:07:09Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:07:09Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-17T15:07:09Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-17T15:07:09Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:07:09Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:07:09Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-17T15:07:09Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-17T15:07:09Z level=info msg=Changed directory to .
time=2024-07-17T15:07:09Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-17T15:07:09Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:07:09Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-17T15:07:09Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:07:12Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup0e169e",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup0e169e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:07:12Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.757544
time=2024-07-17T15:07:12Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup0e169e",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup0e169e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:07:12Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:07:12Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:07:12Z level=info msg=Found resource group named: myVMResourceGroup0e169e
time=2024-07-17T15:07:12Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-17T15:09:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup0e169e/providers/Microsoft.Compute/virtualMachines/myVM0e169e",
  "identity": {
    "systemAssignedIdentity": "28d417b6-16eb-45fc-a68e-6c4e82f4b26b",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-A9-A5-4C",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.160.211.179",
  "resourceGroup": "myVMResourceGroup0e169e",
  "zones": ""
}

time=2024-07-17T15:09:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.719579
time=2024-07-17T15:09:27Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup0e169e/providers/Microsoft.Compute/virtualMachines/myVM0e169e",
  "identity": {
    "systemAssignedIdentity": "28d417b6-16eb-45fc-a68e-6c4e82f4b26b",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-A9-A5-4C",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.160.211.179",
  "resourceGroup": "myVMResourceGroup0e169e",
  "zones": ""
}

time=2024-07-17T15:09:27Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-17T15:09:27Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-17T15:11:31Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup0e169e/providers/Microsoft.Compute/virtualMachines/myVM0e169e/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup0e169e",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-17T15:11:31Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-17T15:11:31Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-17T15:11:33Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:11:33Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-17T15:11:33Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-17T15:11:35Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-17T15:11:35Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-17T15:11:35Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-17T15:11:35Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup0e169e
time=2024-07-17T15:11:37Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:11:37Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-17T15:11:37Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:11:37Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:11:37Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:11:37Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-17T15:11:37Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-17T15:11:37Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:11:37Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:11:37Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-17T15:11:37Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:11:37Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:11:37Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:11:37Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:11:37Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-17T15:11:37Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-17T15:11:37Z level=info msg=Changed directory to .
time=2024-07-17T15:11:37Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-17T15:11:38Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:11:38Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-17T15:11:38Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:11:38Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:11:40Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup86fc2e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:11:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.743276
time=2024-07-17T15:11:40Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup86fc2e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:11:40Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:11:40Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:11:40Z level=info msg=Found resource group named: myAKSResourceGroup86fc2e
time=2024-07-17T15:11:40Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-17T15:11:54Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.149.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"5d652080-d422-445d-a49b-a20660def7b1\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e/providers/Microsoft.Network/virtualNetworks/myVNet86fc2e",
    "location": "westeurope",
    "name": "myVNet86fc2e",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup86fc2e",
    "resourceGuid": "3d7e0ee1-19fc-45b8-a9d6-20e7145224d2",
    "subnets": [
      {
        "addressPrefix": "10.149.0.0/22",
        "delegations": [],
        "etag": "W/\"5d652080-d422-445d-a49b-a20660def7b1\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e/providers/Microsoft.Network/virtualNetworks/myVNet86fc2e/subnets/mySN86fc2e",
        "name": "mySN86fc2e",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup86fc2e",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:11:54Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.719621
time=2024-07-17T15:11:54Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.149.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"5d652080-d422-445d-a49b-a20660def7b1\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e/providers/Microsoft.Network/virtualNetworks/myVNet86fc2e",
    "location": "westeurope",
    "name": "myVNet86fc2e",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup86fc2e",
    "resourceGuid": "3d7e0ee1-19fc-45b8-a9d6-20e7145224d2",
    "subnets": [
      {
        "addressPrefix": "10.149.0.0/22",
        "delegations": [],
        "etag": "W/\"5d652080-d422-445d-a49b-a20660def7b1\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e/providers/Microsoft.Network/virtualNetworks/myVNet86fc2e/subnets/mySN86fc2e",
        "name": "mySN86fc2e",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup86fc2e",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:11:54Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-17T15:11:54Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-17T15:12:02Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:12:02Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-17T15:12:02Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-17T15:16:02Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup86fc2e/providers/Microsoft.Network/virtualNetworks/myVNet86fc2e/subnets/mySN86fc2e",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-cxj7rquq.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-cxj7rquq.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup86fc2e/providers/Microsoft.ContainerService/managedClusters/myAKSCluster86fc2e",
  "identity": {
    "delegatedResources": null,
    "principalId": "fa155888-7bbe-4377-acf7-4a7e733721fa",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "c7e0be13-38a2-4b14-9c6a-2e3bdad7cd9e",
      "objectId": "b7eae51e-879b-4697-8863-6598b3cee532",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup86fc2e_myAKSCluster86fc2e_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster86fc2e-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster86fc2e",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup86fc2e_myAKSCluster86fc2e_westeurope/providers/Microsoft.Network/publicIPAddresses/35a02116-6007-4545-ab47-39b8bbfe0f57",
          "resourceGroup": "MC_myAKSResourceGroup86fc2e_myAKSCluster86fc2e_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup86fc2e_myAKSCluster86fc2e_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup86fc2e",
  "resourceUid": "6697df568608b800013d7608",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-17T15:16:02Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-17T15:16:02Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-17T15:16:02Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:16:02Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-17T15:16:02Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-17T15:16:03Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:16:03Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-17T15:16:03Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-17T15:16:06Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-19761413-vmss000000   Ready    agent   94s   v1.28.9

time=2024-07-17T15:16:06Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-17T15:16:06Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-17T15:17:13Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Wed Jul 17 15:16:16 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-17T15:17:13Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-17T15:17:13Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-17T15:17:13Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:17:13Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-17T15:17:13Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-17T15:17:15Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-17T15:17:15Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-17T15:17:15Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-17T15:17:46Z level=info msg=Command output to stdout:
 False
False
False
True

time=2024-07-17T15:17:46Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-17T15:17:46Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-17T15:17:47Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-17T15:17:47Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-17T15:17:47Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-17T15:17:47Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-17T15:17:47Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-17T15:17:47Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-17T15:17:49Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-17T15:17:49Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-17T15:17:49Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-17T15:17:50Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-17T15:17:50Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-17T15:17:50Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-17T15:17:50Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-17T15:17:50Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-17T15:17:50Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-17T15:17:50Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-17T15:17:50Z level=info msg=Finished executing:
 helm repo update

time=2024-07-17T15:17:50Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-17T15:18:19Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Wed Jul 17 15:17:51 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-17T15:18:19Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-17T15:18:19Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-17T15:18:19Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:18:19Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-17T15:18:19Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-17T15:18:19Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:18:19Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-17T15:18:19Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-17T15:18:19Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:18:19Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-17T15:18:19Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-17T15:18:19Z level=info msg=Command output to stdout:
 20.8.40.42

time=2024-07-17T15:18:19Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-17T15:18:19Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-17T15:18:19Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel86fc2e.westeurope.cloudapp.azure.com

time=2024-07-17T15:18:19Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-17T15:18:19Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-17T15:18:19Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup86fc2e
time=2024-07-17T15:18:22Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:18:22Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-17T15:18:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:22Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-17T15:18:22Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-17T15:18:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:22Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:18:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:22Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:18:22Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-17T15:18:22Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-17T15:18:22Z level=info msg=Changed directory to .
time=2024-07-17T15:18:22Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-17T15:18:22Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:18:22Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-17T15:18:22Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:18:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup4983ae",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup4983ae",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:18:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-17T15:18:24Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup4983ae",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup4983ae",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:18:24Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:18:24Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:18:24Z level=info msg=Found resource group named: myAKSResourceGroup4983ae
time=2024-07-17T15:18:24Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-17T15:18:34Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSCluster4983ae in resource group MC_myAKSResourceGroup4983ae_myAKSCluster4983ae_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSCluster4983ae in resource group MC_myAKSResourceGroup4983ae_myAKSCluster4983ae_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
'
time=2024-07-17T15:18:34Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup4983ae
time=2024-07-17T15:18:37Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:18:37Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSCluster4983ae in resource group MC_myAKSResourceGroup4983ae_myAKSCluster4983ae_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSCluster4983ae in resource group MC_myAKSResourceGroup4983ae_myAKSCluster4983ae_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
'
StdErr: ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSCluster4983ae in resource group MC_myAKSResourceGroup4983ae_myAKSCluster4983ae_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSCluster4983ae in resource group MC_myAKSResourceGroup4983ae_myAKSCluster4983ae_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 

time=2024-07-17T15:18:38Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-17T15:18:38Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-17T15:18:38Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-17T15:18:38Z level=info msg=Changed directory to .
time=2024-07-17T15:18:38Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-17T15:18:38Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:18:38Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-17T15:18:38Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-17T15:18:39Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-17T15:18:39Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:18:39Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-17T15:18:40Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:18:40Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:18:40Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-17T15:18:40Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-17T15:18:40Z level=info msg=Changed directory to .
time=2024-07-17T15:18:40Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-17T15:18:40Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:18:40Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-17T15:18:40Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:18:40Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-17T15:18:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroupfc4cf4",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:18:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.745905
time=2024-07-17T15:18:43Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroupfc4cf4",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:18:43Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-17T15:18:43Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:18:43Z level=info msg=Found resource group named: myLEMPResourceGroupfc4cf4
time=2024-07-17T15:18:43Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-17T15:18:56Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.109.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"6b85bf80-3f90-4ee7-89dd-f9ac635b10ee\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/virtualNetworks/myVNetfc4cf4",
    "location": "westeurope",
    "name": "myVNetfc4cf4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "0b3348ae-a490-461c-b714-55ae0ea5a985",
    "subnets": [
      {
        "addressPrefix": "10.109.0.0/24",
        "delegations": [],
        "etag": "W/\"6b85bf80-3f90-4ee7-89dd-f9ac635b10ee\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/virtualNetworks/myVNetfc4cf4/subnets/mySNfc4cf4",
        "name": "mySNfc4cf4",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:18:56Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.721422
time=2024-07-17T15:18:56Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.109.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"6b85bf80-3f90-4ee7-89dd-f9ac635b10ee\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/virtualNetworks/myVNetfc4cf4",
    "location": "westeurope",
    "name": "myVNetfc4cf4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "0b3348ae-a490-461c-b714-55ae0ea5a985",
    "subnets": [
      {
        "addressPrefix": "10.109.0.0/24",
        "delegations": [],
        "etag": "W/\"6b85bf80-3f90-4ee7-89dd-f9ac635b10ee\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/virtualNetworks/myVNetfc4cf4/subnets/mySNfc4cf4",
        "name": "mySNfc4cf4",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:18:56Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-17T15:18:56Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-17T15:19:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelfc4cf4",
      "fqdn": "mydnslabelfc4cf4.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"d9816351-f107-4fc9-ac97-00cccf5e04df\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/publicIPAddresses/myPublicIPfc4cf4",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.211.205.165",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIPfc4cf4",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "5075c073-5a89-4363-8b95-0741b784be4e",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-17T15:19:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751277
time=2024-07-17T15:19:01Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelfc4cf4",
      "fqdn": "mydnslabelfc4cf4.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"d9816351-f107-4fc9-ac97-00cccf5e04df\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/publicIPAddresses/myPublicIPfc4cf4",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.211.205.165",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIPfc4cf4",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "5075c073-5a89-4363-8b95-0741b784be4e",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-17T15:19:01Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-17T15:19:01Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-17T15:19:05Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4",
    "location": "westeurope",
    "name": "myNSGfc4cf4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "61fb6d4b-0fc1-4f2f-b379-89fd354f3d41",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-17T15:19:05Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.565044
time=2024-07-17T15:19:05Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"77ef3133-52d5-4f02-bdc4-4d33deddea74\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4",
    "location": "westeurope",
    "name": "myNSGfc4cf4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "61fb6d4b-0fc1-4f2f-b379-89fd354f3d41",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-17T15:19:05Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-17T15:19:05Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-17T15:19:07Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"c2d65d84-130d-4d50-8948-c7c71dd87b10\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/securityRules/Allow-Accessfc4cf4",
  "name": "Allow-Accessfc4cf4",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupfc4cf4",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-17T15:19:07Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.795505
time=2024-07-17T15:19:07Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"c2d65d84-130d-4d50-8948-c7c71dd87b10\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4/securityRules/Allow-Accessfc4cf4",
  "name": "Allow-Accessfc4cf4",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupfc4cf4",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-17T15:19:07Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-17T15:19:07Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-17T15:19:10Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "vzedgc2quqoennyukwxa3jnjqf.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"c297e720-e6ac-4046-af9b-cab4c3ac7568\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkInterfaces/myVMNicfc4cf4",
    "ipConfigurations": [
      {
        "etag": "W/\"c297e720-e6ac-4046-af9b-cab4c3ac7568\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkInterfaces/myVMNicfc4cf4/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.109.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/publicIPAddresses/myPublicIPfc4cf4",
          "resourceGroup": "myLEMPResourceGroupfc4cf4"
        },
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/virtualNetworks/myVNetfc4cf4/subnets/mySNfc4cf4",
          "resourceGroup": "myLEMPResourceGroupfc4cf4"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNicfc4cf4",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4",
      "resourceGroup": "myLEMPResourceGroupfc4cf4"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "42450bab-1202-4d99-a29d-c1c18311716e",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-17T15:19:10Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.704834
time=2024-07-17T15:19:10Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "vzedgc2quqoennyukwxa3jnjqf.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"c297e720-e6ac-4046-af9b-cab4c3ac7568\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkInterfaces/myVMNicfc4cf4",
    "ipConfigurations": [
      {
        "etag": "W/\"c297e720-e6ac-4046-af9b-cab4c3ac7568\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkInterfaces/myVMNicfc4cf4/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.109.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/publicIPAddresses/myPublicIPfc4cf4",
          "resourceGroup": "myLEMPResourceGroupfc4cf4"
        },
        "resourceGroup": "myLEMPResourceGroupfc4cf4",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/virtualNetworks/myVNetfc4cf4/subnets/mySNfc4cf4",
          "resourceGroup": "myLEMPResourceGroupfc4cf4"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNicfc4cf4",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupfc4cf4/providers/Microsoft.Network/networkSecurityGroups/myNSGfc4cf4",
      "resourceGroup": "myLEMPResourceGroupfc4cf4"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupfc4cf4",
    "resourceGuid": "42450bab-1202-4d99-a29d-c1c18311716e",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-17T15:19:10Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-17T15:19:10Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-17T15:19:10Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:19:10Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-17T15:19:10Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-17T15:19:44Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "e237765c-cfc3-4e7d-a094-639c195b4f7c",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroupfc4cf4/providers/Microsoft.Network/privateDnsZones/mydnslabelfc4cf4.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelfc4cf4.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroupfc4cf4",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-17T15:19:44Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.754865
time=2024-07-17T15:19:44Z level=info msg=Command output to stdout:
 {
  "etag": "e237765c-cfc3-4e7d-a094-639c195b4f7c",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroupfc4cf4/providers/Microsoft.Network/privateDnsZones/mydnslabelfc4cf4.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelfc4cf4.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroupfc4cf4",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-17T15:19:44Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-17T15:19:44Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-17T15:19:47Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroupfc4cf4'...
WARNING: Resource group 'myLEMPResourceGroupfc4cf4' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-17T15:19:47Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroupfc4cf4
time=2024-07-17T15:19:50Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:19:50Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroupfc4cf4'...
WARNING: Resource group 'myLEMPResourceGroupfc4cf4' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroupfc4cf4'...
WARNING: Resource group 'myLEMPResourceGroupfc4cf4' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-17T15:19:51Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-17T15:19:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:19:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:19:51Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-17T15:19:51Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-17T15:19:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:19:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:19:51Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-17T15:19:51Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-17T15:19:51Z level=info msg=Changed directory to .
time=2024-07-17T15:19:51Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-17T15:19:51Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:19:51Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-17T15:19:51Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:19:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup56dfdc",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup56dfdc",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:19:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.772012
time=2024-07-17T15:19:52Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup56dfdc",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup56dfdc",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:19:52Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:19:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:19:52Z level=info msg=Found resource group named: myVMResourceGroup56dfdc
time=2024-07-17T15:19:52Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-17T15:19:55Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_KxJAPSnMKtkuMziMfR1aY3Wx7FoGRH1x' is not valid according to the validation procedure. The tracking id is 'c65e90f5-41a5-4fcc-ac35-c6d95d3813a0'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-17T15:19:55Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup56dfdc
time=2024-07-17T15:19:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:19:56Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_KxJAPSnMKtkuMziMfR1aY3Wx7FoGRH1x' is not valid according to the validation procedure. The tracking id is 'c65e90f5-41a5-4fcc-ac35-c6d95d3813a0'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_KxJAPSnMKtkuMziMfR1aY3Wx7FoGRH1x' is not valid according to the validation procedure. The tracking id is 'c65e90f5-41a5-4fcc-ac35-c6d95d3813a0'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-17T15:19:57Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-17T15:19:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:19:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:19:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:19:57Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:19:57Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:19:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:19:57Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:19:57Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-17T15:19:57Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-17T15:19:57Z level=info msg=Changed directory to .
time=2024-07-17T15:19:57Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-17T15:19:57Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:19:57Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-17T15:19:57Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-17T15:19:58Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupaaeef7",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupaaeef7",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:19:58Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.714571
time=2024-07-17T15:19:58Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupaaeef7",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupaaeef7",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:19:58Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-17T15:19:58Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:19:58Z level=info msg=Found resource group named: myStaticWebAppResourceGroupaaeef7
time=2024-07-17T15:19:58Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-17T15:20:09Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "proud-tree-07c6a880f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupaaeef7/providers/Microsoft.Web/staticSites/myStaticWebAppaaeef7",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebAppaaeef7",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroupaaeef7",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-17T15:20:09Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-17T15:20:09Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-17T15:20:14Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:20:14Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-17T15:20:14Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-17T15:20:15Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-17T15:20:15Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-17T15:20:15Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-17T15:20:15Z level=info msg=Command output to stdout:
 You can now visit your web server at https://proud-tree-07c6a880f.5.azurestaticapps.net

time=2024-07-17T15:20:15Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-17T15:20:15Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-17T15:20:19Z level=info msg=Command output to stdout:
 "proud-tree-07c6a880f.5.azurestaticapps.net"

time=2024-07-17T15:20:19Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-17T15:20:19Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-17T15:20:19Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroupaaeef7
time=2024-07-17T15:20:20Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:20:20Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:20:20Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-17T15:20:20Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-17T15:20:20Z level=info msg=Changed directory to .
time=2024-07-17T15:20:20Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-17T15:20:20Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:20:20Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-17T15:20:20Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-17T15:20:21Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupab0e5a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:20:21Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.761536
time=2024-07-17T15:20:21Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupab0e5a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:20:21Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-17T15:20:21Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:20:21Z level=info msg=Found resource group named: myVMSSResourceGroupab0e5a
time=2024-07-17T15:20:21Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-17T15:20:33Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.87.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"db45fc72-6f4d-4605-98e0-bfb7816d2787\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a",
    "location": "eastus",
    "name": "myVNetab0e5a",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupab0e5a",
    "resourceGuid": "277beaaa-70bc-474a-b530-f7e131203ea6",
    "subnets": [
      {
        "addressPrefix": "10.87.0.0/24",
        "delegations": [],
        "etag": "W/\"db45fc72-6f4d-4605-98e0-bfb7816d2787\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a/subnets/myVMSNab0e5a",
        "name": "myVMSNab0e5a",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:20:33Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729735
time=2024-07-17T15:20:33Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.87.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"db45fc72-6f4d-4605-98e0-bfb7816d2787\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a",
    "location": "eastus",
    "name": "myVNetab0e5a",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupab0e5a",
    "resourceGuid": "277beaaa-70bc-474a-b530-f7e131203ea6",
    "subnets": [
      {
        "addressPrefix": "10.87.0.0/24",
        "delegations": [],
        "etag": "W/\"db45fc72-6f4d-4605-98e0-bfb7816d2787\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a/subnets/myVMSNab0e5a",
        "name": "myVMSNab0e5a",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:20:33Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-17T15:20:33Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-17T15:20:45Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.87.1.0/24",
  "delegations": [],
  "etag": "W/\"9c049c19-20d0-4805-a0d3-e9aa47779086\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a/subnets/myAPPGWSNab0e5a",
  "name": "myAPPGWSNab0e5a",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupab0e5a",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-17T15:20:45Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.730020
time=2024-07-17T15:20:45Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.87.1.0/24",
  "delegations": [],
  "etag": "W/\"9c049c19-20d0-4805-a0d3-e9aa47779086\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a/subnets/myAPPGWSNab0e5a",
  "name": "myAPPGWSNab0e5a",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupab0e5a",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-17T15:20:45Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-17T15:20:45Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-17T15:20:49Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"2667e062-4310-4db6-9598-d320dcd8e9ea\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPab0e5a",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "51.8.195.67",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPab0e5a",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupab0e5a",
    "resourceGuid": "4442c4c4-648e-43a4-9425-1a72529fa308",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-17T15:20:49Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746494
time=2024-07-17T15:20:49Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"2667e062-4310-4db6-9598-d320dcd8e9ea\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPab0e5a",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "51.8.195.67",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPab0e5a",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupab0e5a",
    "resourceGuid": "4442c4c4-648e-43a4-9425-1a72529fa308",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-17T15:20:49Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-17T15:20:49Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-17T15:27:53Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPab0e5a",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          }
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a/subnets/myAPPGWSNab0e5a",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          }
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "80d1b817-7893-420a-8ec9-9bb007123ef1",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-17T15:27:53Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731832
time=2024-07-17T15:27:53Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPab0e5a",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          }
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/virtualNetworks/myVNetab0e5a/subnets/myAPPGWSNab0e5a",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          }
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupab0e5a"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"0c763b1e-f0ac-44d6-b277-90e9797d7c04\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupab0e5a/providers/Microsoft.Network/applicationGateways/myAPPGWab0e5a/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupab0e5a"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupab0e5a",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "80d1b817-7893-420a-8ec9-9bb007123ef1",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-17T15:27:53Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-17T15:27:53Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-17T15:28:29Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_GPsE9CSTvlC95GtbAD7nw1bFagQmlZF8' is not valid according to the validation procedure. The tracking id is '62d1baf4-d058-4208-85b3-e53e079aead8'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-17T15:28:29Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupab0e5a
time=2024-07-17T15:28:30Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:28:30Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_GPsE9CSTvlC95GtbAD7nw1bFagQmlZF8' is not valid according to the validation procedure. The tracking id is '62d1baf4-d058-4208-85b3-e53e079aead8'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_GPsE9CSTvlC95GtbAD7nw1bFagQmlZF8' is not valid according to the validation procedure. The tracking id is '62d1baf4-d058-4208-85b3-e53e079aead8'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-17T15:28:31Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-17T15:28:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:28:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:28:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:28:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:28:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:28:31Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:28:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:28:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:28:31Z level=warning msg=The node before the codeblock `export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:28:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:28:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:28:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:28:31Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:28:31Z level=debug msg=Found 26 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-17T15:28:31Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-17T15:28:31Z level=info msg=Changed directory to .
time=2024-07-17T15:28:31Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-17T15:28:33Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup5b1d66",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup5b1d66",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:28:33Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747425
time=2024-07-17T15:28:33Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup5b1d66",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup5b1d66",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:28:33Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-17T15:28:33Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:28:33Z level=info msg=Found resource group named: myWordPressAKSResourceGroup5b1d66
time=2024-07-17T15:28:33Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-17T15:28:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.173.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8192b3b3-5638-493c-b6a6-327599647bb3\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup5b1d66/providers/Microsoft.Network/virtualNetworks/myVNet5b1d66",
    "location": "westeurope",
    "name": "myVNet5b1d66",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup5b1d66",
    "resourceGuid": "b1920e68-ef3e-485b-861e-3c7900ff0873",
    "subnets": [
      {
        "addressPrefix": "10.173.0.0/22",
        "delegations": [],
        "etag": "W/\"8192b3b3-5638-493c-b6a6-327599647bb3\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup5b1d66/providers/Microsoft.Network/virtualNetworks/myVNet5b1d66/subnets/mySN5b1d66",
        "name": "mySN5b1d66",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup5b1d66",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:28:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731633
time=2024-07-17T15:28:47Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.173.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8192b3b3-5638-493c-b6a6-327599647bb3\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup5b1d66/providers/Microsoft.Network/virtualNetworks/myVNet5b1d66",
    "location": "westeurope",
    "name": "myVNet5b1d66",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup5b1d66",
    "resourceGuid": "b1920e68-ef3e-485b-861e-3c7900ff0873",
    "subnets": [
      {
        "addressPrefix": "10.173.0.0/22",
        "delegations": [],
        "etag": "W/\"8192b3b3-5638-493c-b6a6-327599647bb3\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup5b1d66/providers/Microsoft.Network/virtualNetworks/myVNet5b1d66/subnets/mySN5b1d66",
        "name": "mySN5b1d66",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup5b1d66",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:28:47Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-17T15:28:47Z level=info msg=Executing command asynchronously:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-17T15:28:47Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin5b1d66 password is: b5ktGI0XbyRH0yqXWEiQGYPgx8D+iG+UzE2MOybrvB0=

time=2024-07-17T15:28:47Z level=info msg=Finished executing:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-17T15:28:47Z level=info msg=Executing command asynchronously:
 export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-17T15:28:50Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup5b1d66'...
WARNING: Resource group 'myWordPressAKSResourceGroup5b1d66' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-17T15:28:50Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup5b1d66
time=2024-07-17T15:28:53Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:28:53Z level=error msg=Error testing scenario: failed to execute code block 1 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup5b1d66'...
WARNING: Resource group 'myWordPressAKSResourceGroup5b1d66' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup5b1d66'...
WARNING: Resource group 'myWordPressAKSResourceGroup5b1d66' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-17T15:28:54Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-17T15:28:54Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-17T15:28:54Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-17T15:28:54Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-17T15:28:54Z level=info msg=Changed directory to .
time=2024-07-17T15:28:54Z level=info msg=Executing command asynchronously:
 
time=2024-07-17T15:28:54Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:28:54Z level=info msg=Finished executing:
 
time=2024-07-17T15:28:54Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-17T15:28:54Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:28:54Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-17T15:28:54Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-17T15:28:54Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-17T15:28:54Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-17T15:28:54Z level=info msg=Changed directory to .
time=2024-07-17T15:28:54Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-17T15:28:54Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:28:54Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-17T15:28:54Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-17T15:29:13Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:29:13Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-17T15:29:13Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:29:13Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-17T15:29:15Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-17T15:29:15Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-17T15:29:15Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-17T15:29:17Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-17T15:29:17Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-17T15:29:17Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:29:17Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-17T15:29:20Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:29:20Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-17T15:29:20Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:29:20Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-17T15:29:20Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-17T15:29:20Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-17T15:29:20Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-17T15:29:46Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-17T15:29:46Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-17T15:29:46Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:29:46Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-17T15:29:47Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:29:47.4212405Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 702ecc48-6947-4980-8f49-e10cb7a90300 Correlation ID: bab29bd2-3af6-47c8-9888-1e2e69263789 Timestamp: 2024-07-17 15:29:47Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-17T15:29:47Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:29:47Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:29:47.4212405Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 702ecc48-6947-4980-8f49-e10cb7a90300 Correlation ID: bab29bd2-3af6-47c8-9888-1e2e69263789 Timestamp: 2024-07-17 15:29:47Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:29:47.4212405Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 702ecc48-6947-4980-8f49-e10cb7a90300 Correlation ID: bab29bd2-3af6-47c8-9888-1e2e69263789 Timestamp: 2024-07-17 15:29:47Z
Interactive authentication is needed. Please run:
az login

time=2024-07-17T15:29:49Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-17T15:29:49Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-17T15:29:49Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:49Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:49Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:49Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:49Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:49Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-17T15:29:49Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-17T15:29:49Z level=info msg=Changed directory to .
time=2024-07-17T15:29:49Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-17T15:29:49Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-ngxfyhre" does not exist
'
time=2024-07-17T15:29:49Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:29:49Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-ngxfyhre" does not exist
'
StdErr: error: context "aks-primary-cnpg-ngxfyhre" does not exist

time=2024-07-17T15:29:50Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-17T15:29:50Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:29:50Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:29:50Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-17T15:29:50Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-17T15:29:50Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:29:50Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:50Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:29:50Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-17T15:29:50Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-17T15:29:50Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-17T15:29:50Z level=info msg=Changed directory to .
time=2024-07-17T15:29:50Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-17T15:29:50Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:29:50Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-17T15:29:50Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:29:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupd9b0ca",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupd9b0ca",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:29:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750683
time=2024-07-17T15:29:52Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupd9b0ca",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupd9b0ca",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:29:52Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:29:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:29:52Z level=info msg=Found resource group named: myAKSResourceGroupd9b0ca
time=2024-07-17T15:29:52Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-17T15:34:06Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "eTag": "ae3d71e6-2178-4b65-b8de-7a5836091170",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-16neyqe1.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "684a3dca-3bfb-4dd4-a3d8-921f322202ae",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-16neyqe1.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupd9b0ca/providers/Microsoft.ContainerService/managedClusters/myAKSClusterd9b0ca",
  "identity": {
    "delegatedResources": null,
    "principalId": "e67416e3-bcf7-4427-b5af-4453b69d365e",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "194359e8-613c-43bf-b5a6-765aa47d6e7f",
      "objectId": "fc91faf3-d06d-49bf-976c-1a0964b9ef72",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupd9b0ca_myAKSClusterd9b0ca_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClusterd9b0ca-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC23LoCHXBeVVvPNIkGeFF7u6BTX5n91EGzxnXQFNediapAIgoVY+PRA++DYD+jk4Skp6M2ZN1J76bOVTLr8AYzRdxim5ZDr+pTHdn+c3eY/MPDPLxJ5BAgISFp9ZnvZz6r/d9wa872YDbFtVzEJXMeBFazxla5aDZ2RSlzdTThjbCy/+d+QtTt0GIlk7vJ7nQWUwOQKplctGxinh6040dyel/gDQM82FJhtLg185PwFRc4E2+ixEgSM7rNoBTP2M92HtmN4f0gwurh/BZAChursttuKreWlrgwOpBfePC+4PAs34Jf5f0bG6UT3aSqqWIAzmOT9cpkZdhyBXZdGVU/"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClusterd9b0ca",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupd9b0ca_myAKSClusterd9b0ca_westeurope/providers/Microsoft.Network/publicIPAddresses/fc4757e7-9be8-4c30-9d8e-117c5878f030",
          "resourceGroup": "MC_myAKSResourceGroupd9b0ca_myAKSClusterd9b0ca_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupd9b0ca_myAKSClusterd9b0ca_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupd9b0ca",
  "resourceUid": "6697e37ae3223900014ff825",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-17T15:34:06Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-17T15:34:06Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-17T15:34:07Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:34:07Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-17T15:34:07Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-17T15:34:08Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-30059091-vmss000000   Ready    agent   101s   v1.28.9

time=2024-07-17T15:34:08Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-17T15:34:08Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-17T15:34:08Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-17T15:34:08Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupd9b0ca
time=2024-07-17T15:34:11Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:34:11Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-17T15:34:12Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-17T15:34:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:12Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-17T15:34:12Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-17T15:34:12Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-17T15:34:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:12Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-17T15:34:12Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-17T15:34:12Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-17T15:34:12Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-17T15:34:12Z level=info msg=Changed directory to .
time=2024-07-17T15:34:12Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-17T15:34:12Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:34:12Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-17T15:34:12Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:34:13Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroupf99919",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroupf99919",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:34:13Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.765893
time=2024-07-17T15:34:13Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroupf99919",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroupf99919",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:34:13Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-17T15:34:13Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:34:13Z level=info msg=Found resource group named: myResourceGroupf99919
time=2024-07-17T15:34:13Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-17T15:34:26Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSClusterf99919 in resource group MC_myResourceGroupf99919_myAKSClusterf99919_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSClusterf99919 in resource group MC_myResourceGroupf99919_myAKSClusterf99919_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-17T15:34:26Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroupf99919
time=2024-07-17T15:34:27Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:34:27Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSClusterf99919 in resource group MC_myResourceGroupf99919_myAKSClusterf99919_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSClusterf99919 in resource group MC_myResourceGroupf99919_myAKSClusterf99919_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSClusterf99919 in resource group MC_myResourceGroupf99919_myAKSClusterf99919_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSClusterf99919 in resource group MC_myResourceGroupf99919_myAKSClusterf99919_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-17T15:34:28Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-17T15:34:28Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-17T15:34:28Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-17T15:34:28Z level=info msg=Changed directory to .
time=2024-07-17T15:34:28Z level=info msg=Executing command asynchronously:
 
time=2024-07-17T15:34:28Z level=info msg=Command output to stdout:
 
time=2024-07-17T15:34:28Z level=info msg=Finished executing:
 
time=2024-07-17T15:34:28Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-17T15:34:28Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:34:28Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-17T15:34:28Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-17T15:34:28Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-17T15:34:28Z level=info msg=Changed directory to .
time=2024-07-17T15:34:28Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-17T15:34:30Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:34:30Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-17T15:34:30Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-17T15:34:30Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-17T15:34:30Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-17T15:34:30Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-17T15:34:30Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-17T15:34:44Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"f79825eb-bd79-45e8-abb2-c97027df6272\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "3377f7d9-a20a-43cc-aedb-e834972f5078",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:34:44Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.711868
time=2024-07-17T15:34:44Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"f79825eb-bd79-45e8-abb2-c97027df6272\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "3377f7d9-a20a-43cc-aedb-e834972f5078",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-17T15:34:44Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-17T15:34:44Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-17T15:34:56Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"11b25616-766f-4674-9371-d97cc75a65bd\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-17T15:34:56Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728538
time=2024-07-17T15:34:56Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"11b25616-766f-4674-9371-d97cc75a65bd\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-17T15:34:56Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-17T15:34:56Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-17T15:35:08Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"3d14a4a5-f64c-4969-8524-65b2ada24b56\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-17T15:35:08Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729330
time=2024-07-17T15:35:08Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"3d14a4a5-f64c-4969-8524-65b2ada24b56\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-17T15:35:08Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-17T15:35:08Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-17T15:35:34Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-17T15:35:10.983970+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableExtendedGroups": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-17T15:35:11.108988+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-17T15:35:11.108988+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-17T15:35:11.108988+00:00",
    "key2": "2024-07-17T15:35:11.108988+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-17T15:35:34Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-17T15:35:34Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-17T15:35:39Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:36.7116746Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 48baa54b-b8cb-49d9-93c9-213c14311c00 Correlation ID: 896a1735-c621-485d-b823-941cbd159eb3 Timestamp: 2024-07-17 15:35:36Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:37.7808004Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 62e3158f-2ae9-4027-ba0b-9618c6191900 Correlation ID: d21c46a6-59b3-4dd7-a8e5-a7e3ef239c7d Timestamp: 2024-07-17 15:35:37Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:38.8008020Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 49029eac-489c-4bf8-8ede-a19b55690b00 Correlation ID: 9dab3c94-f6e7-4d7d-bd81-43e4e6a5dc7e Timestamp: 2024-07-17 15:35:38Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-17T15:35:39Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-17T15:35:42Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-17T15:35:42Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:36.7116746Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 48baa54b-b8cb-49d9-93c9-213c14311c00 Correlation ID: 896a1735-c621-485d-b823-941cbd159eb3 Timestamp: 2024-07-17 15:35:36Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:37.7808004Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 62e3158f-2ae9-4027-ba0b-9618c6191900 Correlation ID: d21c46a6-59b3-4dd7-a8e5-a7e3ef239c7d Timestamp: 2024-07-17 15:35:37Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:38.8008020Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 49029eac-489c-4bf8-8ede-a19b55690b00 Correlation ID: 9dab3c94-f6e7-4d7d-bd81-43e4e6a5dc7e Timestamp: 2024-07-17 15:35:38Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:36.7116746Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 48baa54b-b8cb-49d9-93c9-213c14311c00 Correlation ID: 896a1735-c621-485d-b823-941cbd159eb3 Timestamp: 2024-07-17 15:35:36Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:37.7808004Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 62e3158f-2ae9-4027-ba0b-9618c6191900 Correlation ID: d21c46a6-59b3-4dd7-a8e5-a7e3ef239c7d Timestamp: 2024-07-17 15:35:37Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-17T15:35:38.8008020Z, assertion valid from 2024-07-17T15:05:59.0000000Z, expiry time of assertion 2024-07-17T15:10:59.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 49029eac-489c-4bf8-8ede-a19b55690b00 Correlation ID: 9dab3c94-f6e7-4d7d-bd81-43e4e6a5dc7e Timestamp: 2024-07-17 15:35:38Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

time=2024-07-18T15:06:58Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-18T15:06:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:06:58Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:06:58Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-18T15:06:58Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-18T15:06:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:06:58Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:06:58Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-18T15:06:58Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-18T15:06:58Z level=info msg=Changed directory to .
time=2024-07-18T15:06:58Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-18T15:06:58Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:06:58Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-18T15:06:58Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:07:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb78f46",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupb78f46",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:07:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.759013
time=2024-07-18T15:07:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb78f46",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupb78f46",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:07:01Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:07:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:07:01Z level=info msg=Found resource group named: myVMResourceGroupb78f46
time=2024-07-18T15:07:01Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-18T15:08:45Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb78f46/providers/Microsoft.Compute/virtualMachines/myVMb78f46",
  "identity": {
    "systemAssignedIdentity": "66f5d46e-f60b-4821-8f2b-8633eef1d953",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-22-71-B8",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "137.116.206.153",
  "resourceGroup": "myVMResourceGroupb78f46",
  "zones": ""
}

time=2024-07-18T15:08:45Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.719115
time=2024-07-18T15:08:45Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb78f46/providers/Microsoft.Compute/virtualMachines/myVMb78f46",
  "identity": {
    "systemAssignedIdentity": "66f5d46e-f60b-4821-8f2b-8633eef1d953",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-22-71-B8",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "137.116.206.153",
  "resourceGroup": "myVMResourceGroupb78f46",
  "zones": ""
}

time=2024-07-18T15:08:45Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-18T15:08:45Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-18T15:10:50Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb78f46/providers/Microsoft.Compute/virtualMachines/myVMb78f46/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroupb78f46",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-18T15:10:50Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-18T15:10:50Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-18T15:10:52Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:10:52Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-18T15:10:52Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-18T15:10:53Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-18T15:10:53Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-18T15:10:53Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-18T15:10:53Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupb78f46
time=2024-07-18T15:10:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:10:56Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-18T15:10:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:10:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:10:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:10:56Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-18T15:10:56Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-18T15:10:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:10:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:10:56Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-18T15:10:56Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:10:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:10:56Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:10:56Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:10:56Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-18T15:10:56Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-18T15:10:56Z level=info msg=Changed directory to .
time=2024-07-18T15:10:56Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-18T15:10:56Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:10:56Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-18T15:10:56Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:10:56Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:10:58Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup41f0c5",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:10:58Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-18T15:10:58Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup41f0c5",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:10:58Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:10:58Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:10:58Z level=info msg=Found resource group named: myAKSResourceGroup41f0c5
time=2024-07-18T15:10:58Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-18T15:11:13Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.139.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"b44dc4f2-14b6-4c24-a4b1-70ab226a767c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5/providers/Microsoft.Network/virtualNetworks/myVNet41f0c5",
    "location": "westeurope",
    "name": "myVNet41f0c5",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup41f0c5",
    "resourceGuid": "0ec5dbef-00c4-4228-aaaf-4da9948e6a74",
    "subnets": [
      {
        "addressPrefix": "10.139.0.0/22",
        "delegations": [],
        "etag": "W/\"b44dc4f2-14b6-4c24-a4b1-70ab226a767c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5/providers/Microsoft.Network/virtualNetworks/myVNet41f0c5/subnets/mySN41f0c5",
        "name": "mySN41f0c5",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup41f0c5",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:11:13Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.720939
time=2024-07-18T15:11:13Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.139.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"b44dc4f2-14b6-4c24-a4b1-70ab226a767c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5/providers/Microsoft.Network/virtualNetworks/myVNet41f0c5",
    "location": "westeurope",
    "name": "myVNet41f0c5",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup41f0c5",
    "resourceGuid": "0ec5dbef-00c4-4228-aaaf-4da9948e6a74",
    "subnets": [
      {
        "addressPrefix": "10.139.0.0/22",
        "delegations": [],
        "etag": "W/\"b44dc4f2-14b6-4c24-a4b1-70ab226a767c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5/providers/Microsoft.Network/virtualNetworks/myVNet41f0c5/subnets/mySN41f0c5",
        "name": "mySN41f0c5",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup41f0c5",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:11:13Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-18T15:11:13Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-18T15:11:21Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:11:21Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-18T15:11:21Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-18T15:16:18Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup41f0c5/providers/Microsoft.Network/virtualNetworks/myVNet41f0c5/subnets/mySN41f0c5",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-ky7yxjpj.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-ky7yxjpj.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup41f0c5/providers/Microsoft.ContainerService/managedClusters/myAKSCluster41f0c5",
  "identity": {
    "delegatedResources": null,
    "principalId": "88d36b5c-3980-4da1-b215-08adc1723eef",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "6d95cf45-d6ae-488d-ba2e-eb5b08db2f22",
      "objectId": "38e87e03-a26e-46f5-b1b4-467115c51ac5",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup41f0c5_myAKSCluster41f0c5_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster41f0c5-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster41f0c5",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup41f0c5_myAKSCluster41f0c5_westeurope/providers/Microsoft.Network/publicIPAddresses/4e1341a9-8517-42f9-8db4-070f02853ca0",
          "resourceGroup": "MC_myAKSResourceGroup41f0c5_myAKSCluster41f0c5_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup41f0c5_myAKSCluster41f0c5_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup41f0c5",
  "resourceUid": "669930acb5332e0001ec4746",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-18T15:16:18Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-18T15:16:18Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-18T15:16:18Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:16:18Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-18T15:16:18Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-18T15:16:19Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:16:19Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-18T15:16:19Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-18T15:16:20Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-15568602-vmss000000   Ready    agent   118s   v1.28.10

time=2024-07-18T15:16:20Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-18T15:16:20Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-18T15:17:33Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Thu Jul 18 15:16:31 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-18T15:17:33Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-18T15:17:33Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-18T15:17:33Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:17:33Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-18T15:17:33Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-18T15:17:34Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-18T15:17:34Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-18T15:17:34Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-18T15:18:06Z level=info msg=Command output to stdout:
 False
False
False
True

time=2024-07-18T15:18:06Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-18T15:18:06Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-18T15:18:06Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-18T15:18:06Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-18T15:18:06Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-18T15:18:06Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-18T15:18:06Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-18T15:18:06Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-18T15:18:09Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-18T15:18:09Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-18T15:18:09Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-18T15:18:09Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-18T15:18:09Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-18T15:18:09Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-18T15:18:10Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-18T15:18:10Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-18T15:18:10Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-18T15:18:10Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-18T15:18:10Z level=info msg=Finished executing:
 helm repo update

time=2024-07-18T15:18:10Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-18T15:18:38Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Thu Jul 18 15:18:11 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-18T15:18:38Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-18T15:18:38Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-18T15:18:38Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:18:38Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-18T15:18:38Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-18T15:18:38Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:18:38Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-18T15:18:38Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-18T15:18:38Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:18:38Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-18T15:18:38Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-18T15:18:38Z level=info msg=Command output to stdout:
 20.54.221.77

time=2024-07-18T15:18:38Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-18T15:18:38Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-18T15:18:38Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel41f0c5.westeurope.cloudapp.azure.com

time=2024-07-18T15:18:38Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-18T15:18:38Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-18T15:18:38Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup41f0c5
time=2024-07-18T15:18:41Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:18:41Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-18T15:18:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:41Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-18T15:18:41Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-18T15:18:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:41Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:18:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:41Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:18:41Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-18T15:18:41Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-18T15:18:41Z level=info msg=Changed directory to .
time=2024-07-18T15:18:41Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-18T15:18:41Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:18:41Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-18T15:18:41Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:18:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupb7dae2",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupb7dae2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:18:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.752165
time=2024-07-18T15:18:43Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupb7dae2",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupb7dae2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:18:43Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:18:43Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:18:43Z level=info msg=Found resource group named: myAKSResourceGroupb7dae2
time=2024-07-18T15:18:43Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-18T15:18:53Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSClusterb7dae2 in resource group MC_myAKSResourceGroupb7dae2_myAKSClusterb7dae2_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSClusterb7dae2 in resource group MC_myAKSResourceGroupb7dae2_myAKSClusterb7dae2_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
'
time=2024-07-18T15:18:53Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupb7dae2
time=2024-07-18T15:18:55Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:18:55Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSClusterb7dae2 in resource group MC_myAKSResourceGroupb7dae2_myAKSClusterb7dae2_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSClusterb7dae2 in resource group MC_myAKSResourceGroupb7dae2_myAKSClusterb7dae2_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
'
StdErr: ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSClusterb7dae2 in resource group MC_myAKSResourceGroupb7dae2_myAKSClusterb7dae2_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSClusterb7dae2 in resource group MC_myAKSResourceGroupb7dae2_myAKSClusterb7dae2_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 

time=2024-07-18T15:18:57Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-18T15:18:57Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-18T15:18:57Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-18T15:18:57Z level=info msg=Changed directory to .
time=2024-07-18T15:18:57Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-18T15:18:57Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:18:57Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-18T15:18:57Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-18T15:18:57Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-18T15:18:57Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:18:57Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-18T15:18:59Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:18:59Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:18:59Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-18T15:18:59Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-18T15:18:59Z level=info msg=Changed directory to .
time=2024-07-18T15:18:59Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-18T15:18:59Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:18:59Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-18T15:18:59Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:18:59Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-18T15:19:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroupd0ffb5",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:19:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747348
time=2024-07-18T15:19:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroupd0ffb5",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:19:01Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-18T15:19:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:19:01Z level=info msg=Found resource group named: myLEMPResourceGroupd0ffb5
time=2024-07-18T15:19:01Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-18T15:19:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.206.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7310560d-b216-4bf6-a96b-b5d921036026\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/virtualNetworks/myVNetd0ffb5",
    "location": "westeurope",
    "name": "myVNetd0ffb5",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "e98a0a5d-3a1d-4fb8-9e58-63ab6bac6f9a",
    "subnets": [
      {
        "addressPrefix": "10.206.0.0/24",
        "delegations": [],
        "etag": "W/\"7310560d-b216-4bf6-a96b-b5d921036026\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/virtualNetworks/myVNetd0ffb5/subnets/mySNd0ffb5",
        "name": "mySNd0ffb5",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:19:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731459
time=2024-07-18T15:19:15Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.206.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7310560d-b216-4bf6-a96b-b5d921036026\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/virtualNetworks/myVNetd0ffb5",
    "location": "westeurope",
    "name": "myVNetd0ffb5",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "e98a0a5d-3a1d-4fb8-9e58-63ab6bac6f9a",
    "subnets": [
      {
        "addressPrefix": "10.206.0.0/24",
        "delegations": [],
        "etag": "W/\"7310560d-b216-4bf6-a96b-b5d921036026\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/virtualNetworks/myVNetd0ffb5/subnets/mySNd0ffb5",
        "name": "mySNd0ffb5",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:19:15Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-18T15:19:15Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-18T15:19:20Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabeld0ffb5",
      "fqdn": "mydnslabeld0ffb5.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"e824e9ea-a015-432f-af76-16b4d9cfded1\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/publicIPAddresses/myPublicIPd0ffb5",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "20.61.36.132",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIPd0ffb5",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "995ca726-edb5-437c-a79f-464d7e28a54a",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-18T15:19:20Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.754904
time=2024-07-18T15:19:20Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabeld0ffb5",
      "fqdn": "mydnslabeld0ffb5.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"e824e9ea-a015-432f-af76-16b4d9cfded1\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/publicIPAddresses/myPublicIPd0ffb5",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "20.61.36.132",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIPd0ffb5",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "995ca726-edb5-437c-a79f-464d7e28a54a",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-18T15:19:20Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-18T15:19:20Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-18T15:19:23Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5",
    "location": "westeurope",
    "name": "myNSGd0ffb5",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "ff154a1b-bfbe-43e0-900e-3dfe6a06d657",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-18T15:19:23Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.568490
time=2024-07-18T15:19:23Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"2efb8f51-5908-47a5-884a-7157f835ba77\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5",
    "location": "westeurope",
    "name": "myNSGd0ffb5",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "ff154a1b-bfbe-43e0-900e-3dfe6a06d657",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-18T15:19:23Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-18T15:19:23Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-18T15:19:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"4cc7cd2a-8b5a-4bc3-81d4-39e8f97ddedf\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/securityRules/Allow-Accessd0ffb5",
  "name": "Allow-Accessd0ffb5",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupd0ffb5",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-18T15:19:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.801292
time=2024-07-18T15:19:26Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"4cc7cd2a-8b5a-4bc3-81d4-39e8f97ddedf\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5/securityRules/Allow-Accessd0ffb5",
  "name": "Allow-Accessd0ffb5",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupd0ffb5",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-18T15:19:26Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-18T15:19:26Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-18T15:19:29Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "lufiv0i3hk2e5hsymovwxldptc.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"d5eba24e-fb93-4ef7-a133-79795579f3c5\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkInterfaces/myVMNicd0ffb5",
    "ipConfigurations": [
      {
        "etag": "W/\"d5eba24e-fb93-4ef7-a133-79795579f3c5\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkInterfaces/myVMNicd0ffb5/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.206.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/publicIPAddresses/myPublicIPd0ffb5",
          "resourceGroup": "myLEMPResourceGroupd0ffb5"
        },
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/virtualNetworks/myVNetd0ffb5/subnets/mySNd0ffb5",
          "resourceGroup": "myLEMPResourceGroupd0ffb5"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNicd0ffb5",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5",
      "resourceGroup": "myLEMPResourceGroupd0ffb5"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "9c6d5324-c6eb-4bc9-86a8-af3c35794303",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-18T15:19:29Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.702659
time=2024-07-18T15:19:29Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "lufiv0i3hk2e5hsymovwxldptc.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"d5eba24e-fb93-4ef7-a133-79795579f3c5\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkInterfaces/myVMNicd0ffb5",
    "ipConfigurations": [
      {
        "etag": "W/\"d5eba24e-fb93-4ef7-a133-79795579f3c5\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkInterfaces/myVMNicd0ffb5/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.206.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/publicIPAddresses/myPublicIPd0ffb5",
          "resourceGroup": "myLEMPResourceGroupd0ffb5"
        },
        "resourceGroup": "myLEMPResourceGroupd0ffb5",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/virtualNetworks/myVNetd0ffb5/subnets/mySNd0ffb5",
          "resourceGroup": "myLEMPResourceGroupd0ffb5"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNicd0ffb5",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroupd0ffb5/providers/Microsoft.Network/networkSecurityGroups/myNSGd0ffb5",
      "resourceGroup": "myLEMPResourceGroupd0ffb5"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupd0ffb5",
    "resourceGuid": "9c6d5324-c6eb-4bc9-86a8-af3c35794303",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-18T15:19:29Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-18T15:19:29Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-18T15:19:29Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:19:29Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-18T15:19:29Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-18T15:20:02Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "a5912081-b771-4616-ba18-52ac9c897756",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroupd0ffb5/providers/Microsoft.Network/privateDnsZones/mydnslabeld0ffb5.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabeld0ffb5.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroupd0ffb5",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-18T15:20:02Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750683
time=2024-07-18T15:20:02Z level=info msg=Command output to stdout:
 {
  "etag": "a5912081-b771-4616-ba18-52ac9c897756",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroupd0ffb5/providers/Microsoft.Network/privateDnsZones/mydnslabeld0ffb5.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabeld0ffb5.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroupd0ffb5",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-18T15:20:02Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-18T15:20:02Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-18T15:20:04Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroupd0ffb5'...
WARNING: Resource group 'myLEMPResourceGroupd0ffb5' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-18T15:20:04Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroupd0ffb5
time=2024-07-18T15:20:07Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:20:07Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroupd0ffb5'...
WARNING: Resource group 'myLEMPResourceGroupd0ffb5' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroupd0ffb5'...
WARNING: Resource group 'myLEMPResourceGroupd0ffb5' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-18T15:20:08Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-18T15:20:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:08Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-18T15:20:08Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-18T15:20:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:08Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-18T15:20:08Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-18T15:20:08Z level=info msg=Changed directory to .
time=2024-07-18T15:20:08Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-18T15:20:08Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:20:08Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-18T15:20:08Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:20:08Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupeb1162",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupeb1162",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:20:08Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.770550
time=2024-07-18T15:20:08Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupeb1162",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupeb1162",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:20:08Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:20:08Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:20:08Z level=info msg=Found resource group named: myVMResourceGroupeb1162
time=2024-07-18T15:20:08Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-18T15:20:12Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_X3h73xSNg5eIVX6n72RCaij54zUK4cW0' is not valid according to the validation procedure. The tracking id is '377ddac2-aa7d-48ae-9d9e-be09191511c1'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-18T15:20:12Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupeb1162
time=2024-07-18T15:20:13Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:20:13Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_X3h73xSNg5eIVX6n72RCaij54zUK4cW0' is not valid according to the validation procedure. The tracking id is '377ddac2-aa7d-48ae-9d9e-be09191511c1'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_X3h73xSNg5eIVX6n72RCaij54zUK4cW0' is not valid according to the validation procedure. The tracking id is '377ddac2-aa7d-48ae-9d9e-be09191511c1'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-18T15:20:14Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-18T15:20:14Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:14Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:14Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:14Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:20:14Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:20:14Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:14Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:20:14Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-18T15:20:14Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-18T15:20:14Z level=info msg=Changed directory to .
time=2024-07-18T15:20:14Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-18T15:20:14Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:20:14Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-18T15:20:14Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-18T15:20:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupad3d0b",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupad3d0b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:20:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712991
time=2024-07-18T15:20:15Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupad3d0b",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupad3d0b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:20:15Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-18T15:20:15Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:20:15Z level=info msg=Found resource group named: myStaticWebAppResourceGroupad3d0b
time=2024-07-18T15:20:15Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-18T15:20:19Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "gray-meadow-01b9c440f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupad3d0b/providers/Microsoft.Web/staticSites/myStaticWebAppad3d0b",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebAppad3d0b",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroupad3d0b",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-18T15:20:19Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-18T15:20:19Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-18T15:20:20Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:20:20Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-18T15:20:20Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-18T15:20:21Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-18T15:20:21Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-18T15:20:21Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-18T15:20:21Z level=info msg=Command output to stdout:
 You can now visit your web server at https://gray-meadow-01b9c440f.5.azurestaticapps.net

time=2024-07-18T15:20:21Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-18T15:20:21Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-18T15:20:24Z level=info msg=Command output to stdout:
 "gray-meadow-01b9c440f.5.azurestaticapps.net"

time=2024-07-18T15:20:24Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-18T15:20:24Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-18T15:20:24Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroupad3d0b
time=2024-07-18T15:20:25Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:20:25Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:20:25Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-18T15:20:25Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-18T15:20:25Z level=info msg=Changed directory to .
time=2024-07-18T15:20:25Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-18T15:20:25Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:20:25Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-18T15:20:25Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-18T15:20:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupcd5dcc",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:20:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.760099
time=2024-07-18T15:20:26Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupcd5dcc",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:20:26Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-18T15:20:26Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:20:26Z level=info msg=Found resource group named: myVMSSResourceGroupcd5dcc
time=2024-07-18T15:20:26Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-18T15:20:38Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.164.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"3bb789ae-d296-4238-a408-9df1e92fc054\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc",
    "location": "eastus",
    "name": "myVNetcd5dcc",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupcd5dcc",
    "resourceGuid": "a2e147d9-b94f-4c5a-b495-3825fdfd7228",
    "subnets": [
      {
        "addressPrefix": "10.164.0.0/24",
        "delegations": [],
        "etag": "W/\"3bb789ae-d296-4238-a408-9df1e92fc054\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc/subnets/myVMSNcd5dcc",
        "name": "myVMSNcd5dcc",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:20:38Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.719541
time=2024-07-18T15:20:38Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.164.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"3bb789ae-d296-4238-a408-9df1e92fc054\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc",
    "location": "eastus",
    "name": "myVNetcd5dcc",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupcd5dcc",
    "resourceGuid": "a2e147d9-b94f-4c5a-b495-3825fdfd7228",
    "subnets": [
      {
        "addressPrefix": "10.164.0.0/24",
        "delegations": [],
        "etag": "W/\"3bb789ae-d296-4238-a408-9df1e92fc054\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc/subnets/myVMSNcd5dcc",
        "name": "myVMSNcd5dcc",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:20:38Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-18T15:20:38Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-18T15:20:49Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.164.1.0/24",
  "delegations": [],
  "etag": "W/\"a0f07ee1-c55a-43a9-8008-30c0b063b9a7\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc/subnets/myAPPGWSNcd5dcc",
  "name": "myAPPGWSNcd5dcc",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupcd5dcc",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-18T15:20:49Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.730274
time=2024-07-18T15:20:49Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.164.1.0/24",
  "delegations": [],
  "etag": "W/\"a0f07ee1-c55a-43a9-8008-30c0b063b9a7\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc/subnets/myAPPGWSNcd5dcc",
  "name": "myAPPGWSNcd5dcc",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupcd5dcc",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-18T15:20:49Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-18T15:20:49Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-18T15:20:53Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"52e7b69e-6671-4829-ad87-48d2c1f02cc0\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPcd5dcc",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.151.9.59",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPcd5dcc",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupcd5dcc",
    "resourceGuid": "18f867cf-a798-46e6-85ab-0d3361a1284e",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-18T15:20:53Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.749324
time=2024-07-18T15:20:53Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"52e7b69e-6671-4829-ad87-48d2c1f02cc0\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPcd5dcc",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.151.9.59",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPcd5dcc",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupcd5dcc",
    "resourceGuid": "18f867cf-a798-46e6-85ab-0d3361a1284e",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-18T15:20:53Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-18T15:20:53Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-18T15:26:57Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPcd5dcc",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          }
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc/subnets/myAPPGWSNcd5dcc",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          }
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "cbf27135-fe4d-42f8-932d-4849ddb5d19c",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-18T15:26:57Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731615
time=2024-07-18T15:26:57Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPcd5dcc",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          }
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/virtualNetworks/myVNetcd5dcc/subnets/myAPPGWSNcd5dcc",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          }
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupcd5dcc"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"a17c5f40-42aa-4257-ad38-8402926d3d0f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupcd5dcc/providers/Microsoft.Network/applicationGateways/myAPPGWcd5dcc/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupcd5dcc"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupcd5dcc",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "cbf27135-fe4d-42f8-932d-4849ddb5d19c",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-18T15:26:57Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-18T15:26:57Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-18T15:27:33Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_1vtemLGS0WmNlCxcdLGcPxUCMUtJozw2' is not valid according to the validation procedure. The tracking id is '585fc23b-68f0-4e11-97de-69f05770d893'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-18T15:27:33Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupcd5dcc
time=2024-07-18T15:27:34Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:27:34Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_1vtemLGS0WmNlCxcdLGcPxUCMUtJozw2' is not valid according to the validation procedure. The tracking id is '585fc23b-68f0-4e11-97de-69f05770d893'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_1vtemLGS0WmNlCxcdLGcPxUCMUtJozw2' is not valid according to the validation procedure. The tracking id is '585fc23b-68f0-4e11-97de-69f05770d893'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-18T15:27:35Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-18T15:27:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:27:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:27:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:27:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:27:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:27:35Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:27:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:27:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:27:35Z level=warning msg=The node before the codeblock `export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:27:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:27:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:27:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:27:35Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:27:35Z level=debug msg=Found 26 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-18T15:27:35Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-18T15:27:35Z level=info msg=Changed directory to .
time=2024-07-18T15:27:35Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-18T15:27:38Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup1ed20b",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup1ed20b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:27:38Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746012
time=2024-07-18T15:27:38Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup1ed20b",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup1ed20b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:27:38Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-18T15:27:38Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:27:38Z level=info msg=Found resource group named: myWordPressAKSResourceGroup1ed20b
time=2024-07-18T15:27:38Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-18T15:27:51Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.42.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"e402ece1-a354-4427-b8cc-f5d5a7d1b932\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup1ed20b/providers/Microsoft.Network/virtualNetworks/myVNet1ed20b",
    "location": "westeurope",
    "name": "myVNet1ed20b",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup1ed20b",
    "resourceGuid": "451c8c06-a701-45d2-a801-e462be6fad5d",
    "subnets": [
      {
        "addressPrefix": "10.42.0.0/22",
        "delegations": [],
        "etag": "W/\"e402ece1-a354-4427-b8cc-f5d5a7d1b932\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup1ed20b/providers/Microsoft.Network/virtualNetworks/myVNet1ed20b/subnets/mySN1ed20b",
        "name": "mySN1ed20b",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup1ed20b",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:27:51Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.732482
time=2024-07-18T15:27:51Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.42.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"e402ece1-a354-4427-b8cc-f5d5a7d1b932\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup1ed20b/providers/Microsoft.Network/virtualNetworks/myVNet1ed20b",
    "location": "westeurope",
    "name": "myVNet1ed20b",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup1ed20b",
    "resourceGuid": "451c8c06-a701-45d2-a801-e462be6fad5d",
    "subnets": [
      {
        "addressPrefix": "10.42.0.0/22",
        "delegations": [],
        "etag": "W/\"e402ece1-a354-4427-b8cc-f5d5a7d1b932\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup1ed20b/providers/Microsoft.Network/virtualNetworks/myVNet1ed20b/subnets/mySN1ed20b",
        "name": "mySN1ed20b",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup1ed20b",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:27:51Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-18T15:27:51Z level=info msg=Executing command asynchronously:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-18T15:27:51Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin1ed20b password is: unQKLOMmItWQ6M4dDWZRyCnV045Ym6WCeTh3qEmu0GM=

time=2024-07-18T15:27:51Z level=info msg=Finished executing:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-18T15:27:51Z level=info msg=Executing command asynchronously:
 export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-18T15:27:53Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup1ed20b'...
WARNING: Resource group 'myWordPressAKSResourceGroup1ed20b' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-18T15:27:53Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup1ed20b
time=2024-07-18T15:27:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:27:56Z level=error msg=Error testing scenario: failed to execute code block 1 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup1ed20b'...
WARNING: Resource group 'myWordPressAKSResourceGroup1ed20b' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup1ed20b'...
WARNING: Resource group 'myWordPressAKSResourceGroup1ed20b' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-18T15:27:57Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-18T15:27:57Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-18T15:27:57Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-18T15:27:57Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-18T15:27:57Z level=info msg=Changed directory to .
time=2024-07-18T15:27:57Z level=info msg=Executing command asynchronously:
 
time=2024-07-18T15:27:57Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:27:57Z level=info msg=Finished executing:
 
time=2024-07-18T15:27:57Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-18T15:27:57Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:27:57Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-18T15:27:57Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-18T15:27:57Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-18T15:27:57Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-18T15:27:57Z level=info msg=Changed directory to .
time=2024-07-18T15:27:57Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-18T15:27:58Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:27:58Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-18T15:27:58Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-18T15:28:14Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:28:14Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-18T15:28:14Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:28:14Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-18T15:28:17Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-18T15:28:17Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-18T15:28:17Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-18T15:28:19Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-18T15:28:19Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-18T15:28:19Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:28:19Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-18T15:28:22Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:28:22Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-18T15:28:22Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:28:22Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-18T15:28:22Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-18T15:28:22Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-18T15:28:22Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-18T15:28:51Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-18T15:28:51Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-18T15:28:51Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:28:51Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-18T15:28:52Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:28:51.9861292Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: a81c8a24-b6aa-4a1d-b710-3b8caa091000 Correlation ID: 43855e57-3f44-42d5-af79-76f314f9f0df Timestamp: 2024-07-18 15:28:51Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-18T15:28:52Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:28:52Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:28:51.9861292Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: a81c8a24-b6aa-4a1d-b710-3b8caa091000 Correlation ID: 43855e57-3f44-42d5-af79-76f314f9f0df Timestamp: 2024-07-18 15:28:51Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:28:51.9861292Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: a81c8a24-b6aa-4a1d-b710-3b8caa091000 Correlation ID: 43855e57-3f44-42d5-af79-76f314f9f0df Timestamp: 2024-07-18 15:28:51Z
Interactive authentication is needed. Please run:
az login

time=2024-07-18T15:28:53Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-18T15:28:53Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-18T15:28:53Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:53Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:53Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:53Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:53Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:53Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-18T15:28:53Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-18T15:28:53Z level=info msg=Changed directory to .
time=2024-07-18T15:28:53Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-18T15:28:54Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-8dgwe8hf" does not exist
'
time=2024-07-18T15:28:54Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:28:54Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-8dgwe8hf" does not exist
'
StdErr: error: context "aks-primary-cnpg-8dgwe8hf" does not exist

time=2024-07-18T15:28:55Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-18T15:28:55Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:28:55Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:28:55Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-18T15:28:55Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-18T15:28:55Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:28:55Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:55Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:28:55Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-18T15:28:55Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-18T15:28:55Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-18T15:28:55Z level=info msg=Changed directory to .
time=2024-07-18T15:28:55Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-18T15:28:55Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:28:55Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-18T15:28:55Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:28:57Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup9152ac",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup9152ac",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:28:57Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.744757
time=2024-07-18T15:28:57Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup9152ac",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup9152ac",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:28:57Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:28:57Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:28:57Z level=info msg=Found resource group named: myAKSResourceGroup9152ac
time=2024-07-18T15:28:57Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-18T15:33:14Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "eTag": "62637e47-6484-4f17-bb8b-b60abd0f389e",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-u6013fiz.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "c0fa3175-8d77-4ddb-93d9-85bb43799ea5",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-u6013fiz.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup9152ac/providers/Microsoft.ContainerService/managedClusters/myAKSCluster9152ac",
  "identity": {
    "delegatedResources": null,
    "principalId": "c41ae030-b19d-4845-97e6-3c49e04bca76",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "92a7ec2b-cc4e-42f3-9531-bc092caa5fc3",
      "objectId": "014dc3ed-23bb-4832-b79a-9e7007047dc3",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup9152ac_myAKSCluster9152ac_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster9152ac-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCb8CuvGglKclpHhYs4pN+668zNVcMBL3GNCK52whVhPQX/w8wxQQi35tEfhtUsfORmOhJ/IroN5i12ya64I2ysDtvBj6IL3JKRqA9+0FpCwWCg1xQmacOGxuty0Xh/kuDHGZfcTExUZgXbKQv6gBL1YJMwHW5LG+B59E4IDJ6eVcPJZJ9+Q080jgoqzmohQ8b+CmbjU7sXCkHoxj8mjJ1dVYpiSfG82N54gf+TEhma8M9wnh1lGVktoUC6gyuHTxy0wgZrJAs3MlL7yGAKXuyrKG0wwt0aSnrshn+ph95NwonZheydtCHYOvFOMVyCfaAIR5kImLOczgExeTANZJgT"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster9152ac",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup9152ac_myAKSCluster9152ac_westeurope/providers/Microsoft.Network/publicIPAddresses/1ae039c4-901f-48bb-b1da-08e3fd12aa79",
          "resourceGroup": "MC_myAKSResourceGroup9152ac_myAKSCluster9152ac_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup9152ac_myAKSCluster9152ac_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup9152ac",
  "resourceUid": "669934c3eb270f000122b073",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-18T15:33:14Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-18T15:33:14Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-18T15:33:16Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:33:16Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-18T15:33:16Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-18T15:33:16Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-17408603-vmss000000   Ready    agent   2m    v1.28.10

time=2024-07-18T15:33:16Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-18T15:33:16Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-18T15:33:16Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-18T15:33:16Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup9152ac
time=2024-07-18T15:33:19Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:33:19Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-18T15:33:21Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-18T15:33:21Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:21Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-18T15:33:21Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-18T15:33:21Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-18T15:33:21Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:21Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-18T15:33:21Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-18T15:33:21Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-18T15:33:21Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-18T15:33:21Z level=info msg=Changed directory to .
time=2024-07-18T15:33:21Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-18T15:33:21Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:33:21Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-18T15:33:21Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:33:21Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup076a60",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup076a60",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:33:21Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.786542
time=2024-07-18T15:33:21Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup076a60",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup076a60",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:33:21Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-18T15:33:21Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:33:21Z level=info msg=Found resource group named: myResourceGroup076a60
time=2024-07-18T15:33:21Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-18T15:33:30Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster076a60 in resource group MC_myResourceGroup076a60_myAKSCluster076a60_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster076a60 in resource group MC_myResourceGroup076a60_myAKSCluster076a60_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-18T15:33:30Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup076a60
time=2024-07-18T15:33:31Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:33:31Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster076a60 in resource group MC_myResourceGroup076a60_myAKSCluster076a60_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster076a60 in resource group MC_myResourceGroup076a60_myAKSCluster076a60_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster076a60 in resource group MC_myResourceGroup076a60_myAKSCluster076a60_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster076a60 in resource group MC_myResourceGroup076a60_myAKSCluster076a60_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-18T15:33:33Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-18T15:33:33Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-18T15:33:33Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-18T15:33:33Z level=info msg=Changed directory to .
time=2024-07-18T15:33:33Z level=info msg=Executing command asynchronously:
 
time=2024-07-18T15:33:33Z level=info msg=Command output to stdout:
 
time=2024-07-18T15:33:33Z level=info msg=Finished executing:
 
time=2024-07-18T15:33:33Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-18T15:33:33Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:33:33Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-18T15:33:33Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-18T15:33:33Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-18T15:33:33Z level=info msg=Changed directory to .
time=2024-07-18T15:33:33Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-18T15:33:34Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:33:34Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-18T15:33:34Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-18T15:33:34Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-18T15:33:34Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-18T15:33:34Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-18T15:33:34Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-18T15:33:48Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"1135ffec-3521-49f5-a49e-66e2cdddee20\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "f264864c-ba88-47b2-878d-833166d5d5a3",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:33:48Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.713574
time=2024-07-18T15:33:48Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"1135ffec-3521-49f5-a49e-66e2cdddee20\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "f264864c-ba88-47b2-878d-833166d5d5a3",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-18T15:33:48Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-18T15:33:48Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-18T15:33:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"ba7ff725-dc59-46c0-a85a-8195c293306d\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-18T15:33:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729408
time=2024-07-18T15:33:50Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"ba7ff725-dc59-46c0-a85a-8195c293306d\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-18T15:33:50Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-18T15:33:50Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-18T15:34:02Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"0370900c-de95-40e1-a878-a0453fc25ea1\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-18T15:34:02Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728469
time=2024-07-18T15:34:02Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"0370900c-de95-40e1-a878-a0453fc25ea1\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-18T15:34:02Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-18T15:34:02Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-18T15:34:27Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-18T15:34:05.066000+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableExtendedGroups": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-18T15:34:05.191003+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-18T15:34:05.191003+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-18T15:34:05.175378+00:00",
    "key2": "2024-07-18T15:34:05.175378+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-18T15:34:27Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-18T15:34:27Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-18T15:34:33Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:29.6856520Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: ead4afa4-a6f2-44a1-a786-242232714300 Correlation ID: e2d125fd-b921-41b3-a802-c229840dcb53 Timestamp: 2024-07-18 15:34:29Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:30.8973208Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: eff1e799-442b-4ca8-9ef1-523fa0621300 Correlation ID: ec1e2ab5-8dfc-42e8-8c4c-b1c0644f997e Timestamp: 2024-07-18 15:34:30Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:32.0415229Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 5e2e83df-ddab-4d96-8c8a-6dccb6ee1400 Correlation ID: fb0b7d90-8f5b-4dda-a173-487d7e649505 Timestamp: 2024-07-18 15:34:32Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-18T15:34:33Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-18T15:34:35Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-18T15:34:35Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:29.6856520Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: ead4afa4-a6f2-44a1-a786-242232714300 Correlation ID: e2d125fd-b921-41b3-a802-c229840dcb53 Timestamp: 2024-07-18 15:34:29Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:30.8973208Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: eff1e799-442b-4ca8-9ef1-523fa0621300 Correlation ID: ec1e2ab5-8dfc-42e8-8c4c-b1c0644f997e Timestamp: 2024-07-18 15:34:30Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:32.0415229Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 5e2e83df-ddab-4d96-8c8a-6dccb6ee1400 Correlation ID: fb0b7d90-8f5b-4dda-a173-487d7e649505 Timestamp: 2024-07-18 15:34:32Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:29.6856520Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: ead4afa4-a6f2-44a1-a786-242232714300 Correlation ID: e2d125fd-b921-41b3-a802-c229840dcb53 Timestamp: 2024-07-18 15:34:29Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:30.8973208Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: eff1e799-442b-4ca8-9ef1-523fa0621300 Correlation ID: ec1e2ab5-8dfc-42e8-8c4c-b1c0644f997e Timestamp: 2024-07-18 15:34:30Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-18T15:34:32.0415229Z, assertion valid from 2024-07-18T15:05:48.0000000Z, expiry time of assertion 2024-07-18T15:10:48.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 5e2e83df-ddab-4d96-8c8a-6dccb6ee1400 Correlation ID: fb0b7d90-8f5b-4dda-a173-487d7e649505 Timestamp: 2024-07-18 15:34:32Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

time=2024-07-19T15:05:51Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-19T15:05:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:05:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:05:51Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-19T15:05:51Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-19T15:05:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:05:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:05:51Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-19T15:05:51Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-19T15:05:51Z level=info msg=Changed directory to .
time=2024-07-19T15:05:51Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-19T15:05:51Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:05:51Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-19T15:05:51Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:05:55Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupa8381d",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupa8381d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:05:55Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.761950
time=2024-07-19T15:05:55Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupa8381d",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupa8381d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:05:55Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:05:55Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:05:55Z level=info msg=Found resource group named: myVMResourceGroupa8381d
time=2024-07-19T15:05:55Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-19T15:07:09Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupa8381d/providers/Microsoft.Compute/virtualMachines/myVMa8381d",
  "identity": {
    "systemAssignedIdentity": "a9f5388f-f7c5-42c2-a9f7-f6d94d9707ed",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-22-48-81-90-D5",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "51.136.23.202",
  "resourceGroup": "myVMResourceGroupa8381d",
  "zones": ""
}

time=2024-07-19T15:07:09Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.718971
time=2024-07-19T15:07:09Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupa8381d/providers/Microsoft.Compute/virtualMachines/myVMa8381d",
  "identity": {
    "systemAssignedIdentity": "a9f5388f-f7c5-42c2-a9f7-f6d94d9707ed",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-22-48-81-90-D5",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "51.136.23.202",
  "resourceGroup": "myVMResourceGroupa8381d",
  "zones": ""
}

time=2024-07-19T15:07:09Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-19T15:07:09Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-19T15:09:45Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupa8381d/providers/Microsoft.Compute/virtualMachines/myVMa8381d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroupa8381d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-19T15:09:45Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-19T15:09:45Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-19T15:09:47Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:09:47Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-19T15:09:47Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-19T15:09:49Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-19T15:09:49Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-19T15:09:49Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-19T15:09:49Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupa8381d
time=2024-07-19T15:09:52Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:09:52Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-19T15:09:52Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:09:52Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:09:52Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:09:52Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-19T15:09:52Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-19T15:09:52Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:09:52Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:09:52Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-19T15:09:52Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:09:52Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:09:52Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:09:52Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:09:52Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-19T15:09:52Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-19T15:09:52Z level=info msg=Changed directory to .
time=2024-07-19T15:09:52Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-19T15:09:53Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:09:53Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-19T15:09:53Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:09:53Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:09:55Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupaa7e3f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:09:55Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.752165
time=2024-07-19T15:09:55Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupaa7e3f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:09:55Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:09:55Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:09:55Z level=info msg=Found resource group named: myAKSResourceGroupaa7e3f
time=2024-07-19T15:09:55Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-19T15:10:09Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.38.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"e4cebf23-05c2-42ff-92c4-3e41a6abf6fc\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f/providers/Microsoft.Network/virtualNetworks/myVNetaa7e3f",
    "location": "westeurope",
    "name": "myVNetaa7e3f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupaa7e3f",
    "resourceGuid": "26d45fc5-b6fd-4dfa-b7d9-f1039b8a95e2",
    "subnets": [
      {
        "addressPrefix": "10.38.0.0/22",
        "delegations": [],
        "etag": "W/\"e4cebf23-05c2-42ff-92c4-3e41a6abf6fc\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f/providers/Microsoft.Network/virtualNetworks/myVNetaa7e3f/subnets/mySNaa7e3f",
        "name": "mySNaa7e3f",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupaa7e3f",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:10:09Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.711276
time=2024-07-19T15:10:09Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.38.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"e4cebf23-05c2-42ff-92c4-3e41a6abf6fc\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f/providers/Microsoft.Network/virtualNetworks/myVNetaa7e3f",
    "location": "westeurope",
    "name": "myVNetaa7e3f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupaa7e3f",
    "resourceGuid": "26d45fc5-b6fd-4dfa-b7d9-f1039b8a95e2",
    "subnets": [
      {
        "addressPrefix": "10.38.0.0/22",
        "delegations": [],
        "etag": "W/\"e4cebf23-05c2-42ff-92c4-3e41a6abf6fc\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f/providers/Microsoft.Network/virtualNetworks/myVNetaa7e3f/subnets/mySNaa7e3f",
        "name": "mySNaa7e3f",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupaa7e3f",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:10:09Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-19T15:10:09Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-19T15:10:17Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:10:17Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-19T15:10:17Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-19T15:14:18Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupaa7e3f/providers/Microsoft.Network/virtualNetworks/myVNetaa7e3f/subnets/mySNaa7e3f",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-xjqqyiqk.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-xjqqyiqk.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupaa7e3f/providers/Microsoft.ContainerService/managedClusters/myAKSClusteraa7e3f",
  "identity": {
    "delegatedResources": null,
    "principalId": "12abe346-096f-4747-b3b9-a619c86aaf5e",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "d3d87420-ad87-4ab3-823c-cbee6ade97e8",
      "objectId": "e2ce0d51-1e45-4e63-b3ed-952bc700803d",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupaa7e3f_myAKSClusteraa7e3f_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClusteraa7e3f-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClusteraa7e3f",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupaa7e3f_myAKSClusteraa7e3f_westeurope/providers/Microsoft.Network/publicIPAddresses/0819e535-b133-4804-8039-9f38002e3ea8",
          "resourceGroup": "MC_myAKSResourceGroupaa7e3f_myAKSClusteraa7e3f_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupaa7e3f_myAKSClusteraa7e3f_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupaa7e3f",
  "resourceUid": "669a81f062af6200016ffa2b",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-19T15:14:18Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-19T15:14:18Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-19T15:14:18Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:14:18Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-19T15:14:18Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-19T15:14:19Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:14:19Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-19T15:14:19Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-19T15:14:20Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-26539169-vmss000000   Ready    agent   44s   v1.28.10

time=2024-07-19T15:14:20Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-19T15:14:20Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-19T15:15:28Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Fri Jul 19 15:14:33 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-19T15:15:28Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-19T15:15:28Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-19T15:15:28Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:15:28Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-19T15:15:28Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-19T15:15:29Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-19T15:15:29Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-19T15:15:29Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-19T15:16:01Z level=info msg=Command output to stdout:
 False
False
False
True

time=2024-07-19T15:16:01Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-19T15:16:01Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-19T15:16:01Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-19T15:16:01Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-19T15:16:01Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-19T15:16:02Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-19T15:16:02Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-19T15:16:02Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-19T15:16:04Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-19T15:16:04Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-19T15:16:04Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-19T15:16:05Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-19T15:16:05Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-19T15:16:05Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-19T15:16:05Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-19T15:16:05Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-19T15:16:05Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-19T15:16:05Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-19T15:16:05Z level=info msg=Finished executing:
 helm repo update

time=2024-07-19T15:16:05Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-19T15:16:34Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Fri Jul 19 15:16:06 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-19T15:16:34Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-19T15:16:34Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-19T15:16:34Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:16:34Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-19T15:16:34Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-19T15:16:34Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:16:34Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-19T15:16:34Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-19T15:16:34Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:16:34Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-19T15:16:34Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-19T15:16:35Z level=info msg=Command output to stdout:
 108.142.58.36

time=2024-07-19T15:16:35Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-19T15:16:35Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-19T15:16:35Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabelaa7e3f.westeurope.cloudapp.azure.com

time=2024-07-19T15:16:35Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-19T15:16:35Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-19T15:16:35Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupaa7e3f
time=2024-07-19T15:16:38Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:16:38Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-19T15:16:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:38Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-19T15:16:38Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-19T15:16:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:38Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:16:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:38Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:16:38Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-19T15:16:38Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-19T15:16:38Z level=info msg=Changed directory to .
time=2024-07-19T15:16:38Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-19T15:16:38Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:16:38Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-19T15:16:38Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:16:41Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup9807d7",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup9807d7",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:16:41Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-19T15:16:41Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup9807d7",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup9807d7",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:16:41Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:16:41Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:16:41Z level=info msg=Found resource group named: myAKSResourceGroup9807d7
time=2024-07-19T15:16:41Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-19T15:16:51Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSCluster9807d7 in resource group MC_myAKSResourceGroup9807d7_myAKSCluster9807d7_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSCluster9807d7 in resource group MC_myAKSResourceGroup9807d7_myAKSCluster9807d7_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
'
time=2024-07-19T15:16:51Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup9807d7
time=2024-07-19T15:16:54Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:16:54Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSCluster9807d7 in resource group MC_myAKSResourceGroup9807d7_myAKSCluster9807d7_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSCluster9807d7 in resource group MC_myAKSResourceGroup9807d7_myAKSCluster9807d7_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
'
StdErr: ERROR: (QuotaExceeded) Preflight validation check for resource(s) for container service myAKSCluster9807d7 in resource group MC_myAKSResourceGroup9807d7_myAKSCluster9807d7_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 
Code: QuotaExceeded
Message: Preflight validation check for resource(s) for container service myAKSCluster9807d7 in resource group MC_myAKSResourceGroup9807d7_myAKSCluster9807d7_westeurope failed. Message: Operation could not be completed as it results in exceeding approved Total Regional Cores quota. Additional details - Deployment Model: Resource Manager, Location: westeurope, Current Limit: 100, Current Usage: 99, Additional Required: 2, (Minimum) New Limit Required: 101. Setup Alerts when Quota reaches threshold. Learn more at https://aka.ms/quotamonitoringalerting . Submit a request for Quota increase at https://aka.ms/ProdportalCRP/#blade/Microsoft_Azure_Capacity/UsageAndQuota.ReactView/Parameters/%7B%22subscriptionId%22:%22325e7c34-99fb-4190-aa87-1df746c67705%22,%22command%22:%22openQuotaApprovalBlade%22,%22quotas%22:[%7B%22location%22:%22westeurope%22,%22providerId%22:%22Microsoft.Compute%22,%22resourceName%22:%22cores%22,%22quotaRequest%22:%7B%22properties%22:%7B%22limit%22:101,%22unit%22:%22Count%22,%22name%22:%7B%22value%22:%22cores%22%7D%7D%7D%7D]%7D by specifying parameters listed in the â€˜Detailsâ€™ section for deployment to succeed. Please read more about quota limits at https://docs.microsoft.com/en-us/azure/azure-supportability/regional-quota-requests. Details: 

time=2024-07-19T15:16:56Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-19T15:16:56Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-19T15:16:56Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-19T15:16:56Z level=info msg=Changed directory to .
time=2024-07-19T15:16:56Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-19T15:16:56Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:16:56Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-19T15:16:56Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-19T15:16:56Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-19T15:16:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:16:56Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-19T15:16:57Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:16:57Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:16:57Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-19T15:16:57Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-19T15:16:57Z level=info msg=Changed directory to .
time=2024-07-19T15:16:57Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-19T15:16:58Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:16:58Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-19T15:16:58Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:16:58Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-19T15:17:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup13b70c",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:17:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.748791
time=2024-07-19T15:17:00Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup13b70c",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:17:00Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-19T15:17:00Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:17:00Z level=info msg=Found resource group named: myLEMPResourceGroup13b70c
time=2024-07-19T15:17:00Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-19T15:17:14Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.40.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"b651dbb9-ef2c-460f-90eb-e830229dc100\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/virtualNetworks/myVNet13b70c",
    "location": "westeurope",
    "name": "myVNet13b70c",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "f6c2575c-95e3-486c-98bc-415c1fecd906",
    "subnets": [
      {
        "addressPrefix": "10.40.0.0/24",
        "delegations": [],
        "etag": "W/\"b651dbb9-ef2c-460f-90eb-e830229dc100\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/virtualNetworks/myVNet13b70c/subnets/mySN13b70c",
        "name": "mySN13b70c",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:17:14Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731916
time=2024-07-19T15:17:14Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.40.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"b651dbb9-ef2c-460f-90eb-e830229dc100\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/virtualNetworks/myVNet13b70c",
    "location": "westeurope",
    "name": "myVNet13b70c",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "f6c2575c-95e3-486c-98bc-415c1fecd906",
    "subnets": [
      {
        "addressPrefix": "10.40.0.0/24",
        "delegations": [],
        "etag": "W/\"b651dbb9-ef2c-460f-90eb-e830229dc100\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/virtualNetworks/myVNet13b70c/subnets/mySN13b70c",
        "name": "mySN13b70c",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:17:14Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-19T15:17:14Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-19T15:17:21Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel13b70c",
      "fqdn": "mydnslabel13b70c.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"54bb15fa-18c4-43d9-aa59-593f25c2d2d9\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/publicIPAddresses/myPublicIP13b70c",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "108.142.60.223",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP13b70c",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "5da49fbd-e398-4836-aeb6-5403c8f2f10a",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-19T15:17:21Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.753756
time=2024-07-19T15:17:21Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel13b70c",
      "fqdn": "mydnslabel13b70c.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"54bb15fa-18c4-43d9-aa59-593f25c2d2d9\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/publicIPAddresses/myPublicIP13b70c",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "108.142.60.223",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP13b70c",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "5da49fbd-e398-4836-aeb6-5403c8f2f10a",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-19T15:17:21Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-19T15:17:21Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-19T15:17:25Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c",
    "location": "westeurope",
    "name": "myNSG13b70c",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "9049d770-2534-4e78-a632-eca88ee60534",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-19T15:17:25Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.570370
time=2024-07-19T15:17:25Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"2597930d-69d2-4108-8663-5f8094477e43\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c",
    "location": "westeurope",
    "name": "myNSG13b70c",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "9049d770-2534-4e78-a632-eca88ee60534",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-19T15:17:25Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-19T15:17:25Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-19T15:17:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"717227be-8dc6-4752-9687-5f7fb76bda24\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/securityRules/Allow-Access13b70c",
  "name": "Allow-Access13b70c",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup13b70c",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-19T15:17:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.796084
time=2024-07-19T15:17:28Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"717227be-8dc6-4752-9687-5f7fb76bda24\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c/securityRules/Allow-Access13b70c",
  "name": "Allow-Access13b70c",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup13b70c",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-19T15:17:28Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-19T15:17:28Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-19T15:17:33Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "lrl2f3xdsvwergf2ifob51gzag.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"1151a8ed-de9d-4828-8bc1-c35120b7867d\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkInterfaces/myVMNic13b70c",
    "ipConfigurations": [
      {
        "etag": "W/\"1151a8ed-de9d-4828-8bc1-c35120b7867d\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkInterfaces/myVMNic13b70c/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.40.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/publicIPAddresses/myPublicIP13b70c",
          "resourceGroup": "myLEMPResourceGroup13b70c"
        },
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/virtualNetworks/myVNet13b70c/subnets/mySN13b70c",
          "resourceGroup": "myLEMPResourceGroup13b70c"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic13b70c",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c",
      "resourceGroup": "myLEMPResourceGroup13b70c"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "0bd7878e-d23b-43b7-854a-19253d168975",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-19T15:17:33Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.705427
time=2024-07-19T15:17:33Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "lrl2f3xdsvwergf2ifob51gzag.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"1151a8ed-de9d-4828-8bc1-c35120b7867d\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkInterfaces/myVMNic13b70c",
    "ipConfigurations": [
      {
        "etag": "W/\"1151a8ed-de9d-4828-8bc1-c35120b7867d\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkInterfaces/myVMNic13b70c/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.40.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/publicIPAddresses/myPublicIP13b70c",
          "resourceGroup": "myLEMPResourceGroup13b70c"
        },
        "resourceGroup": "myLEMPResourceGroup13b70c",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/virtualNetworks/myVNet13b70c/subnets/mySN13b70c",
          "resourceGroup": "myLEMPResourceGroup13b70c"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic13b70c",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup13b70c/providers/Microsoft.Network/networkSecurityGroups/myNSG13b70c",
      "resourceGroup": "myLEMPResourceGroup13b70c"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup13b70c",
    "resourceGuid": "0bd7878e-d23b-43b7-854a-19253d168975",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-19T15:17:33Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-19T15:17:33Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-19T15:17:33Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:17:33Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-19T15:17:33Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-19T15:18:08Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "c3f43e4d-34fc-43c0-b8bc-dfd92fce0634",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup13b70c/providers/Microsoft.Network/privateDnsZones/mydnslabel13b70c.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel13b70c.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup13b70c",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-19T15:18:08Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751878
time=2024-07-19T15:18:08Z level=info msg=Command output to stdout:
 {
  "etag": "c3f43e4d-34fc-43c0-b8bc-dfd92fce0634",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup13b70c/providers/Microsoft.Network/privateDnsZones/mydnslabel13b70c.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel13b70c.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup13b70c",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-19T15:18:08Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-19T15:18:08Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-19T15:18:13Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup13b70c'...
WARNING: Resource group 'myLEMPResourceGroup13b70c' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-19T15:18:13Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup13b70c
time=2024-07-19T15:18:16Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:18:16Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup13b70c'...
WARNING: Resource group 'myLEMPResourceGroup13b70c' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup13b70c'...
WARNING: Resource group 'myLEMPResourceGroup13b70c' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-19T15:18:17Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-19T15:18:17Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:17Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:17Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-19T15:18:17Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-19T15:18:17Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:17Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:17Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-19T15:18:17Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-19T15:18:17Z level=info msg=Changed directory to .
time=2024-07-19T15:18:17Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-19T15:18:17Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:18:17Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-19T15:18:17Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:18:18Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup4779b7",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup4779b7",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:18:18Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764702
time=2024-07-19T15:18:18Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup4779b7",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup4779b7",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:18:18Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:18:18Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:18:18Z level=info msg=Found resource group named: myVMResourceGroup4779b7
time=2024-07-19T15:18:18Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-19T15:18:22Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_o5DYhDQ22ZPofc854Fo05yrA8yz8mhdy' is not valid according to the validation procedure. The tracking id is '50c5b494-ea5c-4443-9355-371cdce60976'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-19T15:18:22Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup4779b7
time=2024-07-19T15:18:23Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:18:23Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_o5DYhDQ22ZPofc854Fo05yrA8yz8mhdy' is not valid according to the validation procedure. The tracking id is '50c5b494-ea5c-4443-9355-371cdce60976'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_o5DYhDQ22ZPofc854Fo05yrA8yz8mhdy' is not valid according to the validation procedure. The tracking id is '50c5b494-ea5c-4443-9355-371cdce60976'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-19T15:18:25Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-19T15:18:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:25Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:18:25Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:18:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:25Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:18:25Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-19T15:18:25Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-19T15:18:25Z level=info msg=Changed directory to .
time=2024-07-19T15:18:25Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-19T15:18:25Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:18:25Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-19T15:18:25Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-19T15:18:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup3603be",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup3603be",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:18:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.714571
time=2024-07-19T15:18:26Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup3603be",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup3603be",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:18:26Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-19T15:18:26Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:18:26Z level=info msg=Found resource group named: myStaticWebAppResourceGroup3603be
time=2024-07-19T15:18:26Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-19T15:18:30Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "agreeable-sand-078d0c10f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup3603be/providers/Microsoft.Web/staticSites/myStaticWebApp3603be",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebApp3603be",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroup3603be",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-19T15:18:30Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-19T15:18:30Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-19T15:18:31Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:18:31Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-19T15:18:31Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-19T15:18:31Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-19T15:18:31Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-19T15:18:31Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-19T15:18:31Z level=info msg=Command output to stdout:
 You can now visit your web server at https://agreeable-sand-078d0c10f.5.azurestaticapps.net

time=2024-07-19T15:18:31Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-19T15:18:31Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-19T15:18:33Z level=info msg=Command output to stdout:
 "agreeable-sand-078d0c10f.5.azurestaticapps.net"

time=2024-07-19T15:18:33Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-19T15:18:33Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-19T15:18:33Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroup3603be
time=2024-07-19T15:18:34Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:18:34Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:18:34Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-19T15:18:34Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-19T15:18:34Z level=info msg=Changed directory to .
time=2024-07-19T15:18:34Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-19T15:18:34Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:18:34Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-19T15:18:34Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-19T15:18:35Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupe71114",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:18:35Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.758662
time=2024-07-19T15:18:35Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupe71114",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:18:35Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-19T15:18:35Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:18:35Z level=info msg=Found resource group named: myVMSSResourceGroupe71114
time=2024-07-19T15:18:35Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-19T15:18:48Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.48.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7facfb66-9f1c-4cc7-8c98-b494a1e6e7ab\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114",
    "location": "eastus",
    "name": "myVNete71114",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupe71114",
    "resourceGuid": "9835a009-4c12-47e3-9cbf-fd792e52d803",
    "subnets": [
      {
        "addressPrefix": "10.48.0.0/24",
        "delegations": [],
        "etag": "W/\"7facfb66-9f1c-4cc7-8c98-b494a1e6e7ab\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114/subnets/myVMSNe71114",
        "name": "myVMSNe71114",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:18:48Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.715377
time=2024-07-19T15:18:48Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.48.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7facfb66-9f1c-4cc7-8c98-b494a1e6e7ab\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114",
    "location": "eastus",
    "name": "myVNete71114",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupe71114",
    "resourceGuid": "9835a009-4c12-47e3-9cbf-fd792e52d803",
    "subnets": [
      {
        "addressPrefix": "10.48.0.0/24",
        "delegations": [],
        "etag": "W/\"7facfb66-9f1c-4cc7-8c98-b494a1e6e7ab\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114/subnets/myVMSNe71114",
        "name": "myVMSNe71114",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:18:48Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-19T15:18:48Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-19T15:19:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.48.1.0/24",
  "delegations": [],
  "etag": "W/\"5b807b42-4c2f-402c-8706-68b817f82de7\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114/subnets/myAPPGWSNe71114",
  "name": "myAPPGWSNe71114",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupe71114",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-19T15:19:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729244
time=2024-07-19T15:19:00Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.48.1.0/24",
  "delegations": [],
  "etag": "W/\"5b807b42-4c2f-402c-8706-68b817f82de7\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114/subnets/myAPPGWSNe71114",
  "name": "myAPPGWSNe71114",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupe71114",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-19T15:19:00Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-19T15:19:00Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-19T15:19:04Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"3f217ce5-c945-483c-8d9b-4ded83849bef\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPe71114",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.20.231",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPe71114",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupe71114",
    "resourceGuid": "a8cb4015-ff0f-4403-8d0e-2aeb343e129d",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-19T15:19:04Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746485
time=2024-07-19T15:19:04Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"3f217ce5-c945-483c-8d9b-4ded83849bef\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPe71114",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.20.231",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPe71114",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupe71114",
    "resourceGuid": "a8cb4015-ff0f-4403-8d0e-2aeb343e129d",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-19T15:19:04Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-19T15:19:04Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-19T15:25:09Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPe71114",
            "resourceGroup": "myVMSSResourceGroupe71114"
          }
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114/subnets/myAPPGWSNe71114",
            "resourceGroup": "myVMSSResourceGroupe71114"
          }
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "9d0afbab-350b-4c3c-aad9-3a057db25705",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-19T15:25:09Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.732104
time=2024-07-19T15:25:09Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPe71114",
            "resourceGroup": "myVMSSResourceGroupe71114"
          }
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/virtualNetworks/myVNete71114/subnets/myAPPGWSNe71114",
            "resourceGroup": "myVMSSResourceGroupe71114"
          }
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupe71114"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"16922c06-564f-4190-84a4-94770de8f4be\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupe71114/providers/Microsoft.Network/applicationGateways/myAPPGWe71114/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupe71114"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupe71114",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "9d0afbab-350b-4c3c-aad9-3a057db25705",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-19T15:25:09Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-19T15:25:09Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-19T15:25:41Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_QFZ6Ix7ljfyo5GxZd16AJHFFOv0IHuZM' is not valid according to the validation procedure. The tracking id is '07d5f2ff-5dad-475b-8718-1bd572b3ecb2'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-19T15:25:41Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupe71114
time=2024-07-19T15:25:42Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:25:42Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_QFZ6Ix7ljfyo5GxZd16AJHFFOv0IHuZM' is not valid according to the validation procedure. The tracking id is '07d5f2ff-5dad-475b-8718-1bd572b3ecb2'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_QFZ6Ix7ljfyo5GxZd16AJHFFOv0IHuZM' is not valid according to the validation procedure. The tracking id is '07d5f2ff-5dad-475b-8718-1bd572b3ecb2'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-19T15:25:44Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-19T15:25:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:25:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:25:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:25:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:25:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:25:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:25:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:25:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:25:44Z level=warning msg=The node before the codeblock `export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:25:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:25:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:25:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:25:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:25:44Z level=debug msg=Found 26 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-19T15:25:44Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-19T15:25:44Z level=info msg=Changed directory to .
time=2024-07-19T15:25:44Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-19T15:25:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup72a995",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup72a995",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:25:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.744600
time=2024-07-19T15:25:47Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup72a995",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup72a995",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:25:47Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-19T15:25:47Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:25:47Z level=info msg=Found resource group named: myWordPressAKSResourceGroup72a995
time=2024-07-19T15:25:47Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-19T15:26:02Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.118.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"f61b4037-225b-4f76-a176-0cfe3b461d66\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup72a995/providers/Microsoft.Network/virtualNetworks/myVNet72a995",
    "location": "westeurope",
    "name": "myVNet72a995",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup72a995",
    "resourceGuid": "fd9f4309-d903-4cb6-b3f8-08194e1d75b9",
    "subnets": [
      {
        "addressPrefix": "10.118.0.0/22",
        "delegations": [],
        "etag": "W/\"f61b4037-225b-4f76-a176-0cfe3b461d66\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup72a995/providers/Microsoft.Network/virtualNetworks/myVNet72a995/subnets/mySN72a995",
        "name": "mySN72a995",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup72a995",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:26:02Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.727915
time=2024-07-19T15:26:02Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.118.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"f61b4037-225b-4f76-a176-0cfe3b461d66\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup72a995/providers/Microsoft.Network/virtualNetworks/myVNet72a995",
    "location": "westeurope",
    "name": "myVNet72a995",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup72a995",
    "resourceGuid": "fd9f4309-d903-4cb6-b3f8-08194e1d75b9",
    "subnets": [
      {
        "addressPrefix": "10.118.0.0/22",
        "delegations": [],
        "etag": "W/\"f61b4037-225b-4f76-a176-0cfe3b461d66\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup72a995/providers/Microsoft.Network/virtualNetworks/myVNet72a995/subnets/mySN72a995",
        "name": "mySN72a995",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup72a995",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:26:02Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-19T15:26:02Z level=info msg=Executing command asynchronously:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-19T15:26:02Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin72a995 password is: ww1cllWh5M96lQLzhYuzT7jhVLFVdl1H4jJZJ3BRnQM=

time=2024-07-19T15:26:02Z level=info msg=Finished executing:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-19T15:26:02Z level=info msg=Executing command asynchronously:
 export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-19T15:26:05Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup72a995'...
WARNING: Resource group 'myWordPressAKSResourceGroup72a995' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-19T15:26:05Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup72a995
time=2024-07-19T15:26:09Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:26:09Z level=error msg=Error testing scenario: failed to execute code block 1 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup72a995'...
WARNING: Resource group 'myWordPressAKSResourceGroup72a995' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup72a995'...
WARNING: Resource group 'myWordPressAKSResourceGroup72a995' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-19T15:26:10Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-19T15:26:10Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-19T15:26:10Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-19T15:26:10Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-19T15:26:10Z level=info msg=Changed directory to .
time=2024-07-19T15:26:10Z level=info msg=Executing command asynchronously:
 
time=2024-07-19T15:26:10Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:26:10Z level=info msg=Finished executing:
 
time=2024-07-19T15:26:10Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-19T15:26:10Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:26:10Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-19T15:26:10Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-19T15:26:10Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-19T15:26:10Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-19T15:26:10Z level=info msg=Changed directory to .
time=2024-07-19T15:26:10Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-19T15:26:10Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:26:10Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-19T15:26:10Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-19T15:26:25Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:26:25Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-19T15:26:25Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:26:25Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-19T15:26:28Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-19T15:26:28Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-19T15:26:28Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-19T15:26:30Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-19T15:26:30Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-19T15:26:30Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:26:30Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-19T15:26:33Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:26:33Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-19T15:26:33Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:26:33Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-19T15:26:33Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-19T15:26:33Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-19T15:26:33Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-19T15:26:57Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-19T15:26:57Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-19T15:26:57Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:26:57Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-19T15:26:58Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:26:58.6312077Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f78ff0a2-06d8-4b77-9224-19fb5d608800 Correlation ID: 23153af6-4026-4686-83b1-e9b996fdf549 Timestamp: 2024-07-19 15:26:58Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-19T15:26:58Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:26:58Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:26:58.6312077Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f78ff0a2-06d8-4b77-9224-19fb5d608800 Correlation ID: 23153af6-4026-4686-83b1-e9b996fdf549 Timestamp: 2024-07-19 15:26:58Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:26:58.6312077Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f78ff0a2-06d8-4b77-9224-19fb5d608800 Correlation ID: 23153af6-4026-4686-83b1-e9b996fdf549 Timestamp: 2024-07-19 15:26:58Z
Interactive authentication is needed. Please run:
az login

time=2024-07-19T15:27:00Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-19T15:27:00Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-19T15:27:00Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:00Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:00Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:00Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:00Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:00Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-19T15:27:00Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-19T15:27:00Z level=info msg=Changed directory to .
time=2024-07-19T15:27:00Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-19T15:27:00Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-tcztxz4y" does not exist
'
time=2024-07-19T15:27:00Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:27:00Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-tcztxz4y" does not exist
'
StdErr: error: context "aks-primary-cnpg-tcztxz4y" does not exist

time=2024-07-19T15:27:02Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-19T15:27:02Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:27:02Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:27:02Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-19T15:27:02Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-19T15:27:02Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:27:02Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:02Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:27:02Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-19T15:27:02Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-19T15:27:02Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-19T15:27:02Z level=info msg=Changed directory to .
time=2024-07-19T15:27:02Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-19T15:27:02Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:27:02Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-19T15:27:02Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:27:04Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupa27cf1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupa27cf1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:27:04Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-19T15:27:04Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupa27cf1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupa27cf1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:27:04Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:27:04Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:27:04Z level=info msg=Found resource group named: myAKSResourceGroupa27cf1
time=2024-07-19T15:27:04Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-19T15:30:48Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "eTag": "5d801158-557b-4365-890d-ddbd22786d23",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-q04hw18v.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "307e28f7-146b-492c-982c-89bf36283a3e",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-q04hw18v.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupa27cf1/providers/Microsoft.ContainerService/managedClusters/myAKSClustera27cf1",
  "identity": {
    "delegatedResources": null,
    "principalId": "185c0af9-28a5-4a05-8cda-d2749d8a0282",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "766b5a40-1b25-4a1a-9f35-6e2f3baf2091",
      "objectId": "f7fe7954-1b59-4308-ac45-b7a6f57cbf8c",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupa27cf1_myAKSClustera27cf1_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClustera27cf1-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDby2RyE2jaKRcqMtLYXnuU+b0hfKSzd35+vw/wuZBWXNeSkZoUepqwilh5gcuz1DlBZidwXpWtUUv2WN4WPMP6zYchTrrCKQs+iS32WDBrcf9Y9PiUrYPgtH58lPVn7eN9tZC1qwSt1YY+7ONLPspuwb86DdGTYieYo2nG+szkUPTPGSDbV+1WSZ/a0riHw7FoQmzB31tD79M1K1wIie8/e1w9hdEE8JUIGrBAJ4k9h0Yi+J7WxSbkX2Fou2bV3PfRFxPiVlg3eOtQSVevgehec5b0RDPjjHxDP+sjTrcncJWokz2d8kMJZgHZjjXM5oGnpdIlv89zniVoFeQreofB"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClustera27cf1",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupa27cf1_myAKSClustera27cf1_westeurope/providers/Microsoft.Network/publicIPAddresses/5113ee43-713c-475a-b7fc-28fb413b9bb1",
          "resourceGroup": "MC_myAKSResourceGroupa27cf1_myAKSClustera27cf1_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupa27cf1_myAKSClustera27cf1_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupa27cf1",
  "resourceUid": "669a85d181eaa600018814f9",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-19T15:30:48Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-19T15:30:48Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-19T15:30:49Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:30:49Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-19T15:30:49Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-19T15:30:50Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-16799649-vmss000000   Ready    agent   91s   v1.28.10

time=2024-07-19T15:30:50Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-19T15:30:50Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-19T15:30:50Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-19T15:30:50Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupa27cf1
time=2024-07-19T15:30:53Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:30:53Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-19T15:30:54Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-19T15:30:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:30:54Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-19T15:30:54Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-19T15:30:54Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-19T15:30:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:30:54Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-19T15:30:54Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-19T15:30:54Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-19T15:30:54Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-19T15:30:54Z level=info msg=Changed directory to .
time=2024-07-19T15:30:54Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-19T15:30:54Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:30:54Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-19T15:30:54Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:30:55Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroupedbba2",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroupedbba2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:30:55Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.762943
time=2024-07-19T15:30:55Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroupedbba2",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroupedbba2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:30:55Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-19T15:30:55Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:30:55Z level=info msg=Found resource group named: myResourceGroupedbba2
time=2024-07-19T15:30:55Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-19T15:31:05Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSClusteredbba2 in resource group MC_myResourceGroupedbba2_myAKSClusteredbba2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSClusteredbba2 in resource group MC_myResourceGroupedbba2_myAKSClusteredbba2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-19T15:31:05Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroupedbba2
time=2024-07-19T15:31:06Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:31:06Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSClusteredbba2 in resource group MC_myResourceGroupedbba2_myAKSClusteredbba2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSClusteredbba2 in resource group MC_myResourceGroupedbba2_myAKSClusteredbba2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSClusteredbba2 in resource group MC_myResourceGroupedbba2_myAKSClusteredbba2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSClusteredbba2 in resource group MC_myResourceGroupedbba2_myAKSClusteredbba2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-19T15:31:08Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-19T15:31:08Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-19T15:31:08Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-19T15:31:08Z level=info msg=Changed directory to .
time=2024-07-19T15:31:08Z level=info msg=Executing command asynchronously:
 
time=2024-07-19T15:31:08Z level=info msg=Command output to stdout:
 
time=2024-07-19T15:31:08Z level=info msg=Finished executing:
 
time=2024-07-19T15:31:08Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-19T15:31:08Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:31:08Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-19T15:31:08Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-19T15:31:08Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-19T15:31:08Z level=info msg=Changed directory to .
time=2024-07-19T15:31:08Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-19T15:31:09Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:31:09Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-19T15:31:09Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-19T15:31:09Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-19T15:31:09Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-19T15:31:09Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-19T15:31:09Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-19T15:31:23Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"1a7edfc1-e7e6-49d5-82f5-d8b4e2034664\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "613b6d9f-93f0-4581-9825-4e25e35bb027",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:31:23Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.714426
time=2024-07-19T15:31:23Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"1a7edfc1-e7e6-49d5-82f5-d8b4e2034664\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "613b6d9f-93f0-4581-9825-4e25e35bb027",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-19T15:31:23Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-19T15:31:23Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-19T15:31:35Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"d92bcfbb-b44c-4a0e-a5ee-14d9fb883396\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-19T15:31:35Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.727668
time=2024-07-19T15:31:35Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"d92bcfbb-b44c-4a0e-a5ee-14d9fb883396\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-19T15:31:35Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-19T15:31:35Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-19T15:31:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"fdf8afb8-322c-417e-9b91-7cffbbcfce4f\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-19T15:31:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729330
time=2024-07-19T15:31:47Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"fdf8afb8-322c-417e-9b91-7cffbbcfce4f\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-19T15:31:47Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-19T15:31:47Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-19T15:32:12Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-19T15:31:50.826088+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableExtendedGroups": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-19T15:31:50.935457+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-19T15:31:50.935457+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-19T15:31:50.919831+00:00",
    "key2": "2024-07-19T15:31:50.919831+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-19T15:32:12Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-19T15:32:12Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-19T15:32:17Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:14.1062325Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 2cfc39a6-9b4d-4ccf-831b-9e95e2823800 Correlation ID: 8bbd2496-af7f-48d4-93dd-6d1298fb6644 Timestamp: 2024-07-19 15:32:14Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:15.1844342Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: c4a5c64f-0b1d-46b8-ac7d-0b9f8af63300 Correlation ID: 2bf437d1-4c2e-43c7-9121-c13687ad44ab Timestamp: 2024-07-19 15:32:15Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:16.3236755Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 61a91cc5-f03c-4f27-a45e-5ccc5a074600 Correlation ID: b6e30b0e-146f-4ded-9bd4-9584d251707a Timestamp: 2024-07-19 15:32:16Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-19T15:32:17Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-19T15:32:18Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-19T15:32:18Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:14.1062325Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 2cfc39a6-9b4d-4ccf-831b-9e95e2823800 Correlation ID: 8bbd2496-af7f-48d4-93dd-6d1298fb6644 Timestamp: 2024-07-19 15:32:14Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:15.1844342Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: c4a5c64f-0b1d-46b8-ac7d-0b9f8af63300 Correlation ID: 2bf437d1-4c2e-43c7-9121-c13687ad44ab Timestamp: 2024-07-19 15:32:15Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:16.3236755Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 61a91cc5-f03c-4f27-a45e-5ccc5a074600 Correlation ID: b6e30b0e-146f-4ded-9bd4-9584d251707a Timestamp: 2024-07-19 15:32:16Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:14.1062325Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 2cfc39a6-9b4d-4ccf-831b-9e95e2823800 Correlation ID: 8bbd2496-af7f-48d4-93dd-6d1298fb6644 Timestamp: 2024-07-19 15:32:14Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:15.1844342Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: c4a5c64f-0b1d-46b8-ac7d-0b9f8af63300 Correlation ID: 2bf437d1-4c2e-43c7-9121-c13687ad44ab Timestamp: 2024-07-19 15:32:15Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-19T15:32:16.3236755Z, assertion valid from 2024-07-19T15:05:40.0000000Z, expiry time of assertion 2024-07-19T15:10:40.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 61a91cc5-f03c-4f27-a45e-5ccc5a074600 Correlation ID: b6e30b0e-146f-4ded-9bd4-9584d251707a Timestamp: 2024-07-19 15:32:16Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

time=2024-07-20T15:05:20Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/create-rhel-vm-ssh.ini' does not exist, skipping...
time=2024-07-20T15:05:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:05:20Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:05:20Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-20T15:05:20Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-20T15:05:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:05:20Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:05:20Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-20T15:05:20Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-20T15:05:20Z level=info msg=Changed directory to .
time=2024-07-20T15:05:20Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-20T15:05:20Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:05:20Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-20T15:05:20Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:05:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupcb3b15",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupcb3b15",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:05:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.760481
time=2024-07-20T15:05:22Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupcb3b15",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupcb3b15",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:05:22Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:05:22Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:05:22Z level=info msg=Found resource group named: myVMResourceGroupcb3b15
time=2024-07-20T15:05:22Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-20T15:07:07Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupcb3b15/providers/Microsoft.Compute/virtualMachines/myVMcb3b15",
  "identity": {
    "systemAssignedIdentity": "35c5bc50-7a8c-40ba-ac43-e5f23256e003",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-AE-48-F0",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.166.119.187",
  "resourceGroup": "myVMResourceGroupcb3b15",
  "zones": ""
}

time=2024-07-20T15:07:07Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.720619
time=2024-07-20T15:07:07Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupcb3b15/providers/Microsoft.Compute/virtualMachines/myVMcb3b15",
  "identity": {
    "systemAssignedIdentity": "35c5bc50-7a8c-40ba-ac43-e5f23256e003",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-AE-48-F0",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.166.119.187",
  "resourceGroup": "myVMResourceGroupcb3b15",
  "zones": ""
}

time=2024-07-20T15:07:07Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-20T15:07:07Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-20T15:09:12Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupcb3b15/providers/Microsoft.Compute/virtualMachines/myVMcb3b15/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroupcb3b15",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-20T15:09:12Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-20T15:09:12Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-20T15:09:13Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:09:13Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-20T15:09:13Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-20T15:09:15Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-20T15:09:15Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-20T15:09:15Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-20T15:09:15Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupcb3b15
time=2024-07-20T15:09:18Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:09:18Z level=info msg=INI file 'scenarios/CreateAKSWebApp/create-aks-web-app.ini' does not exist, skipping...
time=2024-07-20T15:09:18Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:09:18Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:09:18Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:09:18Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-20T15:09:18Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-20T15:09:18Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:09:18Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:09:18Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-20T15:09:18Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:09:18Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:09:18Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:09:18Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:09:18Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-20T15:09:18Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-20T15:09:18Z level=info msg=Changed directory to .
time=2024-07-20T15:09:18Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-20T15:09:18Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:09:18Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-20T15:09:18Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:09:18Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:09:21Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGrouped8b39",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:09:21Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-20T15:09:21Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGrouped8b39",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:09:21Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:09:21Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:09:21Z level=info msg=Found resource group named: myAKSResourceGrouped8b39
time=2024-07-20T15:09:21Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-20T15:09:34Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.172.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"fc19a9a3-e85f-4bd7-a283-44b29c0e01d0\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39/providers/Microsoft.Network/virtualNetworks/myVNeted8b39",
    "location": "westeurope",
    "name": "myVNeted8b39",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGrouped8b39",
    "resourceGuid": "f20fcf29-95ad-42fd-9b0d-92de12ce73e8",
    "subnets": [
      {
        "addressPrefix": "10.172.0.0/22",
        "delegations": [],
        "etag": "W/\"fc19a9a3-e85f-4bd7-a283-44b29c0e01d0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39/providers/Microsoft.Network/virtualNetworks/myVNeted8b39/subnets/mySNed8b39",
        "name": "mySNed8b39",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGrouped8b39",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:09:34Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.710398
time=2024-07-20T15:09:34Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.172.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"fc19a9a3-e85f-4bd7-a283-44b29c0e01d0\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39/providers/Microsoft.Network/virtualNetworks/myVNeted8b39",
    "location": "westeurope",
    "name": "myVNeted8b39",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGrouped8b39",
    "resourceGuid": "f20fcf29-95ad-42fd-9b0d-92de12ce73e8",
    "subnets": [
      {
        "addressPrefix": "10.172.0.0/22",
        "delegations": [],
        "etag": "W/\"fc19a9a3-e85f-4bd7-a283-44b29c0e01d0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39/providers/Microsoft.Network/virtualNetworks/myVNeted8b39/subnets/mySNed8b39",
        "name": "mySNed8b39",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGrouped8b39",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:09:34Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-20T15:09:34Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-20T15:09:50Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:09:50Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-20T15:09:50Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-20T15:13:57Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGrouped8b39/providers/Microsoft.Network/virtualNetworks/myVNeted8b39/subnets/mySNed8b39",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-h3mqdwcl.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-h3mqdwcl.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGrouped8b39/providers/Microsoft.ContainerService/managedClusters/myAKSClustered8b39",
  "identity": {
    "delegatedResources": null,
    "principalId": "b80261f4-e519-43dc-b2e8-fd3036cb19b8",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "991b4f3b-da62-4b0e-9512-a9b167a29af5",
      "objectId": "eefdf3c5-d0fd-41c9-a02d-d8ec5a787973",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGrouped8b39_myAKSClustered8b39_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClustered8b39-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClustered8b39",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGrouped8b39_myAKSClustered8b39_westeurope/providers/Microsoft.Network/publicIPAddresses/6b2c0b34-81e2-491c-b74e-e7b14afc0b6f",
          "resourceGroup": "MC_myAKSResourceGrouped8b39_myAKSClustered8b39_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGrouped8b39_myAKSClustered8b39_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGrouped8b39",
  "resourceUid": "669bd357266bab00016bb484",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-20T15:13:57Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-20T15:13:57Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-20T15:13:57Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:13:57Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-20T15:13:57Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-20T15:13:58Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:13:58Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-20T15:13:58Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-20T15:14:01Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-70561604-vmss000000   Ready    agent   94s   v1.28.10

time=2024-07-20T15:14:01Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-20T15:14:01Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-20T15:14:58Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Sat Jul 20 15:14:11 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-20T15:14:58Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-20T15:14:58Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-20T15:14:58Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:14:58Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-20T15:14:58Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-20T15:14:59Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-20T15:14:59Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-20T15:14:59Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-20T15:15:41Z level=info msg=Command output to stdout:
 False
False
False
False
True

time=2024-07-20T15:15:41Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-20T15:15:41Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-20T15:15:41Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-20T15:15:41Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-20T15:15:41Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-20T15:15:42Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-20T15:15:42Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-20T15:15:42Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-20T15:15:44Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-20T15:15:44Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-20T15:15:44Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-20T15:15:45Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-20T15:15:45Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-20T15:15:45Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-20T15:15:45Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-20T15:15:45Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-20T15:15:45Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-20T15:15:45Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-20T15:15:45Z level=info msg=Finished executing:
 helm repo update

time=2024-07-20T15:15:45Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-20T15:16:09Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Sat Jul 20 15:15:46 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-20T15:16:09Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-20T15:16:09Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-20T15:16:09Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:16:09Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-20T15:16:09Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-20T15:16:09Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:16:09Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-20T15:16:09Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-20T15:16:09Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:16:09Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-20T15:16:09Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-20T15:16:09Z level=info msg=Command output to stdout:
 57.153.16.187

time=2024-07-20T15:16:09Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-20T15:16:09Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-20T15:16:09Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabeled8b39.westeurope.cloudapp.azure.com

time=2024-07-20T15:16:09Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-20T15:16:09Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-20T15:16:09Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGrouped8b39
time=2024-07-20T15:16:12Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:16:12Z level=info msg=INI file 'scenarios/CreateAKSDeployment/create-aks-deployment.ini' does not exist, skipping...
time=2024-07-20T15:16:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:16:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:16:12Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-20T15:16:12Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-20T15:16:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:16:12Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:16:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:16:12Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:16:12Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-20T15:16:12Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-20T15:16:12Z level=info msg=Changed directory to .
time=2024-07-20T15:16:12Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-20T15:16:12Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:16:12Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-20T15:16:12Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:16:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup56fe28",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup56fe28",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:16:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-20T15:16:15Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup56fe28",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup56fe28",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:16:15Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:16:15Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:16:15Z level=info msg=Found resource group named: myAKSResourceGroup56fe28
time=2024-07-20T15:16:15Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-20T15:20:27Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-9tosb389.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-9tosb389.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup56fe28/providers/Microsoft.ContainerService/managedClusters/myAKSCluster56fe28",
  "identity": {
    "delegatedResources": null,
    "principalId": "05ebdca8-a1c5-4e2d-8f5e-410bc47d4afc",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "3da24ccd-0ae0-4c1b-ad62-436ecf046656",
      "objectId": "ca43e335-0245-4296-84ea-23550145c394",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup56fe28_myAKSCluster56fe28_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster56fe28-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdPjyVZm7LAokvDznK3gkcq5qFBN8QvFQUN30mXT7bjENOLoIwGHfBTzwXCCPK86p+9Wc679dTea+BP4rsjw8YXwuuFhQUOvOcJEYDbPMSKcPA3NJvVxgKfvVC73orPMHmnd1fBgHt2Wce/q6am4kezXSM+ZVo/Oasui8gQJfWUpGGLt5lAyl4vGFPiJ+yUrTSzn0vF+e7m8BZxlJ7z7A5TD8PACkIJdhZj8ob/VMjN7P/OSLwEmPG83RLNEy36SvGElyEovNrBDKPD6tYa791Mha7iY0Wfog3z5DlwJYYBNwrWVtM8XSExRMj01vNSfXcUqed/j9ojz/4bGoLBvY3"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster56fe28",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup56fe28_myAKSCluster56fe28_westeurope/providers/Microsoft.Network/publicIPAddresses/fc3a10e7-528a-4f64-b41d-3b9613f7fdc5",
          "resourceGroup": "MC_myAKSResourceGroup56fe28_myAKSCluster56fe28_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup56fe28_myAKSCluster56fe28_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup56fe28",
  "resourceUid": "669bd4c7266bab00016bb486",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-20T15:20:27Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-20T15:20:27Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-20T15:20:28Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:20:28Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-20T15:20:28Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-20T15:20:29Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-32247881-vmss000000   Ready    agent   84s   v1.28.10

time=2024-07-20T15:20:29Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-20T15:20:29Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-20T15:20:29Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-20T15:20:29Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup56fe28
time=2024-07-20T15:20:32Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:20:32Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-20T15:20:33Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/create-container-app-deployment-from-source.ini' does not exist, skipping...
time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-20T15:20:33Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-20T15:20:33Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-20T15:20:33Z level=info msg=Changed directory to .
time=2024-07-20T15:20:33Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-20T15:20:33Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:20:33Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-20T15:20:33Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-20T15:20:34Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-20T15:20:34Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:20:34Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-20T15:20:36Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:20:36Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:20:36Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-20T15:20:36Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-20T15:20:36Z level=info msg=Changed directory to .
time=2024-07-20T15:20:36Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-20T15:20:36Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:20:36Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-20T15:20:36Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:20:36Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-20T15:20:38Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup6777f4",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:20:38Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747348
time=2024-07-20T15:20:38Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup6777f4",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:20:38Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-20T15:20:38Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:20:38Z level=info msg=Found resource group named: myLEMPResourceGroup6777f4
time=2024-07-20T15:20:38Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-20T15:20:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.63.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"75982064-8d41-4682-b5c7-78e6ec08ead4\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/virtualNetworks/myVNet6777f4",
    "location": "westeurope",
    "name": "myVNet6777f4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "201052a0-ce27-446b-9f4d-84b1437607ed",
    "subnets": [
      {
        "addressPrefix": "10.63.0.0/24",
        "delegations": [],
        "etag": "W/\"75982064-8d41-4682-b5c7-78e6ec08ead4\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/virtualNetworks/myVNet6777f4/subnets/mySN6777f4",
        "name": "mySN6777f4",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:20:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.724388
time=2024-07-20T15:20:52Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.63.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"75982064-8d41-4682-b5c7-78e6ec08ead4\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/virtualNetworks/myVNet6777f4",
    "location": "westeurope",
    "name": "myVNet6777f4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "201052a0-ce27-446b-9f4d-84b1437607ed",
    "subnets": [
      {
        "addressPrefix": "10.63.0.0/24",
        "delegations": [],
        "etag": "W/\"75982064-8d41-4682-b5c7-78e6ec08ead4\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/virtualNetworks/myVNet6777f4/subnets/mySN6777f4",
        "name": "mySN6777f4",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:20:52Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-20T15:20:52Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-20T15:20:57Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel6777f4",
      "fqdn": "mydnslabel6777f4.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"51da9623-3f9e-4340-9a04-b99239beca91\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/publicIPAddresses/myPublicIP6777f4",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.16.255",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP6777f4",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "5e7c3701-32b4-45cc-940d-4f626a343f1f",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-20T15:20:57Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.755692
time=2024-07-20T15:20:57Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel6777f4",
      "fqdn": "mydnslabel6777f4.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"51da9623-3f9e-4340-9a04-b99239beca91\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/publicIPAddresses/myPublicIP6777f4",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.16.255",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP6777f4",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "5e7c3701-32b4-45cc-940d-4f626a343f1f",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-20T15:20:57Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-20T15:20:57Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-20T15:21:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4",
    "location": "westeurope",
    "name": "myNSG6777f4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "94d2bab5-9f54-4d90-b641-e534cef959ee",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-20T15:21:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.567237
time=2024-07-20T15:21:01Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"9be0a723-a5a2-467f-9066-5635e88c6a37\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4",
    "location": "westeurope",
    "name": "myNSG6777f4",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "94d2bab5-9f54-4d90-b641-e534cef959ee",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-20T15:21:01Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-20T15:21:01Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-20T15:21:03Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"335d0e4a-ec3e-4576-9bbe-f057b47e7906\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/securityRules/Allow-Access6777f4",
  "name": "Allow-Access6777f4",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup6777f4",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-20T15:21:03Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.798977
time=2024-07-20T15:21:03Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"335d0e4a-ec3e-4576-9bbe-f057b47e7906\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4/securityRules/Allow-Access6777f4",
  "name": "Allow-Access6777f4",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup6777f4",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-20T15:21:03Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-20T15:21:03Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-20T15:21:06Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "ubjbaibhzzvujh0nqsyug3qh3f.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"e5658714-555b-46d8-88a5-d58efa9186a6\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkInterfaces/myVMNic6777f4",
    "ipConfigurations": [
      {
        "etag": "W/\"e5658714-555b-46d8-88a5-d58efa9186a6\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkInterfaces/myVMNic6777f4/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.63.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/publicIPAddresses/myPublicIP6777f4",
          "resourceGroup": "myLEMPResourceGroup6777f4"
        },
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/virtualNetworks/myVNet6777f4/subnets/mySN6777f4",
          "resourceGroup": "myLEMPResourceGroup6777f4"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic6777f4",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4",
      "resourceGroup": "myLEMPResourceGroup6777f4"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "caec4c41-e94b-4012-a285-d88af6127886",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-20T15:21:06Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.704226
time=2024-07-20T15:21:06Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "ubjbaibhzzvujh0nqsyug3qh3f.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"e5658714-555b-46d8-88a5-d58efa9186a6\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkInterfaces/myVMNic6777f4",
    "ipConfigurations": [
      {
        "etag": "W/\"e5658714-555b-46d8-88a5-d58efa9186a6\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkInterfaces/myVMNic6777f4/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.63.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/publicIPAddresses/myPublicIP6777f4",
          "resourceGroup": "myLEMPResourceGroup6777f4"
        },
        "resourceGroup": "myLEMPResourceGroup6777f4",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/virtualNetworks/myVNet6777f4/subnets/mySN6777f4",
          "resourceGroup": "myLEMPResourceGroup6777f4"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic6777f4",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup6777f4/providers/Microsoft.Network/networkSecurityGroups/myNSG6777f4",
      "resourceGroup": "myLEMPResourceGroup6777f4"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup6777f4",
    "resourceGuid": "caec4c41-e94b-4012-a285-d88af6127886",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-20T15:21:06Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-20T15:21:06Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-20T15:21:06Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:21:06Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-20T15:21:06Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-20T15:21:41Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "79463faf-6e78-465b-a95d-c0726b3ddb7a",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup6777f4/providers/Microsoft.Network/privateDnsZones/mydnslabel6777f4.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel6777f4.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup6777f4",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-20T15:21:41Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.749488
time=2024-07-20T15:21:41Z level=info msg=Command output to stdout:
 {
  "etag": "79463faf-6e78-465b-a95d-c0726b3ddb7a",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup6777f4/providers/Microsoft.Network/privateDnsZones/mydnslabel6777f4.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel6777f4.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup6777f4",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-20T15:21:41Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-20T15:21:41Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-20T15:21:43Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup6777f4'...
WARNING: Resource group 'myLEMPResourceGroup6777f4' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-20T15:21:43Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup6777f4
time=2024-07-20T15:21:46Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:21:46Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup6777f4'...
WARNING: Resource group 'myLEMPResourceGroup6777f4' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup6777f4'...
WARNING: Resource group 'myLEMPResourceGroup6777f4' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-20T15:21:47Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-20T15:21:47Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:21:47Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:21:47Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-20T15:21:47Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-20T15:21:47Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:21:47Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:21:47Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-20T15:21:47Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-20T15:21:47Z level=info msg=Changed directory to .
time=2024-07-20T15:21:47Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-20T15:21:47Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:21:47Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-20T15:21:47Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:21:48Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb83144",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupb83144",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:21:48Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764702
time=2024-07-20T15:21:48Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupb83144",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupb83144",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:21:48Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:21:48Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:21:48Z level=info msg=Found resource group named: myVMResourceGroupb83144
time=2024-07-20T15:21:48Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-20T15:21:51Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_Cnf6SOsAEN1WzzyR59WY1BPwJA5Chimn' is not valid according to the validation procedure. The tracking id is 'c6f030c0-d38d-4c5d-a441-bf62146e0b3e'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-20T15:21:51Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupb83144
time=2024-07-20T15:21:52Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:21:52Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_Cnf6SOsAEN1WzzyR59WY1BPwJA5Chimn' is not valid according to the validation procedure. The tracking id is 'c6f030c0-d38d-4c5d-a441-bf62146e0b3e'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_Cnf6SOsAEN1WzzyR59WY1BPwJA5Chimn' is not valid according to the validation procedure. The tracking id is 'c6f030c0-d38d-4c5d-a441-bf62146e0b3e'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-20T15:21:53Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-20T15:21:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:21:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:21:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:21:53Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:21:53Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:21:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:21:53Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:21:53Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-20T15:21:53Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-20T15:21:53Z level=info msg=Changed directory to .
time=2024-07-20T15:21:53Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-20T15:21:53Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:21:53Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-20T15:21:53Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-20T15:21:54Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup7de5b2",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup7de5b2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:21:54Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712991
time=2024-07-20T15:21:54Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup7de5b2",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup7de5b2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:21:54Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-20T15:21:54Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:21:54Z level=info msg=Found resource group named: myStaticWebAppResourceGroup7de5b2
time=2024-07-20T15:21:54Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-20T15:21:57Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "orange-forest-0f6bff40f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup7de5b2/providers/Microsoft.Web/staticSites/myStaticWebApp7de5b2",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebApp7de5b2",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroup7de5b2",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-20T15:21:57Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-20T15:21:57Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-20T15:21:59Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:21:59Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-20T15:21:59Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-20T15:21:59Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-20T15:21:59Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-20T15:21:59Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-20T15:21:59Z level=info msg=Command output to stdout:
 You can now visit your web server at https://orange-forest-0f6bff40f.5.azurestaticapps.net

time=2024-07-20T15:21:59Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-20T15:21:59Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-20T15:22:03Z level=info msg=Command output to stdout:
 "orange-forest-0f6bff40f.5.azurestaticapps.net"

time=2024-07-20T15:22:03Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-20T15:22:03Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-20T15:22:03Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroup7de5b2
time=2024-07-20T15:22:04Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:22:04Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:22:04Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-20T15:22:04Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-20T15:22:04Z level=info msg=Changed directory to .
time=2024-07-20T15:22:04Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-20T15:22:04Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:22:04Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-20T15:22:04Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-20T15:22:04Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupfb47c6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:22:04Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.757226
time=2024-07-20T15:22:04Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupfb47c6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:22:04Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-20T15:22:04Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:22:04Z level=info msg=Found resource group named: myVMSSResourceGroupfb47c6
time=2024-07-20T15:22:04Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-20T15:22:16Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.191.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"f6844cbe-1a10-4e08-a505-7805879c2343\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6",
    "location": "eastus",
    "name": "myVNetfb47c6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupfb47c6",
    "resourceGuid": "a0e4dc1f-8835-42ad-a319-76ac301f6e45",
    "subnets": [
      {
        "addressPrefix": "10.191.0.0/24",
        "delegations": [],
        "etag": "W/\"f6844cbe-1a10-4e08-a505-7805879c2343\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6/subnets/myVMSNfb47c6",
        "name": "myVMSNfb47c6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:22:16Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716437
time=2024-07-20T15:22:16Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.191.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"f6844cbe-1a10-4e08-a505-7805879c2343\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6",
    "location": "eastus",
    "name": "myVNetfb47c6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupfb47c6",
    "resourceGuid": "a0e4dc1f-8835-42ad-a319-76ac301f6e45",
    "subnets": [
      {
        "addressPrefix": "10.191.0.0/24",
        "delegations": [],
        "etag": "W/\"f6844cbe-1a10-4e08-a505-7805879c2343\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6/subnets/myVMSNfb47c6",
        "name": "myVMSNfb47c6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:22:16Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-20T15:22:16Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-20T15:22:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.191.1.0/24",
  "delegations": [],
  "etag": "W/\"444cd0c4-6302-4362-aff1-4d176298dd35\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6/subnets/myAPPGWSNfb47c6",
  "name": "myAPPGWSNfb47c6",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupfb47c6",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-20T15:22:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.736475
time=2024-07-20T15:22:28Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.191.1.0/24",
  "delegations": [],
  "etag": "W/\"444cd0c4-6302-4362-aff1-4d176298dd35\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6/subnets/myAPPGWSNfb47c6",
  "name": "myAPPGWSNfb47c6",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupfb47c6",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-20T15:22:28Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-20T15:22:28Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-20T15:22:31Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"96ce4f5a-fbe2-4563-ad03-36a35305b0bc\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPfb47c6",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.73.255",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPfb47c6",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupfb47c6",
    "resourceGuid": "9d4a8e82-bc0e-4662-9f1c-51a269ec010b",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-20T15:22:31Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747617
time=2024-07-20T15:22:31Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"96ce4f5a-fbe2-4563-ad03-36a35305b0bc\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPfb47c6",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.73.255",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPfb47c6",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupfb47c6",
    "resourceGuid": "9d4a8e82-bc0e-4662-9f1c-51a269ec010b",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-20T15:22:31Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-20T15:22:31Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-20T15:28:05Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPfb47c6",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          }
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6/subnets/myAPPGWSNfb47c6",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          }
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "8624d71c-069f-4296-92be-48b4574784f1",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-20T15:28:05Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731506
time=2024-07-20T15:28:05Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPfb47c6",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          }
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/virtualNetworks/myVNetfb47c6/subnets/myAPPGWSNfb47c6",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          }
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupfb47c6"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"9e70d6d6-bfb3-4cff-9876-a817fb29d7c7\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupfb47c6/providers/Microsoft.Network/applicationGateways/myAPPGWfb47c6/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupfb47c6"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupfb47c6",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "8624d71c-069f-4296-92be-48b4574784f1",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-20T15:28:05Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-20T15:28:05Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-20T15:28:38Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_jTVMnIBXvnxjHcRYkFXqnfeGbowmf5I9' is not valid according to the validation procedure. The tracking id is '792327fa-d9e0-4cbf-ba32-982fd5028e05'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-20T15:28:38Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupfb47c6
time=2024-07-20T15:28:39Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:28:39Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_jTVMnIBXvnxjHcRYkFXqnfeGbowmf5I9' is not valid according to the validation procedure. The tracking id is '792327fa-d9e0-4cbf-ba32-982fd5028e05'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_jTVMnIBXvnxjHcRYkFXqnfeGbowmf5I9' is not valid according to the validation procedure. The tracking id is '792327fa-d9e0-4cbf-ba32-982fd5028e05'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-20T15:28:40Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-20T15:28:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:28:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:28:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:28:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:28:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:28:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:28:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:28:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:28:40Z level=warning msg=The node before the codeblock `export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:28:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:28:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:28:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:28:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:28:40Z level=debug msg=Found 26 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-20T15:28:40Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-20T15:28:40Z level=info msg=Changed directory to .
time=2024-07-20T15:28:40Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-20T15:28:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup7e8f94",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup7e8f94",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:28:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.744600
time=2024-07-20T15:28:43Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup7e8f94",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup7e8f94",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:28:43Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-20T15:28:43Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:28:43Z level=info msg=Found resource group named: myWordPressAKSResourceGroup7e8f94
time=2024-07-20T15:28:43Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-20T15:28:56Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.132.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"4ca952d6-23e7-48c6-886b-a7d0612c6a12\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup7e8f94/providers/Microsoft.Network/virtualNetworks/myVNet7e8f94",
    "location": "westeurope",
    "name": "myVNet7e8f94",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup7e8f94",
    "resourceGuid": "df5b7635-49c8-4b36-b20c-57e3d6658542",
    "subnets": [
      {
        "addressPrefix": "10.132.0.0/22",
        "delegations": [],
        "etag": "W/\"4ca952d6-23e7-48c6-886b-a7d0612c6a12\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup7e8f94/providers/Microsoft.Network/virtualNetworks/myVNet7e8f94/subnets/mySN7e8f94",
        "name": "mySN7e8f94",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup7e8f94",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:28:56Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.726263
time=2024-07-20T15:28:56Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.132.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"4ca952d6-23e7-48c6-886b-a7d0612c6a12\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup7e8f94/providers/Microsoft.Network/virtualNetworks/myVNet7e8f94",
    "location": "westeurope",
    "name": "myVNet7e8f94",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup7e8f94",
    "resourceGuid": "df5b7635-49c8-4b36-b20c-57e3d6658542",
    "subnets": [
      {
        "addressPrefix": "10.132.0.0/22",
        "delegations": [],
        "etag": "W/\"4ca952d6-23e7-48c6-886b-a7d0612c6a12\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup7e8f94/providers/Microsoft.Network/virtualNetworks/myVNet7e8f94/subnets/mySN7e8f94",
        "name": "mySN7e8f94",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup7e8f94",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:28:56Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-20T15:28:56Z level=info msg=Executing command asynchronously:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-20T15:28:56Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin7e8f94 password is: /VdZyrxCX6USXPf3oLTfViKg4HvumjdrIqSD1JZKq+I=

time=2024-07-20T15:28:56Z level=info msg=Finished executing:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-20T15:28:56Z level=info msg=Executing command asynchronously:
 export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-20T15:28:58Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup7e8f94'...
WARNING: Resource group 'myWordPressAKSResourceGroup7e8f94' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-20T15:28:58Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup7e8f94
time=2024-07-20T15:29:01Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:29:01Z level=error msg=Error testing scenario: failed to execute code block 1 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup7e8f94'...
WARNING: Resource group 'myWordPressAKSResourceGroup7e8f94' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup7e8f94'...
WARNING: Resource group 'myWordPressAKSResourceGroup7e8f94' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-20T15:29:02Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-20T15:29:02Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-20T15:29:02Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-20T15:29:02Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-20T15:29:02Z level=info msg=Changed directory to .
time=2024-07-20T15:29:02Z level=info msg=Executing command asynchronously:
 
time=2024-07-20T15:29:02Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:29:02Z level=info msg=Finished executing:
 
time=2024-07-20T15:29:02Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-20T15:29:02Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:29:02Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-20T15:29:02Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-20T15:29:02Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-20T15:29:02Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-20T15:29:02Z level=info msg=Changed directory to .
time=2024-07-20T15:29:02Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-20T15:29:02Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:29:02Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-20T15:29:02Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-20T15:29:22Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:29:22Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-20T15:29:22Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:29:22Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-20T15:29:24Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-20T15:29:24Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-20T15:29:24Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-20T15:29:27Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-20T15:29:27Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-20T15:29:27Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:29:27Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-20T15:29:30Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:29:30Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-20T15:29:30Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:29:30Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-20T15:29:30Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-20T15:29:30Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-20T15:29:30Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-20T15:29:55Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-20T15:29:55Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-20T15:29:55Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:29:55Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-20T15:29:56Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:29:56.6510741Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b60e2165-9234-46fa-ba15-e6accb241e00 Correlation ID: d8bb0fc9-6bf3-47f1-b68e-faeacc95a51d Timestamp: 2024-07-20 15:29:56Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-20T15:29:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:29:56Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:29:56.6510741Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b60e2165-9234-46fa-ba15-e6accb241e00 Correlation ID: d8bb0fc9-6bf3-47f1-b68e-faeacc95a51d Timestamp: 2024-07-20 15:29:56Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:29:56.6510741Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: b60e2165-9234-46fa-ba15-e6accb241e00 Correlation ID: d8bb0fc9-6bf3-47f1-b68e-faeacc95a51d Timestamp: 2024-07-20 15:29:56Z
Interactive authentication is needed. Please run:
az login

time=2024-07-20T15:29:58Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-20T15:29:58Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-20T15:29:58Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:58Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:58Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:58Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:58Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:58Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-20T15:29:58Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-20T15:29:58Z level=info msg=Changed directory to .
time=2024-07-20T15:29:58Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-20T15:29:58Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-ny4ibtum" does not exist
'
time=2024-07-20T15:29:58Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:29:58Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-ny4ibtum" does not exist
'
StdErr: error: context "aks-primary-cnpg-ny4ibtum" does not exist

time=2024-07-20T15:29:59Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-20T15:29:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:29:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:29:59Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-20T15:29:59Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-20T15:29:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:29:59Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:29:59Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-20T15:29:59Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-20T15:29:59Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-20T15:29:59Z level=info msg=Changed directory to .
time=2024-07-20T15:29:59Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-20T15:29:59Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:29:59Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-20T15:29:59Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:30:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupf65f59",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupf65f59",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:30:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-20T15:30:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupf65f59",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupf65f59",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:30:01Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:30:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:30:01Z level=info msg=Found resource group named: myAKSResourceGroupf65f59
time=2024-07-20T15:30:01Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-20T15:33:47Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "eTag": "d77f0945-4853-487f-8b3e-1dc9efb95cd9",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-hid7a8xq.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "ca216ac3-0574-460f-8a0a-36e2c7bf620a",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-hid7a8xq.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupf65f59/providers/Microsoft.ContainerService/managedClusters/myAKSClusterf65f59",
  "identity": {
    "delegatedResources": null,
    "principalId": "06733143-ea56-480f-96b5-4407d6b00b4d",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "0b0f0e52-c1e9-44eb-8ce6-024f05cda25d",
      "objectId": "a0123e0a-e2bb-482c-9b44-79c70440e635",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupf65f59_myAKSClusterf65f59_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClusterf65f59-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdPjyVZm7LAokvDznK3gkcq5qFBN8QvFQUN30mXT7bjENOLoIwGHfBTzwXCCPK86p+9Wc679dTea+BP4rsjw8YXwuuFhQUOvOcJEYDbPMSKcPA3NJvVxgKfvVC73orPMHmnd1fBgHt2Wce/q6am4kezXSM+ZVo/Oasui8gQJfWUpGGLt5lAyl4vGFPiJ+yUrTSzn0vF+e7m8BZxlJ7z7A5TD8PACkIJdhZj8ob/VMjN7P/OSLwEmPG83RLNEy36SvGElyEovNrBDKPD6tYa791Mha7iY0Wfog3z5DlwJYYBNwrWVtM8XSExRMj01vNSfXcUqed/j9ojz/4bGoLBvY3"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClusterf65f59",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupf65f59_myAKSClusterf65f59_westeurope/providers/Microsoft.Network/publicIPAddresses/7bd6bcc4-49ff-429d-9b6a-52332eb2e932",
          "resourceGroup": "MC_myAKSResourceGroupf65f59_myAKSClusterf65f59_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupf65f59_myAKSClusterf65f59_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupf65f59",
  "resourceUid": "669bd802266bab00016bb489",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-20T15:33:47Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-20T15:33:47Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-20T15:33:48Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:33:48Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-20T15:33:48Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-20T15:33:48Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-41249214-vmss000000   Ready    agent   104s   v1.28.10

time=2024-07-20T15:33:48Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-20T15:33:48Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-20T15:33:49Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-20T15:33:49Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupf65f59
time=2024-07-20T15:33:52Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:33:52Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-20T15:33:53Z level=info msg=INI file 'scenarios/AttachDataDiskLinuxVM/attach-data-disk-linux-vm.ini' does not exist, skipping...
time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:33:53Z level=debug msg=Found 14 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-xxxxxx",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-xxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON
 Create an Azure Linux Virtual Machine with a data disk Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d",
  "identity": {
    "systemAssignedIdentity": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "7C-1E-52-22-D8-72",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "xx.xx.xx.xx",
  "resourceGroup": "LinuxRG-a36f5d",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a36f5d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"
 Enable Azure AD Login for a Linux virtual machine in Azure In this scenario the LUN0 our first data disk is going to be formatted and mounted using the command below: {text /dev/sdc: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done
Creating filesystem with 33553920 4k blocks and 8388608 inodes
Filesystem UUID: 1095e29c-07db-47ec-8b19-1ffcaf4f5628
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done
Writing inode tables: done
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk01'
mount: /dev/sdc1 mounted on /datadisk01.
 0.3 <nil>}} {bash ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'
 Enable Azure AD Login for a Linux virtual machine in Azure In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=1095e29c-07db-47ec-8b19-1ffcaf4f5628 /datadisk01 xfs defaults,discard 0 0
 0.3 <nil>}} {bash export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50
 Attach a new disk to a VM If you want to add a new, empty data disk on your VM, use the [az vm disk attach](/cli/azure/vm/disk) command with the `--new` parameter. If your VM is in an Availability Zone, the disk is automatically created in the same zone as the VM. For more information, see [Overview of Availability Zones](../../availability-zones/az-overview.md). The following example creates a disk named *$LUN2_NAME* that is 50 Gb in size: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"
 Attach a new disk to a VM In this second possible scenario the LUN1 is going to be our data disk, the following example shows how to format and mount the data disk. {text /dev/sdd: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done
Creating filesystem with 13106688 4k blocks and 3276800 inodes
Filesystem UUID: 6e8ad233-5664-4f75-8ec6-3aa34f228868
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424

Allocating group tables: done
Writing inode tables: done
Creating journal (65536 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk02'
mount: /dev/sdd1 mounted on /datadisk02.
 0.3 <nil>}} {bash ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'
 Attach a new disk to a VM In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=0b1629d5-0cd5-41fd-9050-b2ed7e3f1028 /datadisk02 xfs defaults,discard 0 0
 0.3 <nil>}} {bash export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON
 Attach an existing data disk to a VM First lets start by creating a new disk: {JSON {
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-e4c4b4/providers/Microsoft.Compute/disks/LUN2-e4c4b4",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "LUN2-e4c4b4",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-e4c4b4",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  }
}
 0.3 <nil>}} {bash LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2
 Attach an existing data disk to a VM Then you can attach the disk to the VM: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"
 Attach an existing data disk to a VM In this third scenario the LUN2 is going to be our data disk, the following example shows how to format and mount the data disk. {text /dev/sde: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Creating filesystem with 33553920 4k blocks and 8388608 inodes
Filesystem UUID: 0e0a110e-7d30-4235-ac4d-8ee59641e7c7
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done
Writing inode tables: done
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk03'
mount: /dev/sde1 mounted on /datadisk03.
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'
 Attach an existing data disk to a VM In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=4b54ed3b-2f5e-4fe7-b0e5-c40da6e3b8a8 /datadisk03 xfs defaults,discard 0 0
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'
 Check all mounted LUNs To verify the mount points, you can use the following command: {text /dev/sdc1 on /datadisk01 type xfs (rw,relatime)
/dev/sdd1 on /datadisk02 type xfs (rw,relatime)
/dev/sde1 on /datadisk03 type xfs (rw,relatime)
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN
 SSH into the VM You can now SSH into the VM by running the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-20T15:33:53Z level=info msg=Successfully built out the scenario: Quickstart: Use the Azure CLI to create an Ubuntu Virtual Machine and attach an Azure Data Disk
time=2024-07-20T15:33:53Z level=info msg=Changed directory to .
time=2024-07-20T15:33:53Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-20T15:33:57Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-xxxxxx",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-xxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-a2f63b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:33:57Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750899
time=2024-07-20T15:33:57Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-a2f63b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:33:57Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-20T15:33:57Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:33:57Z level=info msg=Found resource group named: LinuxRG-a2f63b
time=2024-07-20T15:33:57Z level=info msg=Executing command asynchronously:
 export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON

time=2024-07-20T15:35:17Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "mydnslabelxxxxxx.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d",
  "identity": {
    "systemAssignedIdentity": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "7C-1E-52-22-D8-72",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "xx.xx.xx.xx",
  "resourceGroup": "LinuxRG-a36f5d",
  "zones": ""
}

Actual{
  "fqdns": "mydnslabela2f63b.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b/providers/Microsoft.Compute/virtualMachines/myVMa2f63b",
  "identity": {
    "systemAssignedIdentity": "521aa790-5ea7-43a6-9bae-11c064842389",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "00-22-48-98-3C-E6",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.5.8.143",
  "resourceGroup": "LinuxRG-a2f63b",
  "zones": "1"
}

time=2024-07-20T15:35:17Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.740411
time=2024-07-20T15:35:17Z level=info msg=Command output to stdout:
 {
  "fqdns": "mydnslabela2f63b.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b/providers/Microsoft.Compute/virtualMachines/myVMa2f63b",
  "identity": {
    "systemAssignedIdentity": "521aa790-5ea7-43a6-9bae-11c064842389",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "00-22-48-98-3C-E6",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.5.8.143",
  "resourceGroup": "LinuxRG-a2f63b",
  "zones": "1"
}

time=2024-07-20T15:35:17Z level=info msg=Finished executing:
 export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON

time=2024-07-20T15:35:17Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON

time=2024-07-20T15:36:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a36f5d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

Actual{
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b/providers/Microsoft.Compute/virtualMachines/myVMa2f63b/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a2f63b",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-20T15:36:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.845042
time=2024-07-20T15:36:26Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b/providers/Microsoft.Compute/virtualMachines/myVMa2f63b/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a2f63b",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-20T15:36:26Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON

time=2024-07-20T15:36:26Z level=info msg=Executing command asynchronously:
 export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"

time=2024-07-20T15:36:45Z level=info msg=Command output to stdout:
 /dev/sda: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun0-part1 isize=512    agcount=4, agsize=8388480 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=33553920, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
mkdir: created directory '/datadisk01'
mount: /dev/sda1 mounted on /datadisk01.

time=2024-07-20T15:36:45Z level=info msg=Finished executing:
 export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"

time=2024-07-20T15:36:45Z level=info msg=Executing command asynchronously:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'

time=2024-07-20T15:36:47Z level=info msg=Command output to stdout:
 UUID=7cc20997-bc20-4429-8420-eec6eaa09c98 /datadisk01 xfs defaults,discard 0 0

time=2024-07-20T15:36:47Z level=info msg=Finished executing:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'

time=2024-07-20T15:36:47Z level=info msg=Executing command asynchronously:
 export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50

time=2024-07-20T15:37:31Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:37:31Z level=info msg=Finished executing:
 export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50

time=2024-07-20T15:37:31Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"

time=2024-07-20T15:37:45Z level=info msg=Command output to stdout:
 /dev/sdd: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun1-part1 isize=512    agcount=4, agsize=3276672 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=13106688, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
mkdir: created directory '/datadisk02'
mount: /dev/sdd1 mounted on /datadisk02.

time=2024-07-20T15:37:45Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"

time=2024-07-20T15:37:45Z level=info msg=Executing command asynchronously:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-20T15:37:47Z level=info msg=Command output to stdout:
 UUID=738ce84e-8081-47cc-91f3-8a0388aa8de5 /datadisk02 xfs defaults,discard 0 0

time=2024-07-20T15:37:47Z level=info msg=Finished executing:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-20T15:37:47Z level=info msg=Executing command asynchronously:
 export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON

time=2024-07-20T15:38:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-e4c4b4/providers/Microsoft.Compute/disks/LUN2-e4c4b4",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "LUN2-e4c4b4",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-e4c4b4",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  }
}

Actual{
  "burstingEnabled": null,
  "burstingEnabledTime": null,
  "completionPercent": null,
  "creationData": {
    "createOption": "Empty",
    "elasticSanResourceId": null,
    "galleryImageReference": null,
    "imageReference": null,
    "logicalSectorSize": 4096,
    "performancePlus": null,
    "securityDataUri": null,
    "sourceResourceId": null,
    "sourceUniqueId": null,
    "sourceUri": null,
    "storageAccountId": null,
    "uploadSizeBytes": null
  },
  "dataAccessAuthMode": null,
  "diskAccessId": null,
  "diskIopsReadOnly": 3000,
  "diskIopsReadWrite": 3000,
  "diskMBpsReadOnly": 125,
  "diskMBpsReadWrite": 125,
  "diskSizeBytes": 137438953472,
  "diskSizeGb": 128,
  "diskState": "Unattached",
  "encryption": {
    "diskEncryptionSetId": null,
    "type": "EncryptionAtRestWithPlatformKey"
  },
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b/providers/Microsoft.Compute/disks/PSSDV2-a2f63b",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "PSSDV2-a2f63b",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-a2f63b",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  },
  "supportedCapabilities": null,
  "supportsHibernation": null,
  "tags": {},
  "tier": null,
  "timeCreated": "2024-07-20T15:37:50.562135+00:00",
  "type": "Microsoft.Compute/disks",
  "uniqueId": "e3df50d4-a86d-4946-a9d5-1640666e5762",
  "zones": [
    "1"
  ]
}

time=2024-07-20T15:38:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.620422
time=2024-07-20T15:38:01Z level=info msg=Command output to stdout:
 {
  "burstingEnabled": null,
  "burstingEnabledTime": null,
  "completionPercent": null,
  "creationData": {
    "createOption": "Empty",
    "elasticSanResourceId": null,
    "galleryImageReference": null,
    "imageReference": null,
    "logicalSectorSize": 4096,
    "performancePlus": null,
    "securityDataUri": null,
    "sourceResourceId": null,
    "sourceUniqueId": null,
    "sourceUri": null,
    "storageAccountId": null,
    "uploadSizeBytes": null
  },
  "dataAccessAuthMode": null,
  "diskAccessId": null,
  "diskIopsReadOnly": 3000,
  "diskIopsReadWrite": 3000,
  "diskMBpsReadOnly": 125,
  "diskMBpsReadWrite": 125,
  "diskSizeBytes": 137438953472,
  "diskSizeGb": 128,
  "diskState": "Unattached",
  "encryption": {
    "diskEncryptionSetId": null,
    "type": "EncryptionAtRestWithPlatformKey"
  },
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a2f63b/providers/Microsoft.Compute/disks/PSSDV2-a2f63b",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "PSSDV2-a2f63b",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-a2f63b",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  },
  "supportedCapabilities": null,
  "supportsHibernation": null,
  "tags": {},
  "tier": null,
  "timeCreated": "2024-07-20T15:37:50.562135+00:00",
  "type": "Microsoft.Compute/disks",
  "uniqueId": "e3df50d4-a86d-4946-a9d5-1640666e5762",
  "zones": [
    "1"
  ]
}

time=2024-07-20T15:38:01Z level=info msg=Finished executing:
 export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON

time=2024-07-20T15:38:01Z level=info msg=Executing command asynchronously:
 LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2

time=2024-07-20T15:38:15Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:38:15Z level=info msg=Finished executing:
 LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2

time=2024-07-20T15:38:15Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"

time=2024-07-20T15:38:28Z level=info msg=Command output to stdout:
 /dev/sde: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun2-part1 isize=512    agcount=4, agsize=8388480 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=33553920, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
mkdir: created directory '/datadisk03'
mount: /dev/sde1 mounted on /datadisk03.

time=2024-07-20T15:38:28Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"

time=2024-07-20T15:38:28Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-20T15:38:30Z level=info msg=Command output to stdout:
 UUID=45e32d90-393b-4ecd-b4ca-9118f045ae15 /datadisk03 xfs defaults,discard 0 0

time=2024-07-20T15:38:30Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-20T15:38:30Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'

time=2024-07-20T15:38:33Z level=info msg=Command output to stdout:
 /dev/sda1 on /datadisk01 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)
/dev/sdd1 on /datadisk02 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)
/dev/sde1 on /datadisk03 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)

time=2024-07-20T15:38:33Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'

time=2024-07-20T15:38:33Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN

time=2024-07-20T15:38:36Z level=info msg=Command output to stdout:
 Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-1010-azure x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sat Jul 20 15:38:34 UTC 2024

  System load:  0.22              Processes:             163
  Usage of /:   5.7% of 28.02GB   Users logged in:       0
  Memory usage: 3%                IPv4 address for eth0: 10.0.0.4
  Swap usage:   0%


Expanded Security Maintenance for Applications is not enabled.

2 updates can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status



time=2024-07-20T15:38:36Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN

time=2024-07-20T15:38:36Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-20T15:38:36Z level=info msg=Attempting to delete the deployed resource group with the name: LinuxRG-a2f63b
time=2024-07-20T15:38:42Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:38:42Z level=info msg=INI file 'scenarios/DeployIGonAKS/deploy-ig-aks.ini' does not exist, skipping...
time=2024-07-20T15:38:42Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:42Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-20T15:38:42Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-20T15:38:42Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-20T15:38:42Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:42Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-20T15:38:42Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-20T15:38:42Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-20T15:38:42Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-20T15:38:42Z level=info msg=Changed directory to .
time=2024-07-20T15:38:42Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-20T15:38:42Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:38:42Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-20T15:38:42Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:38:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup61df3b",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup61df3b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:38:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.768843
time=2024-07-20T15:38:43Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup61df3b",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup61df3b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:38:43Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-20T15:38:43Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:38:43Z level=info msg=Found resource group named: myResourceGroup61df3b
time=2024-07-20T15:38:43Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-20T15:38:55Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster61df3b in resource group MC_myResourceGroup61df3b_myAKSCluster61df3b_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster61df3b in resource group MC_myResourceGroup61df3b_myAKSCluster61df3b_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-20T15:38:55Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup61df3b
time=2024-07-20T15:38:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:38:56Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster61df3b in resource group MC_myResourceGroup61df3b_myAKSCluster61df3b_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster61df3b in resource group MC_myResourceGroup61df3b_myAKSCluster61df3b_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster61df3b in resource group MC_myResourceGroup61df3b_myAKSCluster61df3b_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster61df3b in resource group MC_myResourceGroup61df3b_myAKSCluster61df3b_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-20T15:38:59Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/blob-vision-aks.ini' does not exist, skipping...
time=2024-07-20T15:38:59Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-20T15:38:59Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-20T15:38:59Z level=info msg=Changed directory to .
time=2024-07-20T15:38:59Z level=info msg=Executing command asynchronously:
 
time=2024-07-20T15:38:59Z level=info msg=Command output to stdout:
 
time=2024-07-20T15:38:59Z level=info msg=Finished executing:
 
time=2024-07-20T15:38:59Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-20T15:38:59Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:38:59Z level=info msg=INI file 'scenarios/DeployHAPGonARO/deploy-ha-pg-aro.ini' does not exist, skipping...
time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-20T15:38:59Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-20T15:38:59Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-20T15:38:59Z level=info msg=Changed directory to .
time=2024-07-20T15:38:59Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-20T15:39:01Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:39:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-20T15:39:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-20T15:39:01Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-20T15:39:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-20T15:39:01Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-20T15:39:01Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-20T15:39:14Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"c2d90bc9-ae88-4505-9d68-88e9ec5f2a6d\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "9a9026b0-56ac-4fb3-a0ae-b5ab14dc1250",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:39:14Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.715279
time=2024-07-20T15:39:14Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"c2d90bc9-ae88-4505-9d68-88e9ec5f2a6d\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "9a9026b0-56ac-4fb3-a0ae-b5ab14dc1250",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-20T15:39:14Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-20T15:39:14Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-20T15:39:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"664d93cb-e677-44c6-a025-bd00c5ad8e98\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-20T15:39:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728538
time=2024-07-20T15:39:26Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"664d93cb-e677-44c6-a025-bd00c5ad8e98\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-20T15:39:26Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-20T15:39:26Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-20T15:39:39Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"2b34fd5e-bdbf-4844-a67a-a99f3fd54f2e\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-20T15:39:39Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728469
time=2024-07-20T15:39:39Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"2b34fd5e-bdbf-4844-a67a-a99f3fd54f2e\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-20T15:39:39Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-20T15:39:39Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-20T15:40:03Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-20T15:39:41.415810+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableExtendedGroups": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-20T15:39:41.540719+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-20T15:39:41.540719+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-20T15:39:41.540719+00:00",
    "key2": "2024-07-20T15:39:41.540719+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-20T15:40:03Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-20T15:40:03Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-20T15:40:08Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:05.3389672Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: eeeeee6f-6be6-4dec-acab-db634d285900 Correlation ID: d26083f7-13c8-4109-b822-0f7a119e6bf4 Timestamp: 2024-07-20 15:40:05Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:06.3408951Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e54b7699-8de6-470f-84fd-878e38cb1900 Correlation ID: 949c403c-ab9c-4053-bb84-814c58e75dc0 Timestamp: 2024-07-20 15:40:06Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:07.2386987Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 3edd1518-2899-4a23-8b38-688ff4c04c00 Correlation ID: 913c108a-7854-49fa-a24f-abc3316140fb Timestamp: 2024-07-20 15:40:07Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-20T15:40:08Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-20T15:40:10Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-20T15:40:10Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:05.3389672Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: eeeeee6f-6be6-4dec-acab-db634d285900 Correlation ID: d26083f7-13c8-4109-b822-0f7a119e6bf4 Timestamp: 2024-07-20 15:40:05Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:06.3408951Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e54b7699-8de6-470f-84fd-878e38cb1900 Correlation ID: 949c403c-ab9c-4053-bb84-814c58e75dc0 Timestamp: 2024-07-20 15:40:06Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:07.2386987Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 3edd1518-2899-4a23-8b38-688ff4c04c00 Correlation ID: 913c108a-7854-49fa-a24f-abc3316140fb Timestamp: 2024-07-20 15:40:07Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:05.3389672Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: eeeeee6f-6be6-4dec-acab-db634d285900 Correlation ID: d26083f7-13c8-4109-b822-0f7a119e6bf4 Timestamp: 2024-07-20 15:40:05Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:06.3408951Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e54b7699-8de6-470f-84fd-878e38cb1900 Correlation ID: 949c403c-ab9c-4053-bb84-814c58e75dc0 Timestamp: 2024-07-20 15:40:06Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-20T15:40:07.2386987Z, assertion valid from 2024-07-20T15:05:02.0000000Z, expiry time of assertion 2024-07-20T15:10:02.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 3edd1518-2899-4a23-8b38-688ff4c04c00 Correlation ID: 913c108a-7854-49fa-a24f-abc3316140fb Timestamp: 2024-07-20 15:40:07Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

time=2024-07-21T15:06:44Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/create-rhel-vm-ssh.ini' does not exist, skipping...
time=2024-07-21T15:06:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:06:44Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:06:44Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-21T15:06:44Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-21T15:06:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:06:44Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:06:44Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-21T15:06:44Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-21T15:06:44Z level=info msg=Changed directory to .
time=2024-07-21T15:06:44Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-21T15:06:44Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:06:44Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-21T15:06:44Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:06:46Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbc0dc9",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupbc0dc9",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:06:46Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764887
time=2024-07-21T15:06:46Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbc0dc9",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroupbc0dc9",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:06:46Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:06:46Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:06:46Z level=info msg=Found resource group named: myVMResourceGroupbc0dc9
time=2024-07-21T15:06:46Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-21T15:08:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbc0dc9/providers/Microsoft.Compute/virtualMachines/myVMbc0dc9",
  "identity": {
    "systemAssignedIdentity": "129c9b0d-0022-4bc7-9c19-5112c7ae992e",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-22-48-84-1A-19",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.174.155.161",
  "resourceGroup": "myVMResourceGroupbc0dc9",
  "zones": ""
}

time=2024-07-21T15:08:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716386
time=2024-07-21T15:08:00Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbc0dc9/providers/Microsoft.Compute/virtualMachines/myVMbc0dc9",
  "identity": {
    "systemAssignedIdentity": "129c9b0d-0022-4bc7-9c19-5112c7ae992e",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-22-48-84-1A-19",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.174.155.161",
  "resourceGroup": "myVMResourceGroupbc0dc9",
  "zones": ""
}

time=2024-07-21T15:08:00Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-21T15:08:00Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-21T15:10:06Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupbc0dc9/providers/Microsoft.Compute/virtualMachines/myVMbc0dc9/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroupbc0dc9",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-21T15:10:06Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-21T15:10:06Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-21T15:10:07Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:10:07Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-21T15:10:07Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-21T15:10:09Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-21T15:10:09Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-21T15:10:09Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-21T15:10:09Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupbc0dc9
time=2024-07-21T15:10:12Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:10:12Z level=info msg=INI file 'scenarios/CreateAKSWebApp/create-aks-web-app.ini' does not exist, skipping...
time=2024-07-21T15:10:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:10:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:10:12Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:10:12Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-21T15:10:12Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-21T15:10:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:10:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:10:12Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-21T15:10:12Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:10:12Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:10:12Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:10:12Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:10:12Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-21T15:10:12Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-21T15:10:12Z level=info msg=Changed directory to .
time=2024-07-21T15:10:12Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-21T15:10:12Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:10:12Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-21T15:10:12Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:10:12Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:10:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupbee9e1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:10:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.752165
time=2024-07-21T15:10:15Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupbee9e1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:10:15Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:10:15Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:10:15Z level=info msg=Found resource group named: myAKSResourceGroupbee9e1
time=2024-07-21T15:10:15Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-21T15:10:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.240.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8fae814a-2733-4442-827b-08f036a4b4f4\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1/providers/Microsoft.Network/virtualNetworks/myVNetbee9e1",
    "location": "westeurope",
    "name": "myVNetbee9e1",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupbee9e1",
    "resourceGuid": "22def855-3ff7-4818-ac53-4f18c9c088bb",
    "subnets": [
      {
        "addressPrefix": "10.240.0.0/22",
        "delegations": [],
        "etag": "W/\"8fae814a-2733-4442-827b-08f036a4b4f4\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1/providers/Microsoft.Network/virtualNetworks/myVNetbee9e1/subnets/mySNbee9e1",
        "name": "mySNbee9e1",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupbee9e1",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:10:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712594
time=2024-07-21T15:10:28Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.240.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8fae814a-2733-4442-827b-08f036a4b4f4\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1/providers/Microsoft.Network/virtualNetworks/myVNetbee9e1",
    "location": "westeurope",
    "name": "myVNetbee9e1",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupbee9e1",
    "resourceGuid": "22def855-3ff7-4818-ac53-4f18c9c088bb",
    "subnets": [
      {
        "addressPrefix": "10.240.0.0/22",
        "delegations": [],
        "etag": "W/\"8fae814a-2733-4442-827b-08f036a4b4f4\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1/providers/Microsoft.Network/virtualNetworks/myVNetbee9e1/subnets/mySNbee9e1",
        "name": "mySNbee9e1",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupbee9e1",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:10:28Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-21T15:10:28Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-21T15:10:37Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:10:37Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-21T15:10:37Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-21T15:15:07Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupbee9e1/providers/Microsoft.Network/virtualNetworks/myVNetbee9e1/subnets/mySNbee9e1",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-t2kweqn3.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-t2kweqn3.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupbee9e1/providers/Microsoft.ContainerService/managedClusters/myAKSClusterbee9e1",
  "identity": {
    "delegatedResources": null,
    "principalId": "86a02c36-b171-429a-8bbd-948d32890d59",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "709b802a-f5dc-4a9d-b661-edb288e71845",
      "objectId": "43f1e950-eb04-4760-824b-2ce3bc114fab",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupbee9e1_myAKSClusterbee9e1_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClusterbee9e1-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClusterbee9e1",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupbee9e1_myAKSClusterbee9e1_westeurope/providers/Microsoft.Network/publicIPAddresses/b8665d46-e19f-46e5-a3da-2a1b6e928c01",
          "resourceGroup": "MC_myAKSResourceGroupbee9e1_myAKSClusterbee9e1_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupbee9e1_myAKSClusterbee9e1_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupbee9e1",
  "resourceUid": "669d2503266bab00016bb5c9",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-21T15:15:07Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-21T15:15:07Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-21T15:15:07Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:15:07Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-21T15:15:07Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-21T15:15:08Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:15:08Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-21T15:15:08Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-21T15:15:09Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-13394097-vmss000000   Ready    agent   106s   v1.28.10

time=2024-07-21T15:15:09Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-21T15:15:09Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-21T15:16:20Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Sun Jul 21 15:15:15 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-21T15:16:20Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-21T15:16:20Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-21T15:16:20Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:16:20Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-21T15:16:20Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-21T15:16:22Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-21T15:16:22Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-21T15:16:22Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-21T15:16:53Z level=info msg=Command output to stdout:
 False
False
False
True

time=2024-07-21T15:16:53Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-21T15:16:53Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-21T15:16:54Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-21T15:16:54Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-21T15:16:54Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-21T15:16:54Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-21T15:16:54Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-21T15:16:54Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-21T15:16:56Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-21T15:16:56Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-21T15:16:56Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-21T15:16:57Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-21T15:16:57Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-21T15:16:57Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-21T15:16:57Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-21T15:16:57Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-21T15:16:57Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-21T15:16:57Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-21T15:16:57Z level=info msg=Finished executing:
 helm repo update

time=2024-07-21T15:16:57Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-21T15:17:35Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Sun Jul 21 15:16:58 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-21T15:17:35Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-21T15:17:35Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-21T15:17:35Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:17:35Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-21T15:17:35Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-21T15:17:35Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:17:35Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-21T15:17:35Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-21T15:17:35Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:17:35Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-21T15:17:35Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-21T15:17:36Z level=info msg=Command output to stdout:
 20.54.184.162

time=2024-07-21T15:17:36Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-21T15:17:36Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-21T15:17:36Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabelbee9e1.westeurope.cloudapp.azure.com

time=2024-07-21T15:17:36Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-21T15:17:36Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-21T15:17:36Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupbee9e1
time=2024-07-21T15:17:39Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:17:39Z level=info msg=INI file 'scenarios/CreateAKSDeployment/create-aks-deployment.ini' does not exist, skipping...
time=2024-07-21T15:17:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:17:39Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:17:39Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-21T15:17:39Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-21T15:17:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:17:39Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:17:39Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:17:39Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:17:39Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-21T15:17:39Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-21T15:17:39Z level=info msg=Changed directory to .
time=2024-07-21T15:17:39Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-21T15:17:39Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:17:39Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-21T15:17:39Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:17:41Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup61bdd8",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup61bdd8",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:17:41Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-21T15:17:41Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup61bdd8",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup61bdd8",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:17:41Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:17:41Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:17:41Z level=info msg=Found resource group named: myAKSResourceGroup61bdd8
time=2024-07-21T15:17:41Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-21T15:21:22Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-sjja297v.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-sjja297v.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup61bdd8/providers/Microsoft.ContainerService/managedClusters/myAKSCluster61bdd8",
  "identity": {
    "delegatedResources": null,
    "principalId": "b9fc58d9-7844-4183-8b13-cbc98564b305",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "98ca02d3-22ce-47fd-ac73-8d8cd1826397",
      "objectId": "84dc2e99-5215-48df-98fe-a97631b77cde",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup61bdd8_myAKSCluster61bdd8_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster61bdd8-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCVcekqBvqTuHeWHHup7XEDGqdwo4o2TLPzhX1XSCRtjGjUVvzLOXjEnQFEeaGLMWN17Vt7+jnLIQbgcVQCGooBLOBZawkU90k2YexZAji4zIzt2yXLUNo5YzcXSGyTmtINMs/KFJ6vBycINlG008QAL0A8YWgrSJupWaeh0dgVIDgMfKcQYFKsivGJUKjUuF021gFnWcwnR9eO9A9aa1oO4OwTi7cwFscjpa/ACYORw3lgYVmfjkOflvCNLe2iHuuIY2/3GWXu/XcY58xHEIseTV4HCRdIkxMcWLxn4LFisCS7H9aY5Roy2aNZdf9VW5T6cYa5w9BgtQGbYpJb4n1t"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster61bdd8",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup61bdd8_myAKSCluster61bdd8_westeurope/providers/Microsoft.Network/publicIPAddresses/0ad5868c-644b-44c1-9375-7a421152799c",
          "resourceGroup": "MC_myAKSResourceGroup61bdd8_myAKSCluster61bdd8_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup61bdd8_myAKSCluster61bdd8_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup61bdd8",
  "resourceUid": "669d269de812640001b67f02",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-21T15:21:22Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-21T15:21:22Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-21T15:21:24Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:21:24Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-21T15:21:24Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-21T15:21:24Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-31357790-vmss000000   Ready    agent   86s   v1.28.10

time=2024-07-21T15:21:24Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-21T15:21:24Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-21T15:21:24Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-21T15:21:24Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup61bdd8
time=2024-07-21T15:21:27Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:21:27Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-21T15:21:29Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/create-container-app-deployment-from-source.ini' does not exist, skipping...
time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-21T15:21:29Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-21T15:21:29Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-21T15:21:29Z level=info msg=Changed directory to .
time=2024-07-21T15:21:29Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-21T15:21:29Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:21:29Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-21T15:21:29Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-21T15:21:29Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-21T15:21:29Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:21:29Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-21T15:21:30Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:21:30Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:21:30Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-21T15:21:30Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-21T15:21:30Z level=info msg=Changed directory to .
time=2024-07-21T15:21:30Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-21T15:21:30Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:21:30Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-21T15:21:30Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:21:30Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-21T15:21:33Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup711c35",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:21:33Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.748791
time=2024-07-21T15:21:33Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup711c35",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:21:33Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-21T15:21:33Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:21:33Z level=info msg=Found resource group named: myLEMPResourceGroup711c35
time=2024-07-21T15:21:33Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-21T15:21:46Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.104.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9dd68659-9000-4882-97b5-8d54851412a6\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/virtualNetworks/myVNet711c35",
    "location": "westeurope",
    "name": "myVNet711c35",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "06f6b2be-3a20-4bae-866c-81c434a817e1",
    "subnets": [
      {
        "addressPrefix": "10.104.0.0/24",
        "delegations": [],
        "etag": "W/\"9dd68659-9000-4882-97b5-8d54851412a6\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/virtualNetworks/myVNet711c35/subnets/mySN711c35",
        "name": "mySN711c35",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:21:46Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.721003
time=2024-07-21T15:21:46Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.104.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9dd68659-9000-4882-97b5-8d54851412a6\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/virtualNetworks/myVNet711c35",
    "location": "westeurope",
    "name": "myVNet711c35",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "06f6b2be-3a20-4bae-866c-81c434a817e1",
    "subnets": [
      {
        "addressPrefix": "10.104.0.0/24",
        "delegations": [],
        "etag": "W/\"9dd68659-9000-4882-97b5-8d54851412a6\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/virtualNetworks/myVNet711c35/subnets/mySN711c35",
        "name": "mySN711c35",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:21:46Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-21T15:21:46Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-21T15:21:51Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel711c35",
      "fqdn": "mydnslabel711c35.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"c79ca769-046f-49fc-bfa9-264593bd92c0\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/publicIPAddresses/myPublicIP711c35",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "20.54.186.26",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP711c35",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "32285195-b97b-451e-9449-65b6582fef36",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-21T15:21:51Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.755994
time=2024-07-21T15:21:51Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel711c35",
      "fqdn": "mydnslabel711c35.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"c79ca769-046f-49fc-bfa9-264593bd92c0\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/publicIPAddresses/myPublicIP711c35",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "20.54.186.26",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP711c35",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "32285195-b97b-451e-9449-65b6582fef36",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-21T15:21:51Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-21T15:21:51Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-21T15:21:54Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35",
    "location": "westeurope",
    "name": "myNSG711c35",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "8436e762-9f84-4864-8159-3803f9810ca7",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-21T15:21:54Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.566610
time=2024-07-21T15:21:54Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup711c35",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"cc5de825-3565-47ed-bb0d-2472ce9f1764\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35",
    "location": "westeurope",
    "name": "myNSG711c35",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "8436e762-9f84-4864-8159-3803f9810ca7",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-21T15:21:54Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-21T15:21:54Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-21T15:21:56Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"ac4c076a-4fa0-4efb-9572-28c9174b99c7\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/securityRules/Allow-Access711c35",
  "name": "Allow-Access711c35",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup711c35",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-21T15:21:56Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.795505
time=2024-07-21T15:21:56Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"ac4c076a-4fa0-4efb-9572-28c9174b99c7\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35/securityRules/Allow-Access711c35",
  "name": "Allow-Access711c35",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup711c35",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-21T15:21:56Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-21T15:21:56Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-21T15:22:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "x0zpmbrahkxexbtmqhcdjkax2b.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"88462423-e2b2-47d6-ba49-d6f9f0b4a38f\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkInterfaces/myVMNic711c35",
    "ipConfigurations": [
      {
        "etag": "W/\"88462423-e2b2-47d6-ba49-d6f9f0b4a38f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkInterfaces/myVMNic711c35/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.104.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/publicIPAddresses/myPublicIP711c35",
          "resourceGroup": "myLEMPResourceGroup711c35"
        },
        "resourceGroup": "myLEMPResourceGroup711c35",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/virtualNetworks/myVNet711c35/subnets/mySN711c35",
          "resourceGroup": "myLEMPResourceGroup711c35"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic711c35",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35",
      "resourceGroup": "myLEMPResourceGroup711c35"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "3bebb37d-4c44-4abe-844c-b82e1059188a",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-21T15:22:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.705055
time=2024-07-21T15:22:00Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "x0zpmbrahkxexbtmqhcdjkax2b.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"88462423-e2b2-47d6-ba49-d6f9f0b4a38f\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkInterfaces/myVMNic711c35",
    "ipConfigurations": [
      {
        "etag": "W/\"88462423-e2b2-47d6-ba49-d6f9f0b4a38f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkInterfaces/myVMNic711c35/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.104.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/publicIPAddresses/myPublicIP711c35",
          "resourceGroup": "myLEMPResourceGroup711c35"
        },
        "resourceGroup": "myLEMPResourceGroup711c35",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/virtualNetworks/myVNet711c35/subnets/mySN711c35",
          "resourceGroup": "myLEMPResourceGroup711c35"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic711c35",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup711c35/providers/Microsoft.Network/networkSecurityGroups/myNSG711c35",
      "resourceGroup": "myLEMPResourceGroup711c35"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup711c35",
    "resourceGuid": "3bebb37d-4c44-4abe-844c-b82e1059188a",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-21T15:22:00Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-21T15:22:00Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-21T15:22:00Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:22:00Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-21T15:22:00Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-21T15:22:34Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "749d287d-665e-412c-afaa-2286d8347db8",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup711c35/providers/Microsoft.Network/privateDnsZones/mydnslabel711c35.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel711c35.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup711c35",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-21T15:22:34Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.753072
time=2024-07-21T15:22:34Z level=info msg=Command output to stdout:
 {
  "etag": "749d287d-665e-412c-afaa-2286d8347db8",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup711c35/providers/Microsoft.Network/privateDnsZones/mydnslabel711c35.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel711c35.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup711c35",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-21T15:22:34Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-21T15:22:34Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-21T15:22:36Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup711c35'...
WARNING: Resource group 'myLEMPResourceGroup711c35' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-21T15:22:36Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup711c35
time=2024-07-21T15:22:39Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:22:39Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup711c35'...
WARNING: Resource group 'myLEMPResourceGroup711c35' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup711c35'...
WARNING: Resource group 'myLEMPResourceGroup711c35' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-21T15:22:40Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-21T15:22:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:40Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-21T15:22:40Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-21T15:22:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:40Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-21T15:22:40Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-21T15:22:40Z level=info msg=Changed directory to .
time=2024-07-21T15:22:40Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-21T15:22:40Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:22:40Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-21T15:22:40Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:22:41Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupce4911",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupce4911",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:22:41Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.767626
time=2024-07-21T15:22:41Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupce4911",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupce4911",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:22:41Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:22:41Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:22:41Z level=info msg=Found resource group named: myVMResourceGroupce4911
time=2024-07-21T15:22:41Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-21T15:22:44Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_H94l8pNSV3g6qAr9Pbf7g7nD7jAYV0hq' is not valid according to the validation procedure. The tracking id is 'cc368932-3573-4a94-a899-12369abb1f0c'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-21T15:22:44Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupce4911
time=2024-07-21T15:22:45Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:22:45Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_H94l8pNSV3g6qAr9Pbf7g7nD7jAYV0hq' is not valid according to the validation procedure. The tracking id is 'cc368932-3573-4a94-a899-12369abb1f0c'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_H94l8pNSV3g6qAr9Pbf7g7nD7jAYV0hq' is not valid according to the validation procedure. The tracking id is 'cc368932-3573-4a94-a899-12369abb1f0c'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-21T15:22:46Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-21T15:22:46Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:46Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:46Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:46Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:22:46Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:22:46Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:46Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:22:46Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-21T15:22:46Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-21T15:22:46Z level=info msg=Changed directory to .
time=2024-07-21T15:22:46Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-21T15:22:46Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:22:46Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-21T15:22:46Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-21T15:22:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup5402c0",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup5402c0",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:22:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.717730
time=2024-07-21T15:22:47Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup5402c0",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroup5402c0",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:22:47Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-21T15:22:47Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:22:47Z level=info msg=Found resource group named: myStaticWebAppResourceGroup5402c0
time=2024-07-21T15:22:47Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-21T15:22:50Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "ashy-meadow-05aea660f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroup5402c0/providers/Microsoft.Web/staticSites/myStaticWebApp5402c0",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebApp5402c0",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroup5402c0",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-21T15:22:50Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-21T15:22:50Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-21T15:22:51Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:22:51Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-21T15:22:51Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-21T15:22:51Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-21T15:22:51Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-21T15:22:51Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-21T15:22:51Z level=info msg=Command output to stdout:
 You can now visit your web server at https://ashy-meadow-05aea660f.5.azurestaticapps.net

time=2024-07-21T15:22:51Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-21T15:22:51Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-21T15:22:53Z level=info msg=Command output to stdout:
 "ashy-meadow-05aea660f.5.azurestaticapps.net"

time=2024-07-21T15:22:53Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-21T15:22:53Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-21T15:22:53Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroup5402c0
time=2024-07-21T15:22:54Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:22:54Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:22:54Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-21T15:22:54Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-21T15:22:54Z level=info msg=Changed directory to .
time=2024-07-21T15:22:54Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-21T15:22:54Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:22:54Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-21T15:22:54Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-21T15:22:54Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroup0ad44d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:22:54Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.758662
time=2024-07-21T15:22:54Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroup0ad44d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:22:54Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-21T15:22:54Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:22:54Z level=info msg=Found resource group named: myVMSSResourceGroup0ad44d
time=2024-07-21T15:22:54Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-21T15:23:06Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.184.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"86a28a97-6b79-4c69-b698-ddaa575e379a\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d",
    "location": "eastus",
    "name": "myVNet0ad44d",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroup0ad44d",
    "resourceGuid": "21b3a609-89cd-4ecf-b6ff-c643b480896e",
    "subnets": [
      {
        "addressPrefix": "10.184.0.0/24",
        "delegations": [],
        "etag": "W/\"86a28a97-6b79-4c69-b698-ddaa575e379a\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d/subnets/myVMSN0ad44d",
        "name": "myVMSN0ad44d",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:23:06Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.716437
time=2024-07-21T15:23:06Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.184.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"86a28a97-6b79-4c69-b698-ddaa575e379a\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d",
    "location": "eastus",
    "name": "myVNet0ad44d",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroup0ad44d",
    "resourceGuid": "21b3a609-89cd-4ecf-b6ff-c643b480896e",
    "subnets": [
      {
        "addressPrefix": "10.184.0.0/24",
        "delegations": [],
        "etag": "W/\"86a28a97-6b79-4c69-b698-ddaa575e379a\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d/subnets/myVMSN0ad44d",
        "name": "myVMSN0ad44d",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:23:06Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-21T15:23:06Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-21T15:23:18Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.184.1.0/24",
  "delegations": [],
  "etag": "W/\"f5b5c618-7f74-4907-ab19-2ba7430f0927\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d/subnets/myAPPGWSN0ad44d",
  "name": "myAPPGWSN0ad44d",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroup0ad44d",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-21T15:23:18Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.735700
time=2024-07-21T15:23:18Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.184.1.0/24",
  "delegations": [],
  "etag": "W/\"f5b5c618-7f74-4907-ab19-2ba7430f0927\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d/subnets/myAPPGWSN0ad44d",
  "name": "myAPPGWSN0ad44d",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroup0ad44d",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-21T15:23:18Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-21T15:23:18Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-21T15:23:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"fcd1fa99-b180-48ca-aee0-04e3599db333\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIP0ad44d",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.0.145",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIP0ad44d",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroup0ad44d",
    "resourceGuid": "1ef4cccb-8d86-4ee9-9fc5-a29ef63c726e",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-21T15:23:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.745732
time=2024-07-21T15:23:22Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"fcd1fa99-b180-48ca-aee0-04e3599db333\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIP0ad44d",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "135.237.0.145",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIP0ad44d",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroup0ad44d",
    "resourceGuid": "1ef4cccb-8d86-4ee9-9fc5-a29ef63c726e",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-21T15:23:22Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-21T15:23:22Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-21T15:29:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIP0ad44d",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          }
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d/subnets/myAPPGWSN0ad44d",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          }
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "65187f6b-3817-427d-a41c-e0046e5f1fd4",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-21T15:29:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.732702
time=2024-07-21T15:29:26Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIP0ad44d",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          }
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/virtualNetworks/myVNet0ad44d/subnets/myAPPGWSN0ad44d",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          }
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroup0ad44d"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"988c121c-21dc-42e3-9b6f-12be8b46a21c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroup0ad44d/providers/Microsoft.Network/applicationGateways/myAPPGW0ad44d/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroup0ad44d"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroup0ad44d",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "65187f6b-3817-427d-a41c-e0046e5f1fd4",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-21T15:29:26Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-21T15:29:26Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-21T15:29:59Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_ETGwWQCQPMJ9dhWyUedPmung9JHxSc2J' is not valid according to the validation procedure. The tracking id is 'b552d495-ec63-4fd4-8c9a-b741c5ee2aa7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-21T15:29:59Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroup0ad44d
time=2024-07-21T15:30:00Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:30:00Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_ETGwWQCQPMJ9dhWyUedPmung9JHxSc2J' is not valid according to the validation procedure. The tracking id is 'b552d495-ec63-4fd4-8c9a-b741c5ee2aa7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_ETGwWQCQPMJ9dhWyUedPmung9JHxSc2J' is not valid according to the validation procedure. The tracking id is 'b552d495-ec63-4fd4-8c9a-b741c5ee2aa7'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-21T15:30:01Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-21T15:30:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:30:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:30:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:30:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:30:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:30:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:30:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:30:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:30:01Z level=warning msg=The node before the codeblock `export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:30:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:30:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:30:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:30:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:30:01Z level=debug msg=Found 26 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-21T15:30:01Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-21T15:30:01Z level=info msg=Changed directory to .
time=2024-07-21T15:30:01Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-21T15:30:03Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup38a605",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup38a605",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:30:03Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.744600
time=2024-07-21T15:30:03Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup38a605",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup38a605",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:30:03Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-21T15:30:03Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:30:03Z level=info msg=Found resource group named: myWordPressAKSResourceGroup38a605
time=2024-07-21T15:30:03Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-21T15:30:16Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.216.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8780c91a-3e03-4246-93bc-09e5f68b4dd2\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup38a605/providers/Microsoft.Network/virtualNetworks/myVNet38a605",
    "location": "westeurope",
    "name": "myVNet38a605",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup38a605",
    "resourceGuid": "0284cea5-9c25-48c6-8c8f-2ec971d5cda0",
    "subnets": [
      {
        "addressPrefix": "10.216.0.0/22",
        "delegations": [],
        "etag": "W/\"8780c91a-3e03-4246-93bc-09e5f68b4dd2\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup38a605/providers/Microsoft.Network/virtualNetworks/myVNet38a605/subnets/mySN38a605",
        "name": "mySN38a605",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup38a605",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:30:16Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729980
time=2024-07-21T15:30:16Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.216.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8780c91a-3e03-4246-93bc-09e5f68b4dd2\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup38a605/providers/Microsoft.Network/virtualNetworks/myVNet38a605",
    "location": "westeurope",
    "name": "myVNet38a605",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup38a605",
    "resourceGuid": "0284cea5-9c25-48c6-8c8f-2ec971d5cda0",
    "subnets": [
      {
        "addressPrefix": "10.216.0.0/22",
        "delegations": [],
        "etag": "W/\"8780c91a-3e03-4246-93bc-09e5f68b4dd2\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup38a605/providers/Microsoft.Network/virtualNetworks/myVNet38a605/subnets/mySN38a605",
        "name": "mySN38a605",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup38a605",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:30:16Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-21T15:30:16Z level=info msg=Executing command asynchronously:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-21T15:30:16Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin38a605 password is: ohbsFlJWab6dZmK6UES/LHWKiBYWg2e6cHF1U98IpCU=

time=2024-07-21T15:30:16Z level=info msg=Finished executing:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-21T15:30:16Z level=info msg=Executing command asynchronously:
 export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-21T15:30:18Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup38a605'...
WARNING: Resource group 'myWordPressAKSResourceGroup38a605' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-21T15:30:18Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup38a605
time=2024-07-21T15:30:21Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:30:21Z level=error msg=Error testing scenario: failed to execute code block 1 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup38a605'...
WARNING: Resource group 'myWordPressAKSResourceGroup38a605' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup38a605'...
WARNING: Resource group 'myWordPressAKSResourceGroup38a605' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-21T15:30:23Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-21T15:30:23Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-21T15:30:23Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-21T15:30:23Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-21T15:30:23Z level=info msg=Changed directory to .
time=2024-07-21T15:30:23Z level=info msg=Executing command asynchronously:
 
time=2024-07-21T15:30:23Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:30:23Z level=info msg=Finished executing:
 
time=2024-07-21T15:30:23Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-21T15:30:23Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:30:23Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-21T15:30:23Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-21T15:30:23Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-21T15:30:23Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-21T15:30:23Z level=info msg=Changed directory to .
time=2024-07-21T15:30:23Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-21T15:30:23Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:30:23Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-21T15:30:23Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-21T15:30:40Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:30:40Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-21T15:30:40Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:30:40Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-21T15:30:42Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-21T15:30:42Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-21T15:30:42Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-21T15:30:45Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-21T15:30:45Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-21T15:30:45Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:30:45Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-21T15:30:47Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:30:47Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-21T15:30:47Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:30:47Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-21T15:30:47Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-21T15:30:47Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-21T15:30:47Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-21T15:31:12Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-21T15:31:12Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-21T15:31:12Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:31:12Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-21T15:31:13Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:31:13.3496266Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: ea7473c1-37d0-44ac-97c9-03bfbfc84e00 Correlation ID: a533a8cc-346e-4800-a1bc-70fd35733a53 Timestamp: 2024-07-21 15:31:13Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-21T15:31:13Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:31:13Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:31:13.3496266Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: ea7473c1-37d0-44ac-97c9-03bfbfc84e00 Correlation ID: a533a8cc-346e-4800-a1bc-70fd35733a53 Timestamp: 2024-07-21 15:31:13Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:31:13.3496266Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: ea7473c1-37d0-44ac-97c9-03bfbfc84e00 Correlation ID: a533a8cc-346e-4800-a1bc-70fd35733a53 Timestamp: 2024-07-21 15:31:13Z
Interactive authentication is needed. Please run:
az login

time=2024-07-21T15:31:15Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-21T15:31:15Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-21T15:31:15Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:15Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:15Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:15Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:15Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:15Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-21T15:31:15Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-21T15:31:15Z level=info msg=Changed directory to .
time=2024-07-21T15:31:15Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-21T15:31:15Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-r09pzuvq" does not exist
'
time=2024-07-21T15:31:15Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:31:15Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-r09pzuvq" does not exist
'
StdErr: error: context "aks-primary-cnpg-r09pzuvq" does not exist

time=2024-07-21T15:31:16Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-21T15:31:16Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:31:16Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:31:16Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-21T15:31:16Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-21T15:31:16Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:31:16Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:16Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:31:16Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-21T15:31:16Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-21T15:31:16Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-21T15:31:16Z level=info msg=Changed directory to .
time=2024-07-21T15:31:16Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-21T15:31:16Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:31:16Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-21T15:31:16Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:31:18Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupfce930",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupfce930",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:31:18Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.743276
time=2024-07-21T15:31:18Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroupfce930",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroupfce930",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:31:18Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:31:18Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:31:18Z level=info msg=Found resource group named: myAKSResourceGroupfce930
time=2024-07-21T15:31:18Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-21T15:35:01Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "eTag": "0a928289-cb5a-47f1-8ace-1a0fa5d2e312",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-5diszara.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "bea5f0a8-a97c-44c4-8e11-af7bcddf8ed1",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-5diszara.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroupfce930/providers/Microsoft.ContainerService/managedClusters/myAKSClusterfce930",
  "identity": {
    "delegatedResources": null,
    "principalId": "c311b709-10cd-4c72-af3d-f1c3e377aeac",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "9fa8ae48-0af9-4ecb-a810-87c6e12686de",
      "objectId": "a28e50e9-b4f8-4bad-9532-9a4bd1e1637c",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroupfce930_myAKSClusterfce930_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSClusterfce930-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCVcekqBvqTuHeWHHup7XEDGqdwo4o2TLPzhX1XSCRtjGjUVvzLOXjEnQFEeaGLMWN17Vt7+jnLIQbgcVQCGooBLOBZawkU90k2YexZAji4zIzt2yXLUNo5YzcXSGyTmtINMs/KFJ6vBycINlG008QAL0A8YWgrSJupWaeh0dgVIDgMfKcQYFKsivGJUKjUuF021gFnWcwnR9eO9A9aa1oO4OwTi7cwFscjpa/ACYORw3lgYVmfjkOflvCNLe2iHuuIY2/3GWXu/XcY58xHEIseTV4HCRdIkxMcWLxn4LFisCS7H9aY5Roy2aNZdf9VW5T6cYa5w9BgtQGbYpJb4n1t"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSClusterfce930",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroupfce930_myAKSClusterfce930_westeurope/providers/Microsoft.Network/publicIPAddresses/ed213908-81b3-4c1a-85e8-b448e8fdfd13",
          "resourceGroup": "MC_myAKSResourceGroupfce930_myAKSClusterfce930_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroupfce930_myAKSClusterfce930_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroupfce930",
  "resourceUid": "669d29cf62af6200016ffca9",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-21T15:35:01Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-21T15:35:01Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-21T15:35:02Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:35:02Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-21T15:35:02Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-21T15:35:02Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-43347724-vmss000000   Ready    agent   79s   v1.28.10

time=2024-07-21T15:35:02Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-21T15:35:02Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-21T15:35:03Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-21T15:35:03Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroupfce930
time=2024-07-21T15:35:06Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:35:06Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-21T15:35:07Z level=info msg=INI file 'scenarios/AttachDataDiskLinuxVM/attach-data-disk-linux-vm.ini' does not exist, skipping...
time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:35:07Z level=debug msg=Found 14 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-xxxxxx",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-xxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON
 Create an Azure Linux Virtual Machine with a data disk Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d",
  "identity": {
    "systemAssignedIdentity": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "7C-1E-52-22-D8-72",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "xx.xx.xx.xx",
  "resourceGroup": "LinuxRG-a36f5d",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a36f5d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"
 Enable Azure AD Login for a Linux virtual machine in Azure In this scenario the LUN0 our first data disk is going to be formatted and mounted using the command below: {text /dev/sdc: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done
Creating filesystem with 33553920 4k blocks and 8388608 inodes
Filesystem UUID: 1095e29c-07db-47ec-8b19-1ffcaf4f5628
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done
Writing inode tables: done
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk01'
mount: /dev/sdc1 mounted on /datadisk01.
 0.3 <nil>}} {bash ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'
 Enable Azure AD Login for a Linux virtual machine in Azure In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=1095e29c-07db-47ec-8b19-1ffcaf4f5628 /datadisk01 xfs defaults,discard 0 0
 0.3 <nil>}} {bash export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50
 Attach a new disk to a VM If you want to add a new, empty data disk on your VM, use the [az vm disk attach](/cli/azure/vm/disk) command with the `--new` parameter. If your VM is in an Availability Zone, the disk is automatically created in the same zone as the VM. For more information, see [Overview of Availability Zones](../../availability-zones/az-overview.md). The following example creates a disk named *$LUN2_NAME* that is 50 Gb in size: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"
 Attach a new disk to a VM In this second possible scenario the LUN1 is going to be our data disk, the following example shows how to format and mount the data disk. {text /dev/sdd: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done
Creating filesystem with 13106688 4k blocks and 3276800 inodes
Filesystem UUID: 6e8ad233-5664-4f75-8ec6-3aa34f228868
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424

Allocating group tables: done
Writing inode tables: done
Creating journal (65536 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk02'
mount: /dev/sdd1 mounted on /datadisk02.
 0.3 <nil>}} {bash ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'
 Attach a new disk to a VM In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=0b1629d5-0cd5-41fd-9050-b2ed7e3f1028 /datadisk02 xfs defaults,discard 0 0
 0.3 <nil>}} {bash export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON
 Attach an existing data disk to a VM First lets start by creating a new disk: {JSON {
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-e4c4b4/providers/Microsoft.Compute/disks/LUN2-e4c4b4",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "LUN2-e4c4b4",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-e4c4b4",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  }
}
 0.3 <nil>}} {bash LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2
 Attach an existing data disk to a VM Then you can attach the disk to the VM: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"
 Attach an existing data disk to a VM In this third scenario the LUN2 is going to be our data disk, the following example shows how to format and mount the data disk. {text /dev/sde: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Creating filesystem with 33553920 4k blocks and 8388608 inodes
Filesystem UUID: 0e0a110e-7d30-4235-ac4d-8ee59641e7c7
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done
Writing inode tables: done
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk03'
mount: /dev/sde1 mounted on /datadisk03.
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'
 Attach an existing data disk to a VM In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=4b54ed3b-2f5e-4fe7-b0e5-c40da6e3b8a8 /datadisk03 xfs defaults,discard 0 0
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'
 Check all mounted LUNs To verify the mount points, you can use the following command: {text /dev/sdc1 on /datadisk01 type xfs (rw,relatime)
/dev/sdd1 on /datadisk02 type xfs (rw,relatime)
/dev/sde1 on /datadisk03 type xfs (rw,relatime)
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN
 SSH into the VM You can now SSH into the VM by running the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-21T15:35:07Z level=info msg=Successfully built out the scenario: Quickstart: Use the Azure CLI to create an Ubuntu Virtual Machine and attach an Azure Data Disk
time=2024-07-21T15:35:07Z level=info msg=Changed directory to .
time=2024-07-21T15:35:07Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-21T15:35:11Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-xxxxxx",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-xxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-c30c4e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:35:11Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.752435
time=2024-07-21T15:35:11Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-c30c4e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:35:11Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-21T15:35:11Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:35:11Z level=info msg=Found resource group named: LinuxRG-c30c4e
time=2024-07-21T15:35:11Z level=info msg=Executing command asynchronously:
 export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON

time=2024-07-21T15:36:31Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "mydnslabelxxxxxx.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d",
  "identity": {
    "systemAssignedIdentity": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "7C-1E-52-22-D8-72",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "xx.xx.xx.xx",
  "resourceGroup": "LinuxRG-a36f5d",
  "zones": ""
}

Actual{
  "fqdns": "mydnslabelc30c4e.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e/providers/Microsoft.Compute/virtualMachines/myVMc30c4e",
  "identity": {
    "systemAssignedIdentity": "0e8a8e44-8eee-4d7a-bf0e-4bedbe66aca0",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "00-22-48-11-60-56",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.11.9.95",
  "resourceGroup": "LinuxRG-c30c4e",
  "zones": "1"
}

time=2024-07-21T15:36:31Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.741896
time=2024-07-21T15:36:31Z level=info msg=Command output to stdout:
 {
  "fqdns": "mydnslabelc30c4e.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e/providers/Microsoft.Compute/virtualMachines/myVMc30c4e",
  "identity": {
    "systemAssignedIdentity": "0e8a8e44-8eee-4d7a-bf0e-4bedbe66aca0",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "00-22-48-11-60-56",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.11.9.95",
  "resourceGroup": "LinuxRG-c30c4e",
  "zones": "1"
}

time=2024-07-21T15:36:31Z level=info msg=Finished executing:
 export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON

time=2024-07-21T15:36:31Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON

time=2024-07-21T15:37:08Z level=debug msg=Comparing JSON strings:
Expected: {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a36f5d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

Actual{
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e/providers/Microsoft.Compute/virtualMachines/myVMc30c4e/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-c30c4e",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-21T15:37:08Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.831875
time=2024-07-21T15:37:08Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e/providers/Microsoft.Compute/virtualMachines/myVMc30c4e/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-c30c4e",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-21T15:37:08Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON

time=2024-07-21T15:37:08Z level=info msg=Executing command asynchronously:
 export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"

time=2024-07-21T15:37:24Z level=info msg=Command output to stdout:
 /dev/sdc: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun0-part1 isize=512    agcount=4, agsize=8388480 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=33553920, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
mkdir: created directory '/datadisk01'
mount: /dev/sdc1 mounted on /datadisk01.

time=2024-07-21T15:37:24Z level=info msg=Finished executing:
 export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"

time=2024-07-21T15:37:24Z level=info msg=Executing command asynchronously:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'

time=2024-07-21T15:37:27Z level=info msg=Command output to stdout:
 UUID=88ebf78e-c7b4-4031-bcd6-1e4a8a219636 /datadisk01 xfs defaults,discard 0 0

time=2024-07-21T15:37:27Z level=info msg=Finished executing:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'

time=2024-07-21T15:37:27Z level=info msg=Executing command asynchronously:
 export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50

time=2024-07-21T15:37:40Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:37:40Z level=info msg=Finished executing:
 export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50

time=2024-07-21T15:37:40Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"

time=2024-07-21T15:37:54Z level=info msg=Command output to stdout:
 /dev/sdd: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun1-part1 isize=512    agcount=4, agsize=3276672 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=13106688, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
mkdir: created directory '/datadisk02'
mount: /dev/sdd1 mounted on /datadisk02.

time=2024-07-21T15:37:54Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"

time=2024-07-21T15:37:54Z level=info msg=Executing command asynchronously:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-21T15:37:57Z level=info msg=Command output to stdout:
 UUID=fd5fe7ef-4078-4ac7-b5e8-2decfa8c50f9 /datadisk02 xfs defaults,discard 0 0

time=2024-07-21T15:37:57Z level=info msg=Finished executing:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-21T15:37:57Z level=info msg=Executing command asynchronously:
 export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON

time=2024-07-21T15:38:12Z level=debug msg=Comparing JSON strings:
Expected: {
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-e4c4b4/providers/Microsoft.Compute/disks/LUN2-e4c4b4",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "LUN2-e4c4b4",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-e4c4b4",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  }
}

Actual{
  "burstingEnabled": null,
  "burstingEnabledTime": null,
  "completionPercent": null,
  "creationData": {
    "createOption": "Empty",
    "elasticSanResourceId": null,
    "galleryImageReference": null,
    "imageReference": null,
    "logicalSectorSize": 4096,
    "performancePlus": null,
    "securityDataUri": null,
    "sourceResourceId": null,
    "sourceUniqueId": null,
    "sourceUri": null,
    "storageAccountId": null,
    "uploadSizeBytes": null
  },
  "dataAccessAuthMode": null,
  "diskAccessId": null,
  "diskIopsReadOnly": 3000,
  "diskIopsReadWrite": 3000,
  "diskMBpsReadOnly": 125,
  "diskMBpsReadWrite": 125,
  "diskSizeBytes": 137438953472,
  "diskSizeGb": 128,
  "diskState": "Unattached",
  "encryption": {
    "diskEncryptionSetId": null,
    "type": "EncryptionAtRestWithPlatformKey"
  },
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e/providers/Microsoft.Compute/disks/PSSDV2-c30c4e",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "PSSDV2-c30c4e",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-c30c4e",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  },
  "supportedCapabilities": null,
  "supportsHibernation": null,
  "tags": {},
  "tier": null,
  "timeCreated": "2024-07-21T15:38:00.351322+00:00",
  "type": "Microsoft.Compute/disks",
  "uniqueId": "500f7d76-7faa-472d-9a0f-02020783ef15",
  "zones": [
    "1"
  ]
}

time=2024-07-21T15:38:12Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.624246
time=2024-07-21T15:38:12Z level=info msg=Command output to stdout:
 {
  "burstingEnabled": null,
  "burstingEnabledTime": null,
  "completionPercent": null,
  "creationData": {
    "createOption": "Empty",
    "elasticSanResourceId": null,
    "galleryImageReference": null,
    "imageReference": null,
    "logicalSectorSize": 4096,
    "performancePlus": null,
    "securityDataUri": null,
    "sourceResourceId": null,
    "sourceUniqueId": null,
    "sourceUri": null,
    "storageAccountId": null,
    "uploadSizeBytes": null
  },
  "dataAccessAuthMode": null,
  "diskAccessId": null,
  "diskIopsReadOnly": 3000,
  "diskIopsReadWrite": 3000,
  "diskMBpsReadOnly": 125,
  "diskMBpsReadWrite": 125,
  "diskSizeBytes": 137438953472,
  "diskSizeGb": 128,
  "diskState": "Unattached",
  "encryption": {
    "diskEncryptionSetId": null,
    "type": "EncryptionAtRestWithPlatformKey"
  },
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-c30c4e/providers/Microsoft.Compute/disks/PSSDV2-c30c4e",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "PSSDV2-c30c4e",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-c30c4e",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  },
  "supportedCapabilities": null,
  "supportsHibernation": null,
  "tags": {},
  "tier": null,
  "timeCreated": "2024-07-21T15:38:00.351322+00:00",
  "type": "Microsoft.Compute/disks",
  "uniqueId": "500f7d76-7faa-472d-9a0f-02020783ef15",
  "zones": [
    "1"
  ]
}

time=2024-07-21T15:38:12Z level=info msg=Finished executing:
 export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON

time=2024-07-21T15:38:12Z level=info msg=Executing command asynchronously:
 LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2

time=2024-07-21T15:38:23Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:38:23Z level=info msg=Finished executing:
 LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2

time=2024-07-21T15:38:23Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"

time=2024-07-21T15:38:37Z level=info msg=Command output to stdout:
 /dev/sde: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun2-part1 isize=512    agcount=4, agsize=8388480 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=33553920, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
mkdir: created directory '/datadisk03'
mount: /dev/sde1 mounted on /datadisk03.

time=2024-07-21T15:38:37Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"

time=2024-07-21T15:38:37Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-21T15:38:39Z level=info msg=Command output to stdout:
 UUID=b3f7c793-d59d-40b5-8a72-ff57fb291ea6 /datadisk03 xfs defaults,discard 0 0

time=2024-07-21T15:38:39Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-21T15:38:39Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'

time=2024-07-21T15:38:42Z level=info msg=Command output to stdout:
 /dev/sdc1 on /datadisk01 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)
/dev/sdd1 on /datadisk02 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)
/dev/sde1 on /datadisk03 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)

time=2024-07-21T15:38:42Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'

time=2024-07-21T15:38:42Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN

time=2024-07-21T15:38:45Z level=info msg=Command output to stdout:
 Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-1010-azure x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sun Jul 21 15:38:25 UTC 2024

  System load:  0.7               Processes:             166
  Usage of /:   5.7% of 28.02GB   Users logged in:       0
  Memory usage: 4%                IPv4 address for eth0: 10.0.0.4
  Swap usage:   0%


Expanded Security Maintenance for Applications is not enabled.

3 updates can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status



time=2024-07-21T15:38:45Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN

time=2024-07-21T15:38:45Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-21T15:38:45Z level=info msg=Attempting to delete the deployed resource group with the name: LinuxRG-c30c4e
time=2024-07-21T15:38:49Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:38:49Z level=info msg=INI file 'scenarios/DeployIGonAKS/deploy-ig-aks.ini' does not exist, skipping...
time=2024-07-21T15:38:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:38:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-21T15:38:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-21T15:38:49Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-21T15:38:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:38:49Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-21T15:38:49Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-21T15:38:49Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-21T15:38:49Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-21T15:38:49Z level=info msg=Changed directory to .
time=2024-07-21T15:38:49Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-21T15:38:49Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:38:49Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-21T15:38:49Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:38:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup271aa2",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup271aa2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:38:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.786542
time=2024-07-21T15:38:50Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup271aa2",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup271aa2",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:38:50Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-21T15:38:50Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:38:50Z level=info msg=Found resource group named: myResourceGroup271aa2
time=2024-07-21T15:38:50Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-21T15:39:01Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster271aa2 in resource group MC_myResourceGroup271aa2_myAKSCluster271aa2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster271aa2 in resource group MC_myResourceGroup271aa2_myAKSCluster271aa2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-21T15:39:01Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup271aa2
time=2024-07-21T15:39:02Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:39:02Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster271aa2 in resource group MC_myResourceGroup271aa2_myAKSCluster271aa2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster271aa2 in resource group MC_myResourceGroup271aa2_myAKSCluster271aa2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster271aa2 in resource group MC_myResourceGroup271aa2_myAKSCluster271aa2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster271aa2 in resource group MC_myResourceGroup271aa2_myAKSCluster271aa2_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-21T15:39:03Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/blob-vision-aks.ini' does not exist, skipping...
time=2024-07-21T15:39:03Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-21T15:39:03Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-21T15:39:03Z level=info msg=Changed directory to .
time=2024-07-21T15:39:03Z level=info msg=Executing command asynchronously:
 
time=2024-07-21T15:39:03Z level=info msg=Command output to stdout:
 
time=2024-07-21T15:39:03Z level=info msg=Finished executing:
 
time=2024-07-21T15:39:03Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-21T15:39:03Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:39:03Z level=info msg=INI file 'scenarios/DeployHAPGonARO/deploy-ha-pg-aro.ini' does not exist, skipping...
time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-21T15:39:03Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-21T15:39:03Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-21T15:39:03Z level=info msg=Changed directory to .
time=2024-07-21T15:39:03Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-21T15:39:05Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:39:05Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-21T15:39:05Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-21T15:39:05Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-21T15:39:05Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-21T15:39:05Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-21T15:39:05Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-21T15:39:18Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"c7fcbf8e-51e9-46b3-b1ab-c4fc8c56e855\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "83d2dbfc-f941-4068-9338-533a9b3860dc",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:39:18Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.714426
time=2024-07-21T15:39:18Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"c7fcbf8e-51e9-46b3-b1ab-c4fc8c56e855\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "83d2dbfc-f941-4068-9338-533a9b3860dc",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-21T15:39:18Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-21T15:39:18Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-21T15:39:20Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"e08d61bc-1a59-45d3-8b92-7488625582fb\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-21T15:39:20Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.727668
time=2024-07-21T15:39:20Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"e08d61bc-1a59-45d3-8b92-7488625582fb\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-21T15:39:20Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-21T15:39:20Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-21T15:39:33Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"a2caa9a9-6b21-4486-8876-2ddfa49f5ce8\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-21T15:39:33Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728469
time=2024-07-21T15:39:33Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"a2caa9a9-6b21-4486-8876-2ddfa49f5ce8\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-21T15:39:33Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-21T15:39:33Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-21T15:39:57Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-21T15:39:35.766085+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableExtendedGroups": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-21T15:39:35.891087+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-21T15:39:35.891087+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-21T15:39:35.875498+00:00",
    "key2": "2024-07-21T15:39:35.875498+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-21T15:39:57Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-21T15:39:57Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-21T15:40:02Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:39:59.5250904Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 6aa4bbb9-0612-43e8-9d7c-e74a7d5b3c00 Correlation ID: 5c4df50c-e2b0-41a4-bf48-049cc2444cdd Timestamp: 2024-07-21 15:39:59Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:40:00.7154199Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 15ed7a73-da63-41f0-bd45-e39c45fa7000 Correlation ID: 9cfed55a-9428-496c-9073-7d8bf5ac5c13 Timestamp: 2024-07-21 15:40:00Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:40:01.8278657Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e2672a21-080f-47c1-86e7-4d9ad2ee4a00 Correlation ID: 10b5a7b0-cc15-4d20-8992-84101675d5b3 Timestamp: 2024-07-21 15:40:01Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-21T15:40:02Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-21T15:40:04Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-21T15:40:04Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:39:59.5250904Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 6aa4bbb9-0612-43e8-9d7c-e74a7d5b3c00 Correlation ID: 5c4df50c-e2b0-41a4-bf48-049cc2444cdd Timestamp: 2024-07-21 15:39:59Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:40:00.7154199Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 15ed7a73-da63-41f0-bd45-e39c45fa7000 Correlation ID: 9cfed55a-9428-496c-9073-7d8bf5ac5c13 Timestamp: 2024-07-21 15:40:00Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:40:01.8278657Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e2672a21-080f-47c1-86e7-4d9ad2ee4a00 Correlation ID: 10b5a7b0-cc15-4d20-8992-84101675d5b3 Timestamp: 2024-07-21 15:40:01Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:39:59.5250904Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 6aa4bbb9-0612-43e8-9d7c-e74a7d5b3c00 Correlation ID: 5c4df50c-e2b0-41a4-bf48-049cc2444cdd Timestamp: 2024-07-21 15:39:59Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:40:00.7154199Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 15ed7a73-da63-41f0-bd45-e39c45fa7000 Correlation ID: 9cfed55a-9428-496c-9073-7d8bf5ac5c13 Timestamp: 2024-07-21 15:40:00Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-21T15:40:01.8278657Z, assertion valid from 2024-07-21T15:05:33.0000000Z, expiry time of assertion 2024-07-21T15:10:33.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e2672a21-080f-47c1-86e7-4d9ad2ee4a00 Correlation ID: 10b5a7b0-cc15-4d20-8992-84101675d5b3 Timestamp: 2024-07-21 15:40:01Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

time=2024-07-22T15:06:48Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/create-rhel-vm-ssh.ini' does not exist, skipping...
time=2024-07-22T15:06:48Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:06:48Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:06:48Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-22T15:06:48Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-22T15:06:48Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:06:48Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:06:48Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-22T15:06:48Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-22T15:06:48Z level=info msg=Changed directory to .
time=2024-07-22T15:06:48Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-22T15:06:48Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:06:48Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-22T15:06:48Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:06:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup3ec08d",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup3ec08d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:06:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764887
time=2024-07-22T15:06:52Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup3ec08d",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup3ec08d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:06:52Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:06:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:06:52Z level=info msg=Found resource group named: myVMResourceGroup3ec08d
time=2024-07-22T15:06:52Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-22T15:07:42Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup3ec08d/providers/Microsoft.Compute/virtualMachines/myVM3ec08d",
  "identity": {
    "systemAssignedIdentity": "85ea9ce6-d648-40ca-b1bb-c74501f6cead",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-47-1F-C3",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.80.51.191",
  "resourceGroup": "myVMResourceGroup3ec08d",
  "zones": ""
}

time=2024-07-22T15:07:42Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.715161
time=2024-07-22T15:07:42Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup3ec08d/providers/Microsoft.Compute/virtualMachines/myVM3ec08d",
  "identity": {
    "systemAssignedIdentity": "85ea9ce6-d648-40ca-b1bb-c74501f6cead",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-47-1F-C3",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.80.51.191",
  "resourceGroup": "myVMResourceGroup3ec08d",
  "zones": ""
}

time=2024-07-22T15:07:42Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-22T15:07:42Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-22T15:10:20Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup3ec08d/providers/Microsoft.Compute/virtualMachines/myVM3ec08d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup3ec08d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-22T15:10:20Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-22T15:10:20Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-22T15:10:22Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:10:22Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-22T15:10:22Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-22T15:10:25Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-22T15:10:25Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-22T15:10:25Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-22T15:10:25Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup3ec08d
time=2024-07-22T15:10:29Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:10:29Z level=info msg=INI file 'scenarios/CreateAKSWebApp/create-aks-web-app.ini' does not exist, skipping...
time=2024-07-22T15:10:29Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:10:29Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:10:29Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:10:29Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-22T15:10:29Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-22T15:10:29Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:10:29Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:10:29Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-22T15:10:29Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:10:29Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:10:29Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:10:29Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:10:29Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-22T15:10:29Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-22T15:10:29Z level=info msg=Changed directory to .
time=2024-07-22T15:10:29Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-22T15:10:29Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:10:29Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-22T15:10:29Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:10:29Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:10:32Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup3aa072",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:10:32Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-22T15:10:32Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup3aa072",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:10:32Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:10:32Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:10:32Z level=info msg=Found resource group named: myAKSResourceGroup3aa072
time=2024-07-22T15:10:32Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-22T15:10:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.211.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8f5dce42-78f1-4bcb-934d-56295458bd4f\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072/providers/Microsoft.Network/virtualNetworks/myVNet3aa072",
    "location": "westeurope",
    "name": "myVNet3aa072",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup3aa072",
    "resourceGuid": "aa2eccd8-a4c9-4da2-83fa-33ec5ea0f387",
    "subnets": [
      {
        "addressPrefix": "10.211.0.0/22",
        "delegations": [],
        "etag": "W/\"8f5dce42-78f1-4bcb-934d-56295458bd4f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072/providers/Microsoft.Network/virtualNetworks/myVNet3aa072/subnets/mySN3aa072",
        "name": "mySN3aa072",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup3aa072",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:10:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.713473
time=2024-07-22T15:10:47Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.211.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"8f5dce42-78f1-4bcb-934d-56295458bd4f\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072/providers/Microsoft.Network/virtualNetworks/myVNet3aa072",
    "location": "westeurope",
    "name": "myVNet3aa072",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup3aa072",
    "resourceGuid": "aa2eccd8-a4c9-4da2-83fa-33ec5ea0f387",
    "subnets": [
      {
        "addressPrefix": "10.211.0.0/22",
        "delegations": [],
        "etag": "W/\"8f5dce42-78f1-4bcb-934d-56295458bd4f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072/providers/Microsoft.Network/virtualNetworks/myVNet3aa072/subnets/mySN3aa072",
        "name": "mySN3aa072",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup3aa072",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:10:47Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-22T15:10:47Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-22T15:10:57Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:10:57Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-22T15:10:57Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-22T15:15:05Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup3aa072/providers/Microsoft.Network/virtualNetworks/myVNet3aa072/subnets/mySN3aa072",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-t3jurn30.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-t3jurn30.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup3aa072/providers/Microsoft.ContainerService/managedClusters/myAKSCluster3aa072",
  "identity": {
    "delegatedResources": null,
    "principalId": "645c46c6-e1bc-46d2-975f-a5e7b0e59a7b",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "e976094a-59f7-464d-83c2-a3680b2f68e6",
      "objectId": "312da18d-ebb4-4aa5-9605-1ce9957d10f3",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup3aa072_myAKSCluster3aa072_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster3aa072-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster3aa072",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup3aa072_myAKSCluster3aa072_westeurope/providers/Microsoft.Network/publicIPAddresses/2a4e5830-0a43-4a02-91f3-bd8037357658",
          "resourceGroup": "MC_myAKSResourceGroup3aa072_myAKSCluster3aa072_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup3aa072_myAKSCluster3aa072_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup3aa072",
  "resourceUid": "669e769cdf0b140001e36044",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-22T15:15:05Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-22T15:15:05Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-22T15:15:05Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:15:05Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-22T15:15:05Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-22T15:15:06Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:15:06Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-22T15:15:06Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-22T15:15:10Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-39282401-vmss000000   Ready    agent   100s   v1.28.10

time=2024-07-22T15:15:10Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-22T15:15:10Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-22T15:16:30Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Mon Jul 22 15:15:21 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-22T15:16:30Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-22T15:16:30Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-22T15:16:30Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:16:30Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-22T15:16:30Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-22T15:16:32Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-22T15:16:32Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-22T15:16:32Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-22T15:17:04Z level=info msg=Command output to stdout:
 False
False
False
True

time=2024-07-22T15:17:04Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-22T15:17:04Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-22T15:17:05Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-22T15:17:05Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-22T15:17:05Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-22T15:17:06Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-22T15:17:06Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-22T15:17:06Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-22T15:17:10Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-22T15:17:10Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-22T15:17:10Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-22T15:17:10Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-22T15:17:10Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-22T15:17:10Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-22T15:17:11Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-22T15:17:11Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-22T15:17:11Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-22T15:17:11Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-22T15:17:11Z level=info msg=Finished executing:
 helm repo update

time=2024-07-22T15:17:11Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-22T15:17:45Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Mon Jul 22 15:17:12 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-22T15:17:45Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-22T15:17:45Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-22T15:17:45Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:17:45Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-22T15:17:45Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-22T15:17:45Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:17:45Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-22T15:17:45Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-22T15:17:45Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:17:45Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-22T15:17:45Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-22T15:17:45Z level=info msg=Command output to stdout:
 172.211.218.10

time=2024-07-22T15:17:45Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-22T15:17:45Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-22T15:17:45Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel3aa072.westeurope.cloudapp.azure.com

time=2024-07-22T15:17:45Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-22T15:17:45Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-22T15:17:45Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup3aa072
time=2024-07-22T15:17:50Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:17:50Z level=info msg=INI file 'scenarios/CreateAKSDeployment/create-aks-deployment.ini' does not exist, skipping...
time=2024-07-22T15:17:50Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:17:50Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:17:50Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-22T15:17:50Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-22T15:17:50Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:17:50Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:17:50Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:17:50Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:17:50Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-22T15:17:50Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-22T15:17:50Z level=info msg=Changed directory to .
time=2024-07-22T15:17:50Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-22T15:17:50Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:17:50Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-22T15:17:50Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:17:53Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup6c4585",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup6c4585",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:17:53Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-22T15:17:53Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup6c4585",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup6c4585",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:17:53Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:17:53Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:17:53Z level=info msg=Found resource group named: myAKSResourceGroup6c4585
time=2024-07-22T15:17:53Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-22T15:21:39Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-btrsc7xi.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-btrsc7xi.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup6c4585/providers/Microsoft.ContainerService/managedClusters/myAKSCluster6c4585",
  "identity": {
    "delegatedResources": null,
    "principalId": "6b6b50dc-43fc-48da-9e7a-35881441b01c",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "1de98737-852e-4a85-9f7d-c95400932c5a",
      "objectId": "636d43d4-ecd7-4f25-b230-37127c7babaa",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup6c4585_myAKSCluster6c4585_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster6c4585-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcJodcCiFFPfbKPKsZN6VLx7VunQWPlDV4uUd5g56lYaJgj82nousjWgPHxk7Rs9QoWl/5OWwprvdhPPavYxkSYSlsC+J0hrnZHZX/n2PxO19KxwIk0PVWK7gUvQjPEl50KJpqY8iJJoZ7VGkIJCpAArRJLjT1ov5Hrw17D9FiPVtlgKblljppNplH09JyUiliTj45v1Uj3LZ/6PXshszHcp+TVimPPZI/DTU5Gs2sccLpfvv7K9BqoxyAkK3C5L815aeQSmzt3kzjdTvsg2Y8oaR2ZR6CReG4rIJkKiq9De/ad+vJg783RFpOYaqJtSnRQVhtU1ksG+QVNO4w3RvR"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster6c4585",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup6c4585_myAKSCluster6c4585_westeurope/providers/Microsoft.Network/publicIPAddresses/6791fa4e-22c4-42af-a8a4-8130652549e9",
          "resourceGroup": "MC_myAKSResourceGroup6c4585_myAKSCluster6c4585_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup6c4585_myAKSCluster6c4585_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup6c4585",
  "resourceUid": "669e782a05c5e700016283a2",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-22T15:21:39Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-22T15:21:39Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-22T15:21:43Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:21:43Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-22T15:21:43Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-22T15:21:44Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-40694995-vmss000000   Ready    agent   87s   v1.28.10

time=2024-07-22T15:21:44Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-22T15:21:44Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-22T15:21:44Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-22T15:21:44Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup6c4585
time=2024-07-22T15:21:48Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:21:48Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-22T15:21:49Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/create-container-app-deployment-from-source.ini' does not exist, skipping...
time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-22T15:21:49Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-22T15:21:49Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-22T15:21:49Z level=info msg=Changed directory to .
time=2024-07-22T15:21:49Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-22T15:21:49Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:21:49Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-22T15:21:49Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-22T15:21:50Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-22T15:21:50Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:21:50Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-22T15:21:51Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:21:51Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:21:51Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-22T15:21:51Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-22T15:21:51Z level=info msg=Changed directory to .
time=2024-07-22T15:21:51Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-22T15:21:52Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:21:52Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-22T15:21:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:21:52Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-22T15:21:55Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup3d06a1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:21:55Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750234
time=2024-07-22T15:21:55Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup3d06a1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:21:55Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-22T15:21:55Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:21:55Z level=info msg=Found resource group named: myLEMPResourceGroup3d06a1
time=2024-07-22T15:21:55Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-22T15:22:10Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.25.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"524f2dd1-b511-459c-86ee-d36a831f05aa\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/virtualNetworks/myVNet3d06a1",
    "location": "westeurope",
    "name": "myVNet3d06a1",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "949e9869-49e9-4a53-9ddf-a3ee2e3b838f",
    "subnets": [
      {
        "addressPrefix": "10.25.0.0/24",
        "delegations": [],
        "etag": "W/\"524f2dd1-b511-459c-86ee-d36a831f05aa\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/virtualNetworks/myVNet3d06a1/subnets/mySN3d06a1",
        "name": "mySN3d06a1",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:22:10Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.721461
time=2024-07-22T15:22:10Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.25.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"524f2dd1-b511-459c-86ee-d36a831f05aa\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/virtualNetworks/myVNet3d06a1",
    "location": "westeurope",
    "name": "myVNet3d06a1",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "949e9869-49e9-4a53-9ddf-a3ee2e3b838f",
    "subnets": [
      {
        "addressPrefix": "10.25.0.0/24",
        "delegations": [],
        "etag": "W/\"524f2dd1-b511-459c-86ee-d36a831f05aa\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/virtualNetworks/myVNet3d06a1/subnets/mySN3d06a1",
        "name": "mySN3d06a1",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:22:10Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-22T15:22:10Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-22T15:22:16Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel3d06a1",
      "fqdn": "mydnslabel3d06a1.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"a759719b-a4fd-4756-a557-d209d3afb243\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/publicIPAddresses/myPublicIP3d06a1",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.211.223.58",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP3d06a1",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "30fafe9b-4edf-4300-921c-5f098b1840e5",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-22T15:22:16Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.752122
time=2024-07-22T15:22:16Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel3d06a1",
      "fqdn": "mydnslabel3d06a1.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"a759719b-a4fd-4756-a557-d209d3afb243\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/publicIPAddresses/myPublicIP3d06a1",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.211.223.58",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP3d06a1",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "30fafe9b-4edf-4300-921c-5f098b1840e5",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-22T15:22:16Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-22T15:22:16Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-22T15:22:21Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1",
    "location": "westeurope",
    "name": "myNSG3d06a1",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "5c09c139-1d72-4323-aa8f-4ae960769b51",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-22T15:22:21Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.565357
time=2024-07-22T15:22:21Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"bad7a323-7ed9-4fbe-89d6-1517a6b4b180\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1",
    "location": "westeurope",
    "name": "myNSG3d06a1",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "5c09c139-1d72-4323-aa8f-4ae960769b51",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-22T15:22:21Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-22T15:22:21Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-22T15:22:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"5c19abba-c329-4c0e-b66e-f94f290aaf04\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/securityRules/Allow-Access3d06a1",
  "name": "Allow-Access3d06a1",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup3d06a1",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-22T15:22:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.796662
time=2024-07-22T15:22:24Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"5c19abba-c329-4c0e-b66e-f94f290aaf04\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1/securityRules/Allow-Access3d06a1",
  "name": "Allow-Access3d06a1",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup3d06a1",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-22T15:22:24Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-22T15:22:24Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-22T15:22:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "ngmj3fhjjfjuvho5upxc2o2drh.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"ab8bac8f-2f88-4d79-911f-3019e0a48395\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkInterfaces/myVMNic3d06a1",
    "ipConfigurations": [
      {
        "etag": "W/\"ab8bac8f-2f88-4d79-911f-3019e0a48395\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkInterfaces/myVMNic3d06a1/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.25.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/publicIPAddresses/myPublicIP3d06a1",
          "resourceGroup": "myLEMPResourceGroup3d06a1"
        },
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/virtualNetworks/myVNet3d06a1/subnets/mySN3d06a1",
          "resourceGroup": "myLEMPResourceGroup3d06a1"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic3d06a1",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1",
      "resourceGroup": "myLEMPResourceGroup3d06a1"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "5300a775-4643-4d56-8e42-c5ac51fcce99",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-22T15:22:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.703010
time=2024-07-22T15:22:26Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "ngmj3fhjjfjuvho5upxc2o2drh.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"ab8bac8f-2f88-4d79-911f-3019e0a48395\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkInterfaces/myVMNic3d06a1",
    "ipConfigurations": [
      {
        "etag": "W/\"ab8bac8f-2f88-4d79-911f-3019e0a48395\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkInterfaces/myVMNic3d06a1/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.25.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/publicIPAddresses/myPublicIP3d06a1",
          "resourceGroup": "myLEMPResourceGroup3d06a1"
        },
        "resourceGroup": "myLEMPResourceGroup3d06a1",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/virtualNetworks/myVNet3d06a1/subnets/mySN3d06a1",
          "resourceGroup": "myLEMPResourceGroup3d06a1"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic3d06a1",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup3d06a1/providers/Microsoft.Network/networkSecurityGroups/myNSG3d06a1",
      "resourceGroup": "myLEMPResourceGroup3d06a1"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup3d06a1",
    "resourceGuid": "5300a775-4643-4d56-8e42-c5ac51fcce99",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-22T15:22:26Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-22T15:22:26Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-22T15:22:26Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:22:26Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-22T15:22:26Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-22T15:23:02Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "387b2ff6-0734-4911-8a6f-1ef538f92930",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup3d06a1/providers/Microsoft.Network/privateDnsZones/mydnslabel3d06a1.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel3d06a1.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup3d06a1",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-22T15:23:02Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.753072
time=2024-07-22T15:23:02Z level=info msg=Command output to stdout:
 {
  "etag": "387b2ff6-0734-4911-8a6f-1ef538f92930",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup3d06a1/providers/Microsoft.Network/privateDnsZones/mydnslabel3d06a1.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel3d06a1.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup3d06a1",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-22T15:23:02Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-22T15:23:02Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-22T15:23:06Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup3d06a1'...
WARNING: Resource group 'myLEMPResourceGroup3d06a1' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-22T15:23:06Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup3d06a1
time=2024-07-22T15:23:13Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:23:13Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup3d06a1'...
WARNING: Resource group 'myLEMPResourceGroup3d06a1' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup3d06a1'...
WARNING: Resource group 'myLEMPResourceGroup3d06a1' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-22T15:23:14Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-22T15:23:14Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:14Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:14Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-22T15:23:14Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-22T15:23:14Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:14Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:14Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-22T15:23:14Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-22T15:23:14Z level=info msg=Changed directory to .
time=2024-07-22T15:23:14Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-22T15:23:14Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:23:14Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-22T15:23:14Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:23:16Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup53f171",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup53f171",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:23:16Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.766164
time=2024-07-22T15:23:16Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup53f171",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup53f171",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:23:16Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:23:16Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:23:16Z level=info msg=Found resource group named: myVMResourceGroup53f171
time=2024-07-22T15:23:16Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-22T15:23:22Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_Ql46o57GBPmAvwUi3gNw05on37Z9oM93' is not valid according to the validation procedure. The tracking id is 'e2579d5f-9a0b-46af-b51c-348b971e5aaf'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-22T15:23:22Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup53f171
time=2024-07-22T15:23:23Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:23:23Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_Ql46o57GBPmAvwUi3gNw05on37Z9oM93' is not valid according to the validation procedure. The tracking id is 'e2579d5f-9a0b-46af-b51c-348b971e5aaf'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_Ql46o57GBPmAvwUi3gNw05on37Z9oM93' is not valid according to the validation procedure. The tracking id is 'e2579d5f-9a0b-46af-b51c-348b971e5aaf'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-22T15:23:25Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-22T15:23:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:25Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:25Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:23:25Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:23:25Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:25Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:23:25Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-22T15:23:25Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-22T15:23:25Z level=info msg=Changed directory to .
time=2024-07-22T15:23:25Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-22T15:23:25Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:23:25Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-22T15:23:25Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-22T15:23:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupd58087",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupd58087",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:23:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.714571
time=2024-07-22T15:23:27Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupd58087",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupd58087",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:23:27Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-22T15:23:27Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:23:27Z level=info msg=Found resource group named: myStaticWebAppResourceGroupd58087
time=2024-07-22T15:23:27Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-22T15:23:32Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "brave-smoke-0857a760f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupd58087/providers/Microsoft.Web/staticSites/myStaticWebAppd58087",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebAppd58087",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroupd58087",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-22T15:23:32Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-22T15:23:32Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-22T15:23:34Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:23:34Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-22T15:23:34Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-22T15:23:34Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-22T15:23:34Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-22T15:23:34Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-22T15:23:34Z level=info msg=Command output to stdout:
 You can now visit your web server at https://brave-smoke-0857a760f.5.azurestaticapps.net

time=2024-07-22T15:23:34Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-22T15:23:34Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-22T15:23:38Z level=info msg=Command output to stdout:
 "brave-smoke-0857a760f.5.azurestaticapps.net"

time=2024-07-22T15:23:38Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-22T15:23:38Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-22T15:23:38Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroupd58087
time=2024-07-22T15:23:40Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:23:40Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:23:40Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-22T15:23:40Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-22T15:23:40Z level=info msg=Changed directory to .
time=2024-07-22T15:23:40Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-22T15:23:40Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:23:40Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-22T15:23:40Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-22T15:23:42Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupa8ac7e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:23:42Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.758662
time=2024-07-22T15:23:42Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupa8ac7e",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:23:42Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-22T15:23:42Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:23:42Z level=info msg=Found resource group named: myVMSSResourceGroupa8ac7e
time=2024-07-22T15:23:42Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-22T15:23:55Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.149.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"4a5574e4-e6fb-40ec-bbd4-4ed24eb3b6b2\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e",
    "location": "eastus",
    "name": "myVNeta8ac7e",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupa8ac7e",
    "resourceGuid": "bbc2c1e5-e4b5-4ff7-be04-078bed48fad1",
    "subnets": [
      {
        "addressPrefix": "10.149.0.0/24",
        "delegations": [],
        "etag": "W/\"4a5574e4-e6fb-40ec-bbd4-4ed24eb3b6b2\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e/subnets/myVMSNa8ac7e",
        "name": "myVMSNa8ac7e",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:23:55Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.717601
time=2024-07-22T15:23:55Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.149.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"4a5574e4-e6fb-40ec-bbd4-4ed24eb3b6b2\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e",
    "location": "eastus",
    "name": "myVNeta8ac7e",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupa8ac7e",
    "resourceGuid": "bbc2c1e5-e4b5-4ff7-be04-078bed48fad1",
    "subnets": [
      {
        "addressPrefix": "10.149.0.0/24",
        "delegations": [],
        "etag": "W/\"4a5574e4-e6fb-40ec-bbd4-4ed24eb3b6b2\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e/subnets/myVMSNa8ac7e",
        "name": "myVMSNa8ac7e",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:23:55Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-22T15:23:55Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-22T15:24:07Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.149.1.0/24",
  "delegations": [],
  "etag": "W/\"4fa09dd9-dd30-4904-9067-e9caeaf172ac\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e/subnets/myAPPGWSNa8ac7e",
  "name": "myAPPGWSNa8ac7e",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupa8ac7e",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-22T15:24:07Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729499
time=2024-07-22T15:24:07Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.149.1.0/24",
  "delegations": [],
  "etag": "W/\"4fa09dd9-dd30-4904-9067-e9caeaf172ac\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e/subnets/myAPPGWSNa8ac7e",
  "name": "myAPPGWSNa8ac7e",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupa8ac7e",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-22T15:24:07Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-22T15:24:07Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-22T15:24:12Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"3ae23eca-58aa-4573-853e-f0fc2fd8b622\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPa8ac7e",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "4.156.61.117",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPa8ac7e",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupa8ac7e",
    "resourceGuid": "dd069706-bf26-4fae-a9bc-3e2f47327fe7",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-22T15:24:12Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747810
time=2024-07-22T15:24:12Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"3ae23eca-58aa-4573-853e-f0fc2fd8b622\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPa8ac7e",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "4.156.61.117",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPa8ac7e",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupa8ac7e",
    "resourceGuid": "dd069706-bf26-4fae-a9bc-3e2f47327fe7",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-22T15:24:12Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-22T15:24:12Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-22T15:30:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPa8ac7e",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          }
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e/subnets/myAPPGWSNa8ac7e",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          }
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "75160ae2-6d80-47b0-b532-b39b1460f90e",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-22T15:30:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.732267
time=2024-07-22T15:30:50Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPa8ac7e",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          }
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/virtualNetworks/myVNeta8ac7e/subnets/myAPPGWSNa8ac7e",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          }
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupa8ac7e"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"a27d3dfa-7a6e-42f2-bba4-e0d77c7726c0\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupa8ac7e/providers/Microsoft.Network/applicationGateways/myAPPGWa8ac7e/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupa8ac7e"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupa8ac7e",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "75160ae2-6d80-47b0-b532-b39b1460f90e",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-22T15:30:50Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-22T15:30:50Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-22T15:31:23Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_JAFP5RE212I3epT7saQY5TWlCIXTifYp' is not valid according to the validation procedure. The tracking id is '72f17cca-2a1b-443c-a011-c1c944d8147e'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-22T15:31:23Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupa8ac7e
time=2024-07-22T15:31:26Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:31:26Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_JAFP5RE212I3epT7saQY5TWlCIXTifYp' is not valid according to the validation procedure. The tracking id is '72f17cca-2a1b-443c-a011-c1c944d8147e'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_JAFP5RE212I3epT7saQY5TWlCIXTifYp' is not valid according to the validation procedure. The tracking id is '72f17cca-2a1b-443c-a011-c1c944d8147e'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-22T15:31:27Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-22T15:31:27Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:31:27Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:31:27Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:31:27Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:31:27Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:31:27Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:31:27Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:31:27Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:31:27Z level=warning msg=The node before the codeblock `export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:31:27Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:31:27Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:31:27Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:31:27Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:31:27Z level=debug msg=Found 26 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-22T15:31:27Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-22T15:31:27Z level=info msg=Changed directory to .
time=2024-07-22T15:31:27Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-22T15:31:29Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroupac206d",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroupac206d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:31:29Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751662
time=2024-07-22T15:31:29Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroupac206d",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroupac206d",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:31:29Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-22T15:31:29Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:31:29Z level=info msg=Found resource group named: myWordPressAKSResourceGroupac206d
time=2024-07-22T15:31:29Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-22T15:31:44Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.3.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7941770f-4cc5-4999-b48e-5add4cd7c04b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroupac206d/providers/Microsoft.Network/virtualNetworks/myVNetac206d",
    "location": "westeurope",
    "name": "myVNetac206d",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupac206d",
    "resourceGuid": "43e69405-1b52-4f50-a751-1241068625f5",
    "subnets": [
      {
        "addressPrefix": "10.3.0.0/22",
        "delegations": [],
        "etag": "W/\"7941770f-4cc5-4999-b48e-5add4cd7c04b\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroupac206d/providers/Microsoft.Network/virtualNetworks/myVNetac206d/subnets/mySNac206d",
        "name": "mySNac206d",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupac206d",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:31:44Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729616
time=2024-07-22T15:31:44Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.3.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7941770f-4cc5-4999-b48e-5add4cd7c04b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroupac206d/providers/Microsoft.Network/virtualNetworks/myVNetac206d",
    "location": "westeurope",
    "name": "myVNetac206d",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupac206d",
    "resourceGuid": "43e69405-1b52-4f50-a751-1241068625f5",
    "subnets": [
      {
        "addressPrefix": "10.3.0.0/22",
        "delegations": [],
        "etag": "W/\"7941770f-4cc5-4999-b48e-5add4cd7c04b\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroupac206d/providers/Microsoft.Network/virtualNetworks/myVNetac206d/subnets/mySNac206d",
        "name": "mySNac206d",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupac206d",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:31:44Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_SN_NAME="mySN$RANDOM_ID"
az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-22T15:31:44Z level=info msg=Executing command asynchronously:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-22T15:31:44Z level=info msg=Command output to stdout:
 Your MySQL user dbadminac206d password is: 5bZwzCBiRMaSGT0UwWdnFPwHuWQpFJBElOxQscSJ1io=

time=2024-07-22T15:31:44Z level=info msg=Finished executing:
 export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-22T15:31:44Z level=info msg=Executing command asynchronously:
 export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-22T15:31:46Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroupac206d'...
WARNING: Resource group 'myWordPressAKSResourceGroupac206d' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-22T15:31:46Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroupac206d
time=2024-07-22T15:31:51Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:31:51Z level=error msg=Error testing scenario: failed to execute code block 1 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroupac206d'...
WARNING: Resource group 'myWordPressAKSResourceGroupac206d' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroupac206d'...
WARNING: Resource group 'myWordPressAKSResourceGroupac206d' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-22T15:31:52Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/postgresql-ha-overview.ini' does not exist, skipping...
time=2024-07-22T15:31:52Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-22T15:31:52Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-22T15:31:52Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS with Azure CLI
time=2024-07-22T15:31:52Z level=info msg=Changed directory to .
time=2024-07-22T15:31:52Z level=info msg=Executing command asynchronously:
 
time=2024-07-22T15:31:52Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:31:52Z level=info msg=Finished executing:
 
time=2024-07-22T15:31:52Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-22T15:31:52Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:31:52Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/create-postgresql-ha.ini' does not exist, skipping...
time=2024-07-22T15:31:52Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-22T15:31:52Z level=debug msg=Found 30 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)
 Set environment variables Set the following environment variables for use throughout this guide: {  0 <nil>}} {bash az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false
 Install required extensions The `aks-preview`, `k8s-extension` and `amg` extensions provide more functionality for managing Kubernetes clusters and querying Azure resources. Install these extensions using the following [`az extension add`][az-extension-add] commands: {  0 <nil>}} {bash (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg
 Install required extensions As a prerequisite for utilizing kubectl, it is essential to first install [Krew][install-krew], followed by the installation of the [CNPG plugin][cnpg-plugin]. This will enable the management of the PostgreSQL operator using the subsequent commands. {  0 <nil>}} {bash az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv
 Create a resource group Create a resource group to hold the resources you create in this guide using the [`az group create`][az-group-create] command. {  0 <nil>}} {bash AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)
 Create a user-assigned managed identity Create a user-assigned managed identity using the [`az identity create`][az-identity-create] command. {  0 <nil>}} {bash export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"
 Create a user-assigned managed identity Enable AKS workload identity and generate a service account to use later in this guide using the following commands: {  0 <nil>}} {bash az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv
 Create a storage account in the primary region Create an object storage account to store PostgreSQL backups in the primary region using the [`az storage account create`][az-storage-account-create] command. {  0 <nil>}} {bash az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login
 Create a storage account in the primary region Create the storage container to store the Write Ahead Logs (WAL) and regular PostgreSQL on-demand and scheduled backups using the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash az role assignment list --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID --output table

export USER_ID=$(az ad signed-in-user show --query id --output tsv)

export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

az role assignment create \
    --assignee-object-id $USER_ID \
    --assignee-principal-type User \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --role "Storage Blob Data Owner" \
    --output tsv
 Create a storage account in the primary region [!NOTE]
If you encounter the error message: `The request may be blocked by network rules of storage account. Please check network rule set using 'az storage account show -n accountname --query networkRuleSet'. If you want to change the default action to apply when no rule matches, please use 'az storage account update'`. Please verify user permissions for Azure Blob Storage and, if **necessary**, elevate your role to `Storage Blob Data Owner` using the commands provided below and after retry the [`az storage container create`][az-storage-container-create] command. {  0 <nil>}} {bash export STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID=$(az storage account show \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "id" \
    --output tsv)

echo $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID
 Assign RBAC to storage accounts Get the primary resource ID for the storage account using the [`az storage account show`][az-storage-account-show] command. {  0 <nil>}} {bash az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee-object-id $AKS_UAMI_WORKLOAD_OBJECTID \
    --assignee-principal-type ServicePrincipal \
    --scope $STORAGE_ACCOUNT_PRIMARY_RESOURCE_ID \
    --query "id" \
    --output tsv
 Assign RBAC to storage accounts Assign the "Storage Blob Data Contributor" Azure built-in role to the object ID with the storage account resource ID scope for the UAMI associated with the managed identity for each AKS cluster using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash export GRAFANA_PRIMARY="grafana-${LOCAL_NAME}-${SUFFIX}"

export GRAFANA_RESOURCE_ID=$(az grafana create \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $GRAFANA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --zone-redundancy Enabled \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $GRAFANA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Managed Grafana instance using the [`az grafana create`][az-grafana-create] command. {  0 <nil>}} {bash export AMW_PRIMARY="amw-${LOCAL_NAME}-${SUFFIX}"

export AMW_RESOURCE_ID=$(az monitor account create \
    --name $AMW_PRIMARY \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query "id" \
    --output tsv)

echo $AMW_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor workspace using the [`az monitor account create`][az-monitor-account-create] command. {  0 <nil>}} {bash export ALA_PRIMARY="ala-${LOCAL_NAME}-${SUFFIX}"

export ALA_RESOURCE_ID=$(az monitor log-analytics workspace create \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-name $ALA_PRIMARY \
    --location $PRIMARY_CLUSTER_REGION \
    --query "id" \
    --output tsv)

echo $ALA_RESOURCE_ID
 Set up monitoring infrastructure Create an Azure Monitor Log Analytics workspace using the [`az monitor log-analytics workspace create`][az-monitor-log-analytics-workspace-create] command. {  0 <nil>}} {bash export SYSTEM_NODE_POOL_VMSKU="standard_d2s_v3"
export USER_NODE_POOL_NAME="postgres"
export USER_NODE_POOL_VMSKU="standard_d4s_v3"

az aks create \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --tags $TAGS \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --generate-ssh-keys \
    --node-resource-group $AKS_PRIMARY_MANAGED_RG_NAME \
    --enable-managed-identity \
    --assign-identity $AKS_UAMI_WORKLOAD_RESOURCEID \
    --network-plugin azure \
    --network-plugin-mode overlay \
    --network-dataplane cilium \
    --nodepool-name systempool \
    --enable-oidc-issuer \
    --enable-workload-identity \
    --enable-cluster-autoscaler \
    --min-count 2 \
    --max-count 3 \
    --node-vm-size $SYSTEM_NODE_POOL_VMSKU \
    --enable-azure-monitor-metrics \
    --azure-monitor-workspace-resource-id $AMW_RESOURCE_ID \
    --grafana-resource-id $GRAFANA_RESOURCE_ID \
    --api-server-authorized-ip-ranges $MY_PUBLIC_CLIENT_IP \
    --tier standard \
    --kubernetes-version $AKS_CLUSTER_VERSION \
    --zones 1 2 3 \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. {  0 <nil>}} {bash az aks nodepool add \
    --resource-group $RESOURCE_GROUP_NAME \
    --cluster-name $AKS_PRIMARY_CLUSTER_NAME \
    --name $USER_NODE_POOL_NAME \
    --enable-cluster-autoscaler \
    --min-count 3 \
    --max-count 6 \
    --node-vm-size $USER_NODE_POOL_VMSKU \
    --zones 1 2 3 \
    --labels workload=postgres \
    --output table
 Create the AKS cluster to host the PostgreSQL cluster Add a user node pool to the AKS cluster using the [`az aks nodepool add`][az-aks-node-pool-add] command. {  0 <nil>}} {bash az aks get-credentials \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --output none
 Connect to the AKS cluster and create namespaces Get the AKS cluster credentials using the [`az aks get-credentials`][az-aks-get-credentials] command. {  0 <nil>}} {bash kubectl create namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
kubectl create namespace $PG_SYSTEM_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Connect to the AKS cluster and create namespaces Create the namespace for the CNPG controller manager services, the PostgreSQL cluster, and its related services by using the [`kubectl create namespace`][kubectl-create-namespace] command. {  0 <nil>}} {bash az aks enable-addons \
    --addon monitoring \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --workspace-resource-id $ALA_RESOURCE_ID \
    --output table
 Update the monitoring infrastructure Enable Container insights monitoring on the AKS cluster using the [`az aks enable-addons`][az-aks-enable-addons] command. {  0 <nil>}} {bash kubectl get ds ama-metrics-node \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

kubectl get ds ama-logs \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace=kube-system

az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --query addonProfiles
 Update the monitoring infrastructure Validate that Managed Prometheus is scraping metrics and Container insights is ingesting logs from the AKS cluster by inspecting the DaemonSet using the [`kubectl get`][kubectl-get] command and the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME=$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query nodeResourceGroup \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME
 Create a public static IP for PostgreSQL cluster ingress Get the name of the AKS cluster node resource group using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_NAME="$AKS_PRIMARY_CLUSTER_NAME-pip"

az network public-ip create \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard \
    --zone 1 2 3 \
    --allocation-method static \
    --output table
 Create a public static IP for PostgreSQL cluster ingress Create the public IP address using the [`az network public-ip create`][az-network-public-ip-create] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS=$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query ipAddress \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_PUBLICIP_ADDRESS
 Create a public static IP for PostgreSQL cluster ingress Get the newly created public IP address using the [`az network public-ip show`][az-network-public-ip-show] command. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE=$(az group show --name \
    $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --query id \
    --output tsv)

echo $AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE
 Create a public static IP for PostgreSQL cluster ingress Get the resource ID of the node resource group using the [`az group show`][az-group-show] command. {  0 <nil>}} {bash az role assignment create \
    --assignee-object-id ${AKS_UAMI_WORKLOAD_OBJECTID} \
    --assignee-principal-type ServicePrincipal \
    --role "Network Contributor" \
    --scope ${AKS_PRIMARY_CLUSTER_NODERG_NAME_SCOPE}
 Create a public static IP for PostgreSQL cluster ingress Assign the "Network Contributor" role to the UAMI object ID using the node resource group scope using the [`az role assignment create`][az-role-assignment-create] command. {  0 <nil>}} {bash helm repo add cnpg https://cloudnative-pg.github.io/charts
 [Helm](#tab/helm) Add the CNPG Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install cnpg \
    --namespace $PG_SYSTEM_NAMESPACE \
    --create-namespace \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME \
    cnpg/cloudnative-pg
 [Helm](#tab/helm) Upgrade the CNPG Helm repo and install it on the AKS cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl get deployment \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-cloudnative-pg
 [Helm](#tab/helm) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_SYSTEM_NAMESPACE \
    --server-side -f \
    https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.23/releases/cnpg-1.23.1.yaml
 [YAML](#tab/yaml) Install the CNPG operator on the AKS cluster using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get deployment \
    --namespace $PG_SYSTEM_NAMESPACE cnpg-controller-manager \
    --context $AKS_PRIMARY_CLUSTER_NAME
 [YAML](#tab/yaml) Verify the operator installation on the AKS cluster using the [`kubectl get`][kubectl-get] command. {  0 <nil>}}]
time=2024-07-22T15:31:52Z level=info msg=Successfully built out the scenario: Create infrastructure for deploying a highly available PostgreSQL database on AKS
time=2024-07-22T15:31:52Z level=info msg=Changed directory to .
time=2024-07-22T15:31:52Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-22T15:31:53Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:31:53Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export LOCAL_NAME="cnpg"
export TAGS="owner=user"
export RESOURCE_GROUP_NAME="rg-${LOCAL_NAME}-${SUFFIX}"
export PRIMARY_CLUSTER_REGION="westus3"
export AKS_PRIMARY_CLUSTER_NAME="aks-primary-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_MANAGED_RG_NAME="rg-${LOCAL_NAME}-primary-aksmanaged-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME="pg-primary-fedcred1-${LOCAL_NAME}-${SUFFIX}"
export AKS_PRIMARY_CLUSTER_PG_DNSPREFIX=$(echo $(echo "a$(openssl rand -hex 5 | cut -c1-11)"))
export AKS_UAMI_CLUSTER_IDENTITY_NAME="mi-aks-${LOCAL_NAME}-${SUFFIX}"
export AKS_CLUSTER_VERSION="1.29"
export PG_NAMESPACE="cnpg-database"
export PG_SYSTEM_NAMESPACE="cnpg-system"
export PG_PRIMARY_CLUSTER_NAME="pg-primary-${LOCAL_NAME}-${SUFFIX}"
export PG_PRIMARY_STORAGE_ACCOUNT_NAME="hacnpgpsa${SUFFIX}"
export PG_STORAGE_BACKUP_CONTAINER_NAME="backups"
export ENABLE_AZURE_PVC_UPDATES="true"
export MY_PUBLIC_CLIENT_IP=$(dig +short myip.opendns.com @resolver3.opendns.com)

time=2024-07-22T15:31:53Z level=info msg=Executing command asynchronously:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-22T15:32:03Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:32:03Z level=info msg=Finished executing:
 az extension add --upgrade --name aks-preview --yes --allow-preview true
az extension add --upgrade --name k8s-extension --yes --allow-preview false
az extension add --upgrade --name amg --yes --allow-preview false

time=2024-07-22T15:32:03Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:32:03Z level=info msg=Executing command asynchronously:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-22T15:32:07Z level=info msg=Command output to stdout:
 ./LICENSE
./krew-linux_amd64

time=2024-07-22T15:32:07Z level=info msg=Finished executing:
 (
  set -x; cd "$(mktemp -d)" &&
  OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
  ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
  KREW="krew-${OS}_${ARCH}" &&
  curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
  tar zxvf "${KREW}.tar.gz" &&
  ./"${KREW}" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

kubectl krew install cnpg

time=2024-07-22T15:32:07Z level=info msg=Executing command asynchronously:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-22T15:32:10Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-22T15:32:10Z level=info msg=Finished executing:
 az group create \
    --name $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --tags $TAGS \
    --query 'properties.provisioningState' \
    --output tsv

time=2024-07-22T15:32:10Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:32:10Z level=info msg=Executing command asynchronously:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-22T15:32:12Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:32:12Z level=info msg=Finished executing:
 AKS_UAMI_WI_IDENTITY=$(az identity create \
    --name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --output json)

time=2024-07-22T15:32:12Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:32:12Z level=info msg=Executing command asynchronously:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-22T15:32:12Z level=info msg=Command output to stdout:
 ObjectId: 
ResourceId: 
ClientId: 

time=2024-07-22T15:32:12Z level=info msg=Finished executing:
 export AKS_UAMI_WORKLOAD_OBJECTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.principalId')
export AKS_UAMI_WORKLOAD_RESOURCEID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.id')
export AKS_UAMI_WORKLOAD_CLIENTID=$( \
    echo "${AKS_UAMI_WI_IDENTITY}" | jq -r '.clientId')

echo "ObjectId: $AKS_UAMI_WORKLOAD_OBJECTID"
echo "ResourceId: $AKS_UAMI_WORKLOAD_RESOURCEID"
echo "ClientId: $AKS_UAMI_WORKLOAD_CLIENTID"

time=2024-07-22T15:32:12Z level=info msg=Executing command asynchronously:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-22T15:32:36Z level=info msg=Command output to stdout:
 Succeeded

time=2024-07-22T15:32:36Z level=info msg=Finished executing:
 az storage account create \
    --name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --location $PRIMARY_CLUSTER_REGION \
    --sku Standard_ZRS \
    --kind StorageV2 \
    --query 'provisioningState' \
    --output tsv

time=2024-07-22T15:32:36Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:32:36Z level=info msg=Executing command asynchronously:
 az storage container create \
    --name $PG_STORAGE_BACKUP_CONTAINER_NAME \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --auth-mode login

time=2024-07-22T15:32:37Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:32:36.8361716Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e3a45d81-5c95-4c52-9721-45d68d174d00 Correlation ID: 0efca1db-8b25-4c27-a61c-bd3fe3645947 Timestamp: 2024-07-22 15:32:36Z
Interactive authentication is needed. Please run:
az login
'
time=2024-07-22T15:32:37Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:32:37Z level=error msg=Error testing scenario: failed to execute code block 1 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:32:36.8361716Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e3a45d81-5c95-4c52-9721-45d68d174d00 Correlation ID: 0efca1db-8b25-4c27-a61c-bd3fe3645947 Timestamp: 2024-07-22 15:32:36Z
Interactive authentication is needed. Please run:
az login
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:32:36.8361716Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: e3a45d81-5c95-4c52-9721-45d68d174d00 Correlation ID: 0efca1db-8b25-4c27-a61c-bd3fe3645947 Timestamp: 2024-07-22 15:32:36Z
Interactive authentication is needed. Please run:
az login

time=2024-07-22T15:32:38Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/deploy-postgresql-ha.ini' does not exist, skipping...
time=2024-07-22T15:32:38Z level=debug msg=Found HTML block with the content: <!-- LINKS -->


time=2024-07-22T15:32:38Z level=warning msg=The node before the codeblock `# Run the following PSQL commands to create a small dataset
# postgres=#

CREATE TABLE datasample (id INTEGER,name VARCHAR(255));
INSERT INTO datasample (id, name) VALUES (1, 'John');
INSERT INTO datasample (id, name) VALUES (2, 'Jane');
INSERT INTO datasample (id, name) VALUES (3, 'Alice');
SELECT COUNT(*) FROM datasample;

# Type \q to exit psql
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:38Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT pg_is_in_recovery();
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:38Z level=warning msg=The node before the codeblock `#postgres=# 
SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:38Z level=warning msg=The node before the codeblock `postgres=# SELECT COUNT(*) FROM datasample;
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:38Z level=warning msg=The node before the codeblock `echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:38Z level=debug msg=Found 40 code blocks CodeBlocks=[{bash PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Generate a secret to validate the PostgreSQL deployment by interactive login for a bootstrap app user using the [`kubectl create secret`][kubectl-create-secret] command. {  0 <nil>}} {bash kubectl get secret db-user-pass --namespace $PG_NAMESPACE --context $AKS_PRIMARY_CLUSTER_NAME
 Create secret for bootstrap app user Validate that the secret was successfully created using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -f -
apiVersion: v1
kind: ConfigMap
metadata:
    name: cnpg-controller-manager-config
data:
    ENABLE_AZURE_PVC_UPDATES: 'true'
EOF
 Set environment variables for the PostgreSQL cluster Deploy a ConfigMap to set environment variables for the PostgreSQL cluster using the following [`kubectl apply`][kubectl-apply] command: {  0 <nil>}} {bash helm repo add prometheus-community \
    https://prometheus-community.github.io/helm-charts
 Install the Prometheus PodMonitors Add the Prometheus Community Helm repo using the [`helm repo add`][helm-repo-add] command. {  0 <nil>}} {bash helm upgrade --install \
    --namespace $PG_NAMESPACE \
    -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/docs/src/samples/monitoring/kube-stack-config.yaml \
    prometheus-community \
    prometheus-community/kube-prometheus-stack \
    --kube-context=$AKS_PRIMARY_CLUSTER_NAME
 Install the Prometheus PodMonitors Upgrade the Prometheus Community Helm repo and install it on the primary cluster using the [`helm upgrade`][helm-upgrade] command with the `--install` flag. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Install the Prometheus PodMonitors Verify that the pod monitor is created. {  0 <nil>}} {bash export AKS_PRIMARY_CLUSTER_OIDC_ISSUER="$(az aks show \
    --name $AKS_PRIMARY_CLUSTER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --query "oidcIssuerProfile.issuerUrl" \
    --output tsv)"
 Create a federated credential Get the OIDC issuer URL of the cluster using the [`az aks show`][az-aks-show] command. {  0 <nil>}} {bash az identity federated-credential create \
    --name $AKS_PRIMARY_CLUSTER_FED_CREDENTIAL_NAME \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME}" \
    --audience api://AzureADTokenExchange
 Create a federated credential Create a federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -n $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME
spec:
  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 3
  startDelay: 30
  stopDelay: 30
  minSyncReplicas: 1
  maxSyncReplicas: 1
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 30

  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: $PG_PRIMARY_CLUSTER_NAME

  affinity:
    nodeSelector:
      workload: postgres

  resources:
    requests:
      memory: '8Gi'
      cpu: 2
    limits:
      memory: '8Gi'
      cpu: 2

  bootstrap:
    initdb:
      database: appdb
      owner: app
      secret:
        name: db-user-pass
      dataChecksums: true

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium

  monitoring:
    enablePodMonitor: true

  postgresql:
    parameters:
      archive_timeout: '5min'
      auto_explain.log_min_duration: '10s'
      checkpoint_completion_target: '0.9'
      checkpoint_timeout: '15min'
      shared_buffers: '256MB'
      effective_cache_size: '512MB'
      pg_stat_statements.max: '1000'
      pg_stat_statements.track: 'all'
      max_connections: '400'
      max_prepared_transactions: '400'
      max_parallel_workers: '32'
      max_parallel_maintenance_workers: '8'
      max_parallel_workers_per_gather: '8'
      max_replication_slots: '32'
      max_worker_processes: '32'
      wal_keep_size: '512MB'
      max_wal_size: '1GB'
    pg_hba:
      - host all all all scram-sha-256

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  backup:
    barmanObjectStore:
      destinationPath: "https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups"
      azureCredentials:
        inheritFromAzureAD: true

    retentionPolicy: '7d'
EOF
 Deploy a highly available PostgreSQL cluster Deploy the PostgreSQL cluster with the Cluster CRD using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl get pods --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Deploy a highly available PostgreSQL cluster Validate that the primary PostgreSQL cluster was successfully created using the [`kubectl get`][kubectl-get] command. The CNPG Cluster CRD specified three instances, which can be validated by viewing running pods once each instance is brought up and joined for replication. Be patient as it can take some time for all three instances to come online and join the cluster. {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.monitoring.coreos.com \
    $PG_PRIMARY_CLUSTER_NAME \
    --output yaml
 Validate the Prometheus PodMonitor is running Validate the PodMonitor is running using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -f -
apiVersion: azmonitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: cnpg-cluster-metrics-managed-prometheus
  namespace: ${PG_NAMESPACE}
  labels:
    azure.workload.identity/use: "true"
    cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
spec:
  selector:
    matchLabels:
      azure.workload.identity/use: "true"
      cnpg.io/cluster: ${PG_PRIMARY_CLUSTER_NAME}
  podMetricsEndpoints:
    - port: metrics
EOF
 Validate the Prometheus PodMonitor is running If you are using Azure Monitor for Managed Prometheus, you will need to add another pod monitor using the custom group name. Managed Prometheus does not pick up the custom resource definitions (CRDs) from the Prometheus community. Aside from the group name, the CRDs are the same. This allows pod monitors for Managed Prometheus to exist side-by-side those that use the community pod monitor. If you are not using Managed Prometheus, you can skip this. Create a new pod monitor: {  0 <nil>}} {bash kubectl --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    get podmonitors.azmonitoring.coreos.com \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME \
    -o yaml
 Validate the Prometheus PodMonitor is running Verify that the pod monitor is created (note the difference in the group name). {  0 <nil>}} {bash kubectl get nodes \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    --output json | jq '.items[] | {node: .metadata.name, zone: .metadata.labels."failure-domain.beta.kubernetes.io/zone"}'
 Inspect the deployed PostgreSQL cluster Validate that PostgreSQL is spread across multiple availability zones by retrieving the AKS node details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL and create a sample dataset Create a table and insert data into the app database using the following commands: {  0 <nil>}} {bash kubectl cnpg psql --replica $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Connect to PostgreSQL read-only replicas Connect to the PostgreSQL read-only replicas and validate the sample dataset using the following commands: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the PostgreSQL cluster can access the Azure storage account specified in the CNPG Cluster CRD and that `Working WAL archiving` reports as `OK` using the following command: {  0 <nil>}} {bash export BACKUP_ONDEMAND_NAME="on-demand-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Backup
metadata:
  name: $BACKUP_ONDEMAND_NAME
spec:
  method: barmanObjectStore
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Deploy an on-demand backup to Azure Storage, which uses the AKS workload identity integration, using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe backup $BACKUP_ONDEMAND_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the on-demand backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate that the cluster has a first point of recoverability using the following command: {  0 <nil>}} {bash export BACKUP_SCHEDULED_NAME="scheduled-backup-1"

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: $BACKUP_SCHEDULED_NAME
spec:
  # Backup once per hour
  schedule: "0 15 * ? * *"
  backupOwnerReference: self
  cluster:
    name: $PG_PRIMARY_CLUSTER_NAME
EOF
 Set up on-demand and scheduled PostgreSQL backups using Barman Configure a scheduled backup for *every hour at 15 minutes past the hour* using the YAML file with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe scheduledbackup $BACKUP_SCHEDULED_NAME \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Set up on-demand and scheduled PostgreSQL backups using Barman Validate the status of the scheduled backup using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash az storage blob list \
    --account-name $PG_PRIMARY_STORAGE_ACCOUNT_NAME \
    --container-name backups \
    --query "[*].name" \
    --only-show-errors 
 Set up on-demand and scheduled PostgreSQL backups using Barman View the backup files stored on Azure blob storage for the primary cluster using the [`az storage blob list`][az-storage-blob-list] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_NAME_RECOVERED="$PG_PRIMARY_CLUSTER_NAME-recovered-db"

az identity federated-credential create \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --issuer "${AKS_PRIMARY_CLUSTER_OIDC_ISSUER}" \
    --subject system:serviceaccount:"${PG_NAMESPACE}":"${PG_PRIMARY_CLUSTER_NAME_RECOVERED}" \
    --audience api://AzureADTokenExchange
 Restore the on-demand backup to a new PostgreSQL cluster Create a second federated identity credential using the [`az identity federated-credential create`][az-identity-federated-credential-create] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE -v 9 -f -
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: $PG_PRIMARY_CLUSTER_NAME_RECOVERED
spec:

  inheritedMetadata:
    annotations:
      service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
    labels:
      azure.workload.identity/use: "true"

  instances: 1

  affinity:
    nodeSelector:
      workload: postgres

  # Point to cluster backup created earlier and stored on Azure Blob Storage
  bootstrap:
    recovery:
      source: clusterBackup

  storage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  walStorage:
    size: 2Gi
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: managed-csi-premium
      volumeMode: Filesystem

  serviceAccountTemplate:
    metadata:
      annotations:
        azure.workload.identity/client-id: "$AKS_UAMI_WORKLOAD_CLIENTID"  
      labels:
        azure.workload.identity/use: "true"

  externalClusters:
    - name: clusterBackup
      barmanObjectStore:
        destinationPath: https://${PG_PRIMARY_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/backups
        serverName: $PG_PRIMARY_CLUSTER_NAME
        azureCredentials:
          inheritFromAzureAD: true
        wal:
          maxParallel: 8
EOF
 Restore the on-demand backup to a new PostgreSQL cluster Restore the on-demand backup using the Cluster CRD with the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl cnpg psql $PG_PRIMARY_CLUSTER_NAME_RECOVERED --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Connect to the recovered instance, then validate that the dataset created on the original cluster where the full backup was taken is present using the following command: {  0 <nil>}} {bash kubectl cnpg destroy $PG_PRIMARY_CLUSTER_NAME_RECOVERED 1 \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE
 Restore the on-demand backup to a new PostgreSQL cluster Delete the recovered cluster using the following command: {  0 <nil>}} {bash az identity federated-credential delete \
    --name $PG_PRIMARY_CLUSTER_NAME_RECOVERED \
    --identity-name $AKS_UAMI_CLUSTER_IDENTITY_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --yes
 Restore the on-demand backup to a new PostgreSQL cluster Delete the federated identity credential using the [`az identity federated-credential delete`][az-identity-federated-credential-delete] command. {  0 <nil>}} {bash kubectl get services \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE \
    -l cnpg.io/cluster=$PG_PRIMARY_CLUSTER_NAME
 Expose the PostgreSQL cluster using a public load balancer Get the Cluster IP service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash export PG_PRIMARY_CLUSTER_RW_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-rw")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RW_SERVICE

export PG_PRIMARY_CLUSTER_RO_SERVICE=$(kubectl get services \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    -l "cnpg.io/cluster" \
    --output json | jq -r '.items[] | select(.metadata.name | endswith("-ro")) | .metadata.name')

echo $PG_PRIMARY_CLUSTER_RO_SERVICE
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl get`][kubectl-get] command. {  0 <nil>}} {bash cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-rw
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: primary
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF

cat <<EOF | kubectl apply --context $AKS_PRIMARY_CLUSTER_NAME -f -
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: $AKS_PRIMARY_CLUSTER_NODERG_NAME
    service.beta.kubernetes.io/azure-pip-name: $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME
    service.beta.kubernetes.io/azure-dns-label-name: $AKS_PRIMARY_CLUSTER_PG_DNSPREFIX
  name: cnpg-cluster-load-balancer-ro
  namespace: "${PG_NAMESPACE}"
spec:
  type: LoadBalancer
  ports: 
  - protocol: TCP
    port: 5433
    targetPort: 5432
  selector:
    cnpg.io/instanceRole: replica
    cnpg.io/podRole: instance
  loadBalancerSourceRanges:
  - "$MY_PUBLIC_CLIENT_IP/32"
EOF
 Expose the PostgreSQL cluster using a public load balancer Configure the load balancer service with the following YAML files using the [`kubectl apply`][kubectl-apply] command. {  0 <nil>}} {bash kubectl describe service cnpg-cluster-load-balancer-rw \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

kubectl describe service cnpg-cluster-load-balancer-ro \
    --context $AKS_PRIMARY_CLUSTER_NAME \
    --namespace $PG_NAMESPACE

export AKS_PRIMARY_CLUSTER_ALB_DNSNAME="$(az network public-ip show \
    --resource-group $AKS_PRIMARY_CLUSTER_NODERG_NAME \
    --name $AKS_PRIMARY_CLUSTER_PUBLICIP_NAME \
    --query "dnsSettings.fqdn" --output tsv)"

echo $AKS_PRIMARY_CLUSTER_ALB_DNSNAME
 Expose the PostgreSQL cluster using a public load balancer Get the service details using the [`kubectl describe`][kubectl-describe] command. {  0 <nil>}} {bash echo "Public endpoint for PostgreSQL cluster: $AKS_PRIMARY_CLUSTER_ALB_DNSNAME"

# Query the primary, pg_is_in_recovery = false

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5432 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints Validate the public PostgreSQL endpoints using the following `psql` commands: {  0 <nil>}} {bash echo "Query a replica, pg_is_in_recovery = true"

psql -h $AKS_PRIMARY_CLUSTER_ALB_DNSNAME \
    -p 5433 -U app -d appdb -W -c "SELECT pg_is_in_recovery();"
 Validate public PostgreSQL endpoints  {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Check the status of the running pod instances using the following command: {  0 <nil>}} {bash PRIMARY_POD=$(kubectl get pod \
    --namespace $PG_NAMESPACE \
    --no-headers \
    -o custom-columns=":metadata.name" \
    -l role=primary)

kubectl delete pod $PRIMARY_POD --grace-period=1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Delete the primary pod using the [`kubectl delete`][kubectl-delete] command. {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the `pg-primary-cnpg-sryti1qf-2` pod instance is now the primary using the following command: {  0 <nil>}} {bash kubectl cnpg promote $PG_PRIMARY_CLUSTER_NAME 1 --namespace $PG_NAMESPACE
 Simulate an unplanned failover Reset the `pg-primary-cnpg-sryti1qf-1` pod instance as the primary using the following command: {  0 <nil>}} {bash kubectl cnpg status $PG_PRIMARY_CLUSTER_NAME --namespace $PG_NAMESPACE
 Simulate an unplanned failover Validate that the pod instances have returned to their original state before the unplanned failover test using the following command: {  0 <nil>}} {bash az group delete --resource-group $RESOURCE_GROUP_NAME --no-wait --yes
 Clean up resources Once you're finished reviewing your deployment, delete all the resources you created in this guide using the [`az group delete`][az-group-delete] command. {  0 <nil>}}]
time=2024-07-22T15:32:38Z level=info msg=Successfully built out the scenario: Deploy a highly available PostgreSQL database on AKS
time=2024-07-22T15:32:38Z level=info msg=Changed directory to .
time=2024-07-22T15:32:38Z level=info msg=Executing command asynchronously:
 PG_DATABASE_APPUSER_SECRET=$(echo -n | openssl rand -base64 16)

kubectl create secret generic db-user-pass \
    --from-literal=username=app \
    --from-literal=password="${PG_DATABASE_APPUSER_SECRET}" \
    --namespace $PG_NAMESPACE \
    --context $AKS_PRIMARY_CLUSTER_NAME

time=2024-07-22T15:32:38Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-bv7fxet0" does not exist
'
time=2024-07-22T15:32:38Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:32:38Z level=error msg=Error testing scenario: failed to execute code block 0 on step 0.
Error: command exited with 'exit status 1' and the message 'error: context "aks-primary-cnpg-bv7fxet0" does not exist
'
StdErr: error: context "aks-primary-cnpg-bv7fxet0" does not exist

time=2024-07-22T15:32:40Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-22T15:32:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:32:40Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:32:40Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-22T15:32:40Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-22T15:32:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:32:40Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:40Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:32:40Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-22T15:32:40Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-22T15:32:40Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-22T15:32:40Z level=info msg=Changed directory to .
time=2024-07-22T15:32:40Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-22T15:32:40Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:32:40Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-22T15:32:40Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:32:44Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup11b7a6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup11b7a6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:32:44Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747720
time=2024-07-22T15:32:44Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup11b7a6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup11b7a6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:32:44Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:32:44Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:32:44Z level=info msg=Found resource group named: myAKSResourceGroup11b7a6
time=2024-07-22T15:32:44Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-22T15:38:31Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "artifactStreamingProfile": null,
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.10",
      "eTag": "cbd09c14-7613-41cc-b2ad-6ea8f8a2fd7c",
      "enableAutoScaling": false,
      "enableCustomCaTrust": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gatewayProfile": null,
      "gpuInstanceProfile": null,
      "gpuProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "messageOfTheDay": null,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": {
        "allowedHostPorts": null,
        "applicationSecurityGroups": null,
        "nodePublicIpTags": null
      },
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202407.03.0",
      "nodeInitializationTaints": null,
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podIpAllocationMode": null,
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "securityProfile": {
        "enableSecureBoot": false,
        "enableVtpm": false,
        "sshAccess": "LocalUser"
      },
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null,
        "undrainableNodeBehavior": null
      },
      "virtualMachineNodesStatus": null,
      "virtualMachinesProfile": null,
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": "OCIContainer"
    }
  ],
  "aiToolchainOperatorProfile": null,
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-5zm0r8kq.portal.hcp.westeurope.azmk8s.io",
  "bootstrapProfile": {
    "artifactSource": "Direct",
    "containerRegistryId": null
  },
  "creationData": null,
  "currentKubernetesVersion": "1.28.10",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "eTag": "b81e6b63-d600-45bb-9f5b-20511678049c",
  "enableNamespaceResources": null,
  "enablePodSecurityPolicy": false,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-5zm0r8kq.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup11b7a6/providers/Microsoft.ContainerService/managedClusters/myAKSCluster11b7a6",
  "identity": {
    "delegatedResources": null,
    "principalId": "3ce59e76-950f-408f-a43d-841d945b23a3",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "d86bd991-389d-4100-ac40-36393fa8a997",
      "objectId": "bb852f1e-e21a-4606-9ee1-ada6f2cee14c",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup11b7a6_myAKSCluster11b7a6_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster11b7a6-agentpool"
    }
  },
  "ingressProfile": null,
  "kind": "Base",
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcJodcCiFFPfbKPKsZN6VLx7VunQWPlDV4uUd5g56lYaJgj82nousjWgPHxk7Rs9QoWl/5OWwprvdhPPavYxkSYSlsC+J0hrnZHZX/n2PxO19KxwIk0PVWK7gUvQjPEl50KJpqY8iJJoZ7VGkIJCpAArRJLjT1ov5Hrw17D9FiPVtlgKblljppNplH09JyUiliTj45v1Uj3LZ/6PXshszHcp+TVimPPZI/DTU5Gs2sccLpfvv7K9BqoxyAkK3C5L815aeQSmzt3kzjdTvsg2Y8oaR2ZR6CReG4rIJkKiq9De/ad+vJg783RFpOYaqJtSnRQVhtU1ksG+QVNO4w3RvR"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster11b7a6",
  "networkProfile": {
    "advancedNetworking": null,
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "kubeProxyConfig": null,
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "clusterServiceLoadBalancerHealthProbeMode": null,
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup11b7a6_myAKSCluster11b7a6_westeurope/providers/Microsoft.Network/publicIPAddresses/ae38ad1f-5448-44d0-abcd-4280d2e339aa",
          "resourceGroup": "MC_myAKSResourceGroup11b7a6_myAKSCluster11b7a6_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": "none",
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "podLinkLocalAccess": "IMDS",
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ],
    "staticEgressGatewayProfile": null
  },
  "nodeProvisioningProfile": {
    "mode": "Manual"
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup11b7a6_myAKSCluster11b7a6_westeurope",
  "nodeResourceGroupProfile": null,
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup11b7a6",
  "resourceUid": "669e7ba52f6c9400018f075b",
  "safeguardsProfile": null,
  "securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": null,
    "defender": null,
    "imageCleaner": null,
    "imageIntegrity": null,
    "nodeRestriction": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true,
      "version": "v1"
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-22T15:38:31Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-22T15:38:31Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-22T15:38:33Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:38:33Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-22T15:38:33Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-22T15:38:33Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-19867147-vmss000000   Ready    agent   104s   v1.28.10

time=2024-07-22T15:38:33Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-22T15:38:33Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-22T15:38:33Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-22T15:38:33Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup11b7a6
time=2024-07-22T15:38:40Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:38:40Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-22T15:38:41Z level=info msg=INI file 'scenarios/AttachDataDiskLinuxVM/attach-data-disk-linux-vm.ini' does not exist, skipping...
time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:38:41Z level=debug msg=Found 14 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-xxxxxx",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-xxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON
 Create an Azure Linux Virtual Machine with a data disk Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d",
  "identity": {
    "systemAssignedIdentity": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "7C-1E-52-22-D8-72",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "xx.xx.xx.xx",
  "resourceGroup": "LinuxRG-a36f5d",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a36f5d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"
 Enable Azure AD Login for a Linux virtual machine in Azure In this scenario the LUN0 our first data disk is going to be formatted and mounted using the command below: {text /dev/sdc: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done
Creating filesystem with 33553920 4k blocks and 8388608 inodes
Filesystem UUID: 1095e29c-07db-47ec-8b19-1ffcaf4f5628
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done
Writing inode tables: done
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk01'
mount: /dev/sdc1 mounted on /datadisk01.
 0.3 <nil>}} {bash ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'
 Enable Azure AD Login for a Linux virtual machine in Azure In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=1095e29c-07db-47ec-8b19-1ffcaf4f5628 /datadisk01 xfs defaults,discard 0 0
 0.3 <nil>}} {bash export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50
 Attach a new disk to a VM If you want to add a new, empty data disk on your VM, use the [az vm disk attach](/cli/azure/vm/disk) command with the `--new` parameter. If your VM is in an Availability Zone, the disk is automatically created in the same zone as the VM. For more information, see [Overview of Availability Zones](../../availability-zones/az-overview.md). The following example creates a disk named *$LUN2_NAME* that is 50 Gb in size: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"
 Attach a new disk to a VM In this second possible scenario the LUN1 is going to be our data disk, the following example shows how to format and mount the data disk. {text /dev/sdd: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done
Creating filesystem with 13106688 4k blocks and 3276800 inodes
Filesystem UUID: 6e8ad233-5664-4f75-8ec6-3aa34f228868
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424

Allocating group tables: done
Writing inode tables: done
Creating journal (65536 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk02'
mount: /dev/sdd1 mounted on /datadisk02.
 0.3 <nil>}} {bash ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'
 Attach a new disk to a VM In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=0b1629d5-0cd5-41fd-9050-b2ed7e3f1028 /datadisk02 xfs defaults,discard 0 0
 0.3 <nil>}} {bash export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON
 Attach an existing data disk to a VM First lets start by creating a new disk: {JSON {
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-e4c4b4/providers/Microsoft.Compute/disks/LUN2-e4c4b4",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "LUN2-e4c4b4",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-e4c4b4",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  }
}
 0.3 <nil>}} {bash LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2
 Attach an existing data disk to a VM Then you can attach the disk to the VM: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"
 Attach an existing data disk to a VM In this third scenario the LUN2 is going to be our data disk, the following example shows how to format and mount the data disk. {text /dev/sde: gpt partitions 1
mke2fs 1.47.0 (5-Feb-2023)
Creating filesystem with 33553920 4k blocks and 8388608 inodes
Filesystem UUID: 0e0a110e-7d30-4235-ac4d-8ee59641e7c7
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done
Writing inode tables: done
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done

mkdir: created directory '/datadisk03'
mount: /dev/sde1 mounted on /datadisk03.
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'
 Attach an existing data disk to a VM In oder to update the /etc/fstab file, you can use the following command, and mount the LUN1 using it's unique identifier (UUID) together with the discard mount option: {text UUID=4b54ed3b-2f5e-4fe7-b0e5-c40da6e3b8a8 /datadisk03 xfs defaults,discard 0 0
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'
 Check all mounted LUNs To verify the mount points, you can use the following command: {text /dev/sdc1 on /datadisk01 type xfs (rw,relatime)
/dev/sdd1 on /datadisk02 type xfs (rw,relatime)
/dev/sde1 on /datadisk03 type xfs (rw,relatime)
 0.3 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN
 SSH into the VM You can now SSH into the VM by running the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-22T15:38:41Z level=info msg=Successfully built out the scenario: Quickstart: Use the Azure CLI to create an Ubuntu Virtual Machine and attach an Azure Data Disk
time=2024-07-22T15:38:41Z level=info msg=Changed directory to .
time=2024-07-22T15:38:41Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-22T15:38:44Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-xxxxxx",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-xxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-a70a67",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:38:44Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.752435
time=2024-07-22T15:38:44Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67",
  "location": "australiaeast",
  "managedBy": null,
  "name": "LinuxRG-a70a67",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:38:44Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="LinuxRG-$RANDOM_ID"
export REGION="australiaeast"
az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-22T15:38:44Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:38:44Z level=info msg=Found resource group named: LinuxRG-a70a67
time=2024-07-22T15:38:44Z level=info msg=Executing command asynchronously:
 export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON

time=2024-07-22T15:40:08Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "mydnslabelxxxxxx.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d",
  "identity": {
    "systemAssignedIdentity": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "7C-1E-52-22-D8-72",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "xx.xx.xx.xx",
  "resourceGroup": "LinuxRG-a36f5d",
  "zones": ""
}

Actual{
  "fqdns": "mydnslabela70a67.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67/providers/Microsoft.Compute/virtualMachines/myVMa70a67",
  "identity": {
    "systemAssignedIdentity": "774ba189-f730-4344-bf97-04f31cc75a0b",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "00-0D-3A-D0-69-C4",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.92.249.179",
  "resourceGroup": "LinuxRG-a70a67",
  "zones": "1"
}

time=2024-07-22T15:40:08Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.739355
time=2024-07-22T15:40:08Z level=info msg=Command output to stdout:
 {
  "fqdns": "mydnslabela70a67.australiaeast.cloudapp.azure.com",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67/providers/Microsoft.Compute/virtualMachines/myVMa70a67",
  "identity": {
    "systemAssignedIdentity": "774ba189-f730-4344-bf97-04f31cc75a0b",
    "userAssignedIdentities": {}
  },
  "location": "australiaeast",
  "macAddress": "00-0D-3A-D0-69-C4",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "20.92.249.179",
  "resourceGroup": "LinuxRG-a70a67",
  "zones": "1"
}

time=2024-07-22T15:40:08Z level=info msg=Finished executing:
 export ZONE="1"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_D2s_v3'
export MY_VM_IMAGE='Canonical:ubuntu-24_04-lts:server:latest'
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --nsg-rule SSH \
    --public-ip-address-allocation static \
    --public-ip-address-dns-name $MY_DNS_LABEL \
    --public-ip-sku Standard \
    --nic-delete-option Delete \
    --accelerated-networking true \
    --storage-sku os=Premium_LRS 0=Premium_LRS \
    --os-disk-caching ReadWrite \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --data-disk-caching ReadOnly \
    --data-disk-sizes-gb 128 \
    --data-disk-delete-option Detach \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --zone $ZONE -o JSON

time=2024-07-22T15:40:08Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON

time=2024-07-22T15:41:19Z level=debug msg=Comparing JSON strings:
Expected: {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-a36f5d/providers/Microsoft.Compute/virtualMachines/myVMa36f5d/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a36f5d",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

Actual{
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67/providers/Microsoft.Compute/virtualMachines/myVMa70a67/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a70a67",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-22T15:41:19Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.839383
time=2024-07-22T15:41:19Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67/providers/Microsoft.Compute/virtualMachines/myVMa70a67/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "australiaeast",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "LinuxRG-a70a67",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-22T15:41:19Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON

time=2024-07-22T15:41:19Z level=info msg=Executing command asynchronously:
 export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"

time=2024-07-22T15:41:36Z level=info msg=Command output to stdout:
 /dev/sda: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun0-part1 isize=512    agcount=4, agsize=8388480 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=33553920, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
mkdir: created directory '/datadisk01'
mount: /dev/sda1 mounted on /datadisk01.

time=2024-07-22T15:41:36Z level=info msg=Finished executing:
 export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun0 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun0"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun0-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk01"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun0-part1 /datadisk01"

time=2024-07-22T15:41:36Z level=info msg=Executing command asynchronously:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'

time=2024-07-22T15:41:38Z level=info msg=Command output to stdout:
 UUID=f4a4e6b6-b04d-44ae-be71-235098568b1f /datadisk01 xfs defaults,discard 0 0

time=2024-07-22T15:41:38Z level=info msg=Finished executing:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun0-part1) /datadisk01 xfs defaults,discard 0 0 | sudo tee -a /etc/fstab'

time=2024-07-22T15:41:38Z level=info msg=Executing command asynchronously:
 export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50

time=2024-07-22T15:42:21Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:42:21Z level=info msg=Finished executing:
 export LUN1_NAME="ZRS-$RANDOM_ID"
az vm disk attach \
    --new \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $LUN1_NAME \
    --sku Premium_ZRS \
    --caching None \
    --lun 1 \
    --size-gb 50

time=2024-07-22T15:42:21Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"

time=2024-07-22T15:42:33Z level=info msg=Command output to stdout:
 /dev/sdd: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun1-part1 isize=512    agcount=4, agsize=3276672 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=13106688, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
mkdir: created directory '/datadisk02'
mount: /dev/sdd1 mounted on /datadisk02.

time=2024-07-22T15:42:33Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun1 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun1-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk02"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun1-part1 /datadisk02"

time=2024-07-22T15:42:33Z level=info msg=Executing command asynchronously:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-22T15:42:35Z level=info msg=Command output to stdout:
 UUID=0c4eea9b-fbb7-4eb9-bb8b-76b20943bcd4 /datadisk02 xfs defaults,discard 0 0

time=2024-07-22T15:42:35Z level=info msg=Finished executing:
 ssh $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun1-part1) /datadisk02 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-22T15:42:35Z level=info msg=Executing command asynchronously:
 export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON

time=2024-07-22T15:42:48Z level=debug msg=Comparing JSON strings:
Expected: {
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/LinuxRG-e4c4b4/providers/Microsoft.Compute/disks/LUN2-e4c4b4",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "LUN2-e4c4b4",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-e4c4b4",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  }
}

Actual{
  "burstingEnabled": null,
  "burstingEnabledTime": null,
  "completionPercent": null,
  "creationData": {
    "createOption": "Empty",
    "elasticSanResourceId": null,
    "galleryImageReference": null,
    "imageReference": null,
    "logicalSectorSize": 4096,
    "performancePlus": null,
    "securityDataUri": null,
    "sourceResourceId": null,
    "sourceUniqueId": null,
    "sourceUri": null,
    "storageAccountId": null,
    "uploadSizeBytes": null
  },
  "dataAccessAuthMode": null,
  "diskAccessId": null,
  "diskIopsReadOnly": 3000,
  "diskIopsReadWrite": 3000,
  "diskMBpsReadOnly": 125,
  "diskMBpsReadWrite": 125,
  "diskSizeBytes": 137438953472,
  "diskSizeGb": 128,
  "diskState": "Unattached",
  "encryption": {
    "diskEncryptionSetId": null,
    "type": "EncryptionAtRestWithPlatformKey"
  },
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67/providers/Microsoft.Compute/disks/PSSDV2-a70a67",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "PSSDV2-a70a67",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-a70a67",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  },
  "supportedCapabilities": null,
  "supportsHibernation": null,
  "tags": {},
  "tier": null,
  "timeCreated": "2024-07-22T15:42:37.427936+00:00",
  "type": "Microsoft.Compute/disks",
  "uniqueId": "b9718dfb-05d7-49bf-9224-aba0fd83f6f6",
  "zones": [
    "1"
  ]
}

time=2024-07-22T15:42:48Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.620422
time=2024-07-22T15:42:48Z level=info msg=Command output to stdout:
 {
  "burstingEnabled": null,
  "burstingEnabledTime": null,
  "completionPercent": null,
  "creationData": {
    "createOption": "Empty",
    "elasticSanResourceId": null,
    "galleryImageReference": null,
    "imageReference": null,
    "logicalSectorSize": 4096,
    "performancePlus": null,
    "securityDataUri": null,
    "sourceResourceId": null,
    "sourceUniqueId": null,
    "sourceUri": null,
    "storageAccountId": null,
    "uploadSizeBytes": null
  },
  "dataAccessAuthMode": null,
  "diskAccessId": null,
  "diskIopsReadOnly": 3000,
  "diskIopsReadWrite": 3000,
  "diskMBpsReadOnly": 125,
  "diskMBpsReadWrite": 125,
  "diskSizeBytes": 137438953472,
  "diskSizeGb": 128,
  "diskState": "Unattached",
  "encryption": {
    "diskEncryptionSetId": null,
    "type": "EncryptionAtRestWithPlatformKey"
  },
  "encryptionSettingsCollection": null,
  "extendedLocation": null,
  "hyperVGeneration": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/LinuxRG-a70a67/providers/Microsoft.Compute/disks/PSSDV2-a70a67",
  "lastOwnershipUpdateTime": null,
  "location": "australiaeast",
  "managedBy": null,
  "managedByExtended": null,
  "maxShares": 1,
  "name": "PSSDV2-a70a67",
  "networkAccessPolicy": "AllowAll",
  "optimizedForFrequentAttach": null,
  "osType": null,
  "propertyUpdatesInProgress": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": "Disabled",
  "purchasePlan": null,
  "resourceGroup": "LinuxRG-a70a67",
  "securityProfile": null,
  "shareInfo": null,
  "sku": {
    "name": "PremiumV2_LRS",
    "tier": "Premium"
  },
  "supportedCapabilities": null,
  "supportsHibernation": null,
  "tags": {},
  "tier": null,
  "timeCreated": "2024-07-22T15:42:37.427936+00:00",
  "type": "Microsoft.Compute/disks",
  "uniqueId": "b9718dfb-05d7-49bf-9224-aba0fd83f6f6",
  "zones": [
    "1"
  ]
}

time=2024-07-22T15:42:48Z level=info msg=Finished executing:
 export LUN2_NAME="PSSDV2-$RANDOM_ID"
az disk create \
    --name $LUN2_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --size-gb 128 \
    --disk-iops-read-write 3000 \
    --disk-mbps-read-write 125 \
    --sku PremiumV2_LRS \
    --zone $ZONE \
    --performance-plus false \
    --public-network-access Disabled -o JSON

time=2024-07-22T15:42:48Z level=info msg=Executing command asynchronously:
 LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2

time=2024-07-22T15:43:03Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:43:03Z level=info msg=Finished executing:
 LUN2_ID=$(az disk show --resource-group $MY_RESOURCE_GROUP_NAME --name $LUN2_NAME --query 'id' -o tsv)

az vm disk attach \
    --vm-name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --disks $LUN2_ID \
    --sku PremiumV2_LRS \
    --lun 2

time=2024-07-22T15:43:03Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"

time=2024-07-22T15:43:14Z level=info msg=Command output to stdout:
 /dev/sde: gpt partitions 1
meta-data=/dev/disk/azure/scsi1/lun2-part1 isize=512    agcount=4, agsize=8388480 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=1
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=33553920, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
mkdir: created directory '/datadisk03'
mount: /dev/sde1 mounted on /datadisk03.

time=2024-07-22T15:43:14Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo parted -s -a optimal -- /dev/disk/azure/scsi1/lun2 mklabel gpt mkpart primary xfs 0% 100%"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo partprobe -s /dev/disk/azure/scsi1/lun2"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkfs.xfs /dev/disk/azure/scsi1/lun2-part1"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mkdir -v /datadisk03"
ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- "sudo mount -v /dev/disk/azure/scsi1/lun2-part1 /datadisk03"

time=2024-07-22T15:43:14Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-22T15:43:15Z level=info msg=Command output to stdout:
 UUID=0693b630-41db-4edf-90f9-ed4cdd6f58fa /datadisk03 xfs defaults,discard 0 0

time=2024-07-22T15:43:15Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- \
    'echo "UUID=$(sudo blkid -s UUID -o value /dev/disk/azure/scsi1/lun2-part1) /datadisk03 xfs defaults,discard 0 0" | sudo tee -a /etc/fstab'

time=2024-07-22T15:43:15Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'

time=2024-07-22T15:43:17Z level=info msg=Command output to stdout:
 /dev/sda1 on /datadisk01 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)
/dev/sdd1 on /datadisk02 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)
/dev/sde1 on /datadisk03 type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,noquota)

time=2024-07-22T15:43:17Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN -- mount | egrep '(datadisk)'

time=2024-07-22T15:43:17Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN

time=2024-07-22T15:43:19Z level=info msg=Command output to stdout:
 Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-1010-azure x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Mon Jul 22 15:42:26 UTC 2024

  System load:  0.45              Processes:             147
  Usage of /:   5.7% of 28.02GB   Users logged in:       0
  Memory usage: 3%                IPv4 address for eth0: 10.0.0.4
  Swap usage:   0%


Expanded Security Maintenance for Applications is not enabled.

3 updates can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status



time=2024-07-22T15:43:19Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN

time=2024-07-22T15:43:19Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-22T15:43:19Z level=info msg=Attempting to delete the deployed resource group with the name: LinuxRG-a70a67
time=2024-07-22T15:43:23Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:43:23Z level=info msg=INI file 'scenarios/DeployIGonAKS/deploy-ig-aks.ini' does not exist, skipping...
time=2024-07-22T15:43:23Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:23Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-22T15:43:23Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-22T15:43:23Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-22T15:43:23Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:23Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-22T15:43:23Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-22T15:43:23Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-22T15:43:23Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-22T15:43:23Z level=info msg=Changed directory to .
time=2024-07-22T15:43:23Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-22T15:43:23Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:43:23Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-22T15:43:23Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:43:25Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup5d1208",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup5d1208",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:43:25Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.785067
time=2024-07-22T15:43:25Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup5d1208",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup5d1208",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:43:25Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-22T15:43:25Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:43:25Z level=info msg=Found resource group named: myResourceGroup5d1208
time=2024-07-22T15:43:25Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-22T15:43:34Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5d1208 in resource group MC_myResourceGroup5d1208_myAKSCluster5d1208_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5d1208 in resource group MC_myResourceGroup5d1208_myAKSCluster5d1208_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-22T15:43:34Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup5d1208
time=2024-07-22T15:43:36Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:43:36Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5d1208 in resource group MC_myResourceGroup5d1208_myAKSCluster5d1208_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5d1208 in resource group MC_myResourceGroup5d1208_myAKSCluster5d1208_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: WARNING: The behavior of this command has been altered by the following extension: aks-preview
ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5d1208 in resource group MC_myResourceGroup5d1208_myAKSCluster5d1208_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5d1208 in resource group MC_myResourceGroup5d1208_myAKSCluster5d1208_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-22T15:43:38Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/blob-vision-aks.ini' does not exist, skipping...
time=2024-07-22T15:43:38Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-22T15:43:38Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-22T15:43:38Z level=info msg=Changed directory to .
time=2024-07-22T15:43:38Z level=info msg=Executing command asynchronously:
 
time=2024-07-22T15:43:38Z level=info msg=Command output to stdout:
 
time=2024-07-22T15:43:38Z level=info msg=Finished executing:
 
time=2024-07-22T15:43:38Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-22T15:43:38Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:43:38Z level=info msg=INI file 'scenarios/DeployHAPGonARO/deploy-ha-pg-aro.ini' does not exist, skipping...
time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-22T15:43:38Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-22T15:43:38Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-22T15:43:38Z level=info msg=Changed directory to .
time=2024-07-22T15:43:38Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-22T15:43:40Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:43:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-22T15:43:40Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-22T15:43:40Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-22T15:43:40Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-22T15:43:40Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-22T15:43:40Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-22T15:43:53Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"5c553826-6f61-4fa6-b3dc-d22ab2fe87a3\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "677e0243-3276-4be3-a764-3641597d7479",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:43:53Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.711016
time=2024-07-22T15:43:53Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"5c553826-6f61-4fa6-b3dc-d22ab2fe87a3\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "677e0243-3276-4be3-a764-3641597d7479",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-22T15:43:53Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-22T15:43:53Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-22T15:44:06Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"187e52e0-c892-446f-8b83-0201fde4d5fc\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-22T15:44:06Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.726797
time=2024-07-22T15:44:06Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"187e52e0-c892-446f-8b83-0201fde4d5fc\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-22T15:44:06Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-22T15:44:06Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-22T15:45:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"523776b0-7881-4287-97c0-862dcf3c3358\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-22T15:45:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729330
time=2024-07-22T15:45:28Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"523776b0-7881-4287-97c0-862dcf3c3358\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-22T15:45:28Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-22T15:45:28Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-22T15:45:51Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-22T15:45:29.918725+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableExtendedGroups": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-22T15:45:30.028098+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-22T15:45:30.028098+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-22T15:45:30.012550+00:00",
    "key2": "2024-07-22T15:45:30.012550+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-22T15:45:51Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-22T15:45:51Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-22T15:45:55Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:52.8388936Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 647b2c45-15c1-4275-a2a4-38b0d3244f00 Correlation ID: 54d9059e-e288-4157-9b47-b6a5fddef0f3 Timestamp: 2024-07-22 15:45:52Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:53.8199193Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 2cd6bc81-bc35-4ca7-932e-0479cae60300 Correlation ID: ce099a8e-f641-458a-a7a8-7caf6a1c6414 Timestamp: 2024-07-22 15:45:53Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:54.7728137Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 28a3d552-c577-4779-8ca5-e27ca92a8100 Correlation ID: 41a28875-e49d-4dfd-9017-9c03a8534b09 Timestamp: 2024-07-22 15:45:54Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-22T15:45:55Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-22T15:45:56Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-22T15:45:56Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:52.8388936Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 647b2c45-15c1-4275-a2a4-38b0d3244f00 Correlation ID: 54d9059e-e288-4157-9b47-b6a5fddef0f3 Timestamp: 2024-07-22 15:45:52Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:53.8199193Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 2cd6bc81-bc35-4ca7-932e-0479cae60300 Correlation ID: ce099a8e-f641-458a-a7a8-7caf6a1c6414 Timestamp: 2024-07-22 15:45:53Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:54.7728137Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 28a3d552-c577-4779-8ca5-e27ca92a8100 Correlation ID: 41a28875-e49d-4dfd-9017-9c03a8534b09 Timestamp: 2024-07-22 15:45:54Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:52.8388936Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 647b2c45-15c1-4275-a2a4-38b0d3244f00 Correlation ID: 54d9059e-e288-4157-9b47-b6a5fddef0f3 Timestamp: 2024-07-22 15:45:52Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:53.8199193Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 2cd6bc81-bc35-4ca7-932e-0479cae60300 Correlation ID: ce099a8e-f641-458a-a7a8-7caf6a1c6414 Timestamp: 2024-07-22 15:45:53Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-22T15:45:54.7728137Z, assertion valid from 2024-07-22T15:05:36.0000000Z, expiry time of assertion 2024-07-22T15:10:36.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 28a3d552-c577-4779-8ca5-e27ca92a8100 Correlation ID: 41a28875-e49d-4dfd-9017-9c03a8534b09 Timestamp: 2024-07-22 15:45:54Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

