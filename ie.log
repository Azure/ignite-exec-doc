time=2024-07-02T14:56:24-07:00 level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-02T14:56:24-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-02T14:56:24-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-02T14:56:24-07:00 level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM {  0 <nil>}}]
time=2024-07-02T14:56:24-07:00 level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-02T14:56:24-07:00 level=info msg=Changed directory to .
time=2024-07-02T14:56:24-07:00 level=info msg=Executing command: export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 isInteractive=false
time=2024-07-02T14:56:24-07:00 level=info msg=Command output to stdout:
 
time=2024-07-02T14:56:24-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:56:24-07:00 level=info msg=Executing command: az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 isInteractive=false
time=2024-07-02T14:56:29-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9360cb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-02T14:56:29-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:56:29-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9360cb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-02T14:56:29-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.760481
time=2024-07-02T14:56:29-07:00 level=info msg=Attempting to extract resource group name from command output
time=2024-07-02T14:56:29-07:00 level=info msg=Found resource group resourceGroup=myVMResourceGroup9360cb
time=2024-07-02T14:56:29-07:00 level=info msg=Executing command: az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 isInteractive=false
time=2024-07-02T14:57:46-07:00 level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb",
  "identity": {
    "systemAssignedIdentity": "a8c009f1-c34a-4abc-9e37-3d26af79d2a0",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-21-84-33",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.81.71.226",
  "resourceGroup": "myVMResourceGroup9360cb",
  "zones": ""
}

time=2024-07-02T14:57:46-07:00 level=info msg=Command output to stderr:
 WARNING: Selecting "uksouth" may reduce your costs.â€¯The region you've selected may cost more for the same services. You can disable this message in the future with the command "az config set core.display_region_identified=false". Learn more at https://go.microsoft.com/fwlink/?linkid=222571 
WARNING: Ignite (November) 2023 onwards "az vm/vmss create" command will deploy Gen2-Trusted Launch VM by default. To know more about the default change and Trusted Launch, please visit https://aka.ms/TLaD
WARNING: No access was given yet to the 'myVM9360cb', because '--scope' was not provided. You should setup by creating a role assignment, e.g. 'az role assignment create --assignee <principal-id> --role contributor -g myVMResourceGroup9360cb' would let it access the current resource group. To get the pricipal id, run 'az vm show -g myVMResourceGroup9360cb -n myVM9360cb --query "identity.principalId" -otsv'

time=2024-07-02T14:57:46-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb",
  "identity": {
    "systemAssignedIdentity": "a8c009f1-c34a-4abc-9e37-3d26af79d2a0",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-21-84-33",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.81.71.226",
  "resourceGroup": "myVMResourceGroup9360cb",
  "zones": ""
}

time=2024-07-02T14:57:46-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.710846
time=2024-07-02T14:57:46-07:00 level=info msg=Executing command: az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 isInteractive=false
time=2024-07-02T14:59:55-07:00 level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup9360cb",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-02T14:59:55-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:59:56-07:00 level=info msg=Executing command: export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 isInteractive=false
time=2024-07-02T14:59:59-07:00 level=info msg=Command output to stdout:
 
time=2024-07-02T14:59:59-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:59:59-07:00 level=info msg=Executing command: ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 isInteractive=true
time=2024-07-02T14:59:59-07:00 level=info msg=Not fetching resource URIs because we're not in the OCD environment.
time=2024-07-02T15:00:00-07:00 level=info msg=Found deployed resources. resourceURIs=[/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkSecurityGroups/myVM9360cbNSG /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/publicIPAddresses/myVM9360cbPublicIP /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/virtualNetworks/myVM9360cbVNET /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkInterfaces/myVM9360cbVMNic /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/MYVMRESOURCEGROUP9360CB/providers/Microsoft.Compute/disks/myVM9360cb_OsDisk_1_2fd4d46880b34d7d85d79235268440d3 /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux]
time=2024-07-02T15:00:19-07:00 level=info msg=Not fetching resource URIs because we're not in the OCD environment.
time=2024-07-02T15:00:20-07:00 level=info msg=Found deployed resources. resourceURIs=[/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkSecurityGroups/myVM9360cbNSG /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/publicIPAddresses/myVM9360cbPublicIP /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/virtualNetworks/myVM9360cbVNET /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkInterfaces/myVM9360cbVMNic /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/MYVMRESOURCEGROUP9360CB/providers/Microsoft.Compute/disks/myVM9360cb_OsDisk_1_2fd4d46880b34d7d85d79235268440d3 /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux]
time=2024-07-02T15:00:20-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:11:57-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:11:59-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:11:59-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:14-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:16-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:16-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:30-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:31-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:31-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:22-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:23-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:23-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:21:52-07:00 level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-05T15:21:52-07:00 level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-05T15:21:52-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:21:52-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:21:52-07:00 level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-05T15:21:52-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:21:52-07:00 level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-05T15:21:52-07:00 level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-05T15:21:53-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:21:53-07:00 level=info msg=Finished executing:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-05T15:21:53-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:21:55-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89",
  "location": "westus",
  "managedBy": null,
  "name": "rgkmlq1h89",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:21:55-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.753662
time=2024-07-05T15:21:55-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89",
  "location": "westus",
  "managedBy": null,
  "name": "rgkmlq1h89",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:21:55-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:21:55-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-05T15:21:55-07:00 level=info msg=Found resource group named: rgkmlq1h89
time=2024-07-05T15:21:55-07:00 level=info msg=Executing command asynchronously:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-05T15:22:21-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

Actual{
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-05T22:21:57.339758+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89/providers/Microsoft.Storage/storageAccounts/storagekmlq1h89",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-05T22:21:57.449209+00:00",
    "key2": "2024-07-05T22:21:57.449209+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storagekmlq1h89",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storagekmlq1h89.blob.core.windows.net/",
    "dfs": "https://storagekmlq1h89.dfs.core.windows.net/",
    "file": "https://storagekmlq1h89.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storagekmlq1h89.queue.core.windows.net/",
    "table": "https://storagekmlq1h89.table.core.windows.net/",
    "web": "https://storagekmlq1h89.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgkmlq1h89",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-05T15:22:21-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.790927
time=2024-07-05T15:22:21-07:00 level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-05T22:21:57.339758+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89/providers/Microsoft.Storage/storageAccounts/storagekmlq1h89",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-05T22:21:57.449209+00:00",
    "key2": "2024-07-05T22:21:57.449209+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storagekmlq1h89",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storagekmlq1h89.blob.core.windows.net/",
    "dfs": "https://storagekmlq1h89.dfs.core.windows.net/",
    "file": "https://storagekmlq1h89.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storagekmlq1h89.queue.core.windows.net/",
    "table": "https://storagekmlq1h89.table.core.windows.net/",
    "web": "https://storagekmlq1h89.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgkmlq1h89",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-05T15:22:21-07:00 level=info msg=Finished executing:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-05T15:22:21-07:00 level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-05T15:22:22-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:22-07:00 level=info msg=Finished executing:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-05T15:22:22-07:00 level=info msg=Executing command asynchronously:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-05T15:22:23-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "created": true
}

Actual{
  "created": false
}

time=2024-07-05T15:22:23-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.859069
time=2024-07-05T15:22:23-07:00 level=info msg=Command output to stdout:
 {
  "created": false
}

time=2024-07-05T15:22:23-07:00 level=info msg=Finished executing:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-05T15:22:23-07:00 level=info msg=Executing command asynchronously:
 az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes

time=2024-07-05T15:22:26-07:00 level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.
'
time=2024-07-05T15:22:26-07:00 level=info msg=Attempting to delete the deployed resource group with the name: rgkmlq1h89
time=2024-07-05T15:22:27-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:22:27-07:00 level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.
'
StdErr: WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.

time=2024-07-05T15:22:29-07:00 level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-05T15:22:29-07:00 level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-05T15:22:29-07:00 level=info msg=Successfully built out the scenario: Env vars
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:22:29-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Finished executing:
 
time=2024-07-05T15:22:29-07:00 level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:22:29-07:00 level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-05T15:22:29-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-05T15:22:29-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-05T15:22:29-07:00 level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-05T15:22:29-07:00 level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-05T15:22:29-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:22:29-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:22:32-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup4af110",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup4af110",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:22:32-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764887
time=2024-07-05T15:22:32-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup4af110",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup4af110",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:22:32-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:22:32-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-05T15:22:32-07:00 level=info msg=Found resource group named: myVMResourceGroup4af110
time=2024-07-05T15:22:32-07:00 level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-05T15:22:51-07:00 level=debug msg=Window size changed to: 108 x 21
