time=2024-07-02T14:56:24-07:00 level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-02T14:56:24-07:00 level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-02T14:56:24-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-02T14:56:24-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-02T14:56:24-07:00 level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM {  0 <nil>}}]
time=2024-07-02T14:56:24-07:00 level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-02T14:56:24-07:00 level=info msg=Changed directory to .
time=2024-07-02T14:56:24-07:00 level=info msg=Executing command: export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 isInteractive=false
time=2024-07-02T14:56:24-07:00 level=info msg=Command output to stdout:
 
time=2024-07-02T14:56:24-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:56:24-07:00 level=info msg=Executing command: az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 isInteractive=false
time=2024-07-02T14:56:29-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9360cb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-02T14:56:29-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:56:29-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9360cb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-02T14:56:29-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.760481
time=2024-07-02T14:56:29-07:00 level=info msg=Attempting to extract resource group name from command output
time=2024-07-02T14:56:29-07:00 level=info msg=Found resource group resourceGroup=myVMResourceGroup9360cb
time=2024-07-02T14:56:29-07:00 level=info msg=Executing command: az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 isInteractive=false
time=2024-07-02T14:57:46-07:00 level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb",
  "identity": {
    "systemAssignedIdentity": "a8c009f1-c34a-4abc-9e37-3d26af79d2a0",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-21-84-33",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.81.71.226",
  "resourceGroup": "myVMResourceGroup9360cb",
  "zones": ""
}

time=2024-07-02T14:57:46-07:00 level=info msg=Command output to stderr:
 WARNING: Selecting "uksouth" may reduce your costs.â€¯The region you've selected may cost more for the same services. You can disable this message in the future with the command "az config set core.display_region_identified=false". Learn more at https://go.microsoft.com/fwlink/?linkid=222571 
WARNING: Ignite (November) 2023 onwards "az vm/vmss create" command will deploy Gen2-Trusted Launch VM by default. To know more about the default change and Trusted Launch, please visit https://aka.ms/TLaD
WARNING: No access was given yet to the 'myVM9360cb', because '--scope' was not provided. You should setup by creating a role assignment, e.g. 'az role assignment create --assignee <principal-id> --role contributor -g myVMResourceGroup9360cb' would let it access the current resource group. To get the pricipal id, run 'az vm show -g myVMResourceGroup9360cb -n myVM9360cb --query "identity.principalId" -otsv'

time=2024-07-02T14:57:46-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb",
  "identity": {
    "systemAssignedIdentity": "a8c009f1-c34a-4abc-9e37-3d26af79d2a0",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-21-84-33",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "13.81.71.226",
  "resourceGroup": "myVMResourceGroup9360cb",
  "zones": ""
}

time=2024-07-02T14:57:46-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.710846
time=2024-07-02T14:57:46-07:00 level=info msg=Executing command: az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 isInteractive=false
time=2024-07-02T14:59:55-07:00 level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup9360cb",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-02T14:59:55-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:59:56-07:00 level=info msg=Executing command: export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 isInteractive=false
time=2024-07-02T14:59:59-07:00 level=info msg=Command output to stdout:
 
time=2024-07-02T14:59:59-07:00 level=info msg=Command output to stderr:
 
time=2024-07-02T14:59:59-07:00 level=info msg=Executing command: ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 isInteractive=true
time=2024-07-02T14:59:59-07:00 level=info msg=Not fetching resource URIs because we're not in the OCD environment.
time=2024-07-02T15:00:00-07:00 level=info msg=Found deployed resources. resourceURIs=[/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkSecurityGroups/myVM9360cbNSG /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/publicIPAddresses/myVM9360cbPublicIP /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/virtualNetworks/myVM9360cbVNET /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkInterfaces/myVM9360cbVMNic /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/MYVMRESOURCEGROUP9360CB/providers/Microsoft.Compute/disks/myVM9360cb_OsDisk_1_2fd4d46880b34d7d85d79235268440d3 /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux]
time=2024-07-02T15:00:19-07:00 level=info msg=Not fetching resource URIs because we're not in the OCD environment.
time=2024-07-02T15:00:20-07:00 level=info msg=Found deployed resources. resourceURIs=[/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkSecurityGroups/myVM9360cbNSG /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/publicIPAddresses/myVM9360cbPublicIP /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/virtualNetworks/myVM9360cbVNET /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Network/networkInterfaces/myVM9360cbVMNic /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/MYVMRESOURCEGROUP9360CB/providers/Microsoft.Compute/disks/myVM9360cb_OsDisk_1_2fd4d46880b34d7d85d79235268440d3 /subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup9360cb/providers/Microsoft.Compute/virtualMachines/myVM9360cb/extensions/AADSSHLoginForLinux]
time=2024-07-02T15:00:20-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:11:57-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:11:59-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:11:59-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:14-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:16-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:12:16-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:30-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:31-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:18:31-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:22-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:23-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:19:23-07:00 level=error msg=Invalid environment: %!s(<nil>)
time=2024-07-05T15:21:52-07:00 level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Simalrity score of 0.500000 found
time=2024-07-05T15:21:52-07:00 level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-05T15:21:52-07:00 level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-05T15:21:52-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:21:52-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:21:52-07:00 level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-05T15:21:52-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:21:52-07:00 level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-05T15:21:52-07:00 level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-05T15:21:53-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:21:53-07:00 level=info msg=Finished executing:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-05T15:21:53-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:21:55-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89",
  "location": "westus",
  "managedBy": null,
  "name": "rgkmlq1h89",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:21:55-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.753662
time=2024-07-05T15:21:55-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89",
  "location": "westus",
  "managedBy": null,
  "name": "rgkmlq1h89",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:21:55-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:21:55-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-05T15:21:55-07:00 level=info msg=Found resource group named: rgkmlq1h89
time=2024-07-05T15:21:55-07:00 level=info msg=Executing command asynchronously:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-05T15:22:21-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

Actual{
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-05T22:21:57.339758+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89/providers/Microsoft.Storage/storageAccounts/storagekmlq1h89",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-05T22:21:57.449209+00:00",
    "key2": "2024-07-05T22:21:57.449209+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storagekmlq1h89",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storagekmlq1h89.blob.core.windows.net/",
    "dfs": "https://storagekmlq1h89.dfs.core.windows.net/",
    "file": "https://storagekmlq1h89.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storagekmlq1h89.queue.core.windows.net/",
    "table": "https://storagekmlq1h89.table.core.windows.net/",
    "web": "https://storagekmlq1h89.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgkmlq1h89",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-05T15:22:21-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.790927
time=2024-07-05T15:22:21-07:00 level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-05T22:21:57.339758+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-05T22:21:57.636629+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/rgkmlq1h89/providers/Microsoft.Storage/storageAccounts/storagekmlq1h89",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2024-07-05T22:21:57.449209+00:00",
    "key2": "2024-07-05T22:21:57.449209+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storagekmlq1h89",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storagekmlq1h89.blob.core.windows.net/",
    "dfs": "https://storagekmlq1h89.dfs.core.windows.net/",
    "file": "https://storagekmlq1h89.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storagekmlq1h89.queue.core.windows.net/",
    "table": "https://storagekmlq1h89.table.core.windows.net/",
    "web": "https://storagekmlq1h89.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rgkmlq1h89",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}

time=2024-07-05T15:22:21-07:00 level=info msg=Finished executing:
 az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS

time=2024-07-05T15:22:21-07:00 level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-05T15:22:22-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:22-07:00 level=info msg=Finished executing:
 export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)

time=2024-07-05T15:22:22-07:00 level=info msg=Executing command asynchronously:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-05T15:22:23-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "created": true
}

Actual{
  "created": false
}

time=2024-07-05T15:22:23-07:00 level=debug msg=Expected Similarity: 0.500000, Actual Similarity: 0.859069
time=2024-07-05T15:22:23-07:00 level=info msg=Command output to stdout:
 {
  "created": false
}

time=2024-07-05T15:22:23-07:00 level=info msg=Finished executing:
 az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob

time=2024-07-05T15:22:23-07:00 level=info msg=Executing command asynchronously:
 az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes

time=2024-07-05T15:22:26-07:00 level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.
'
time=2024-07-05T15:22:26-07:00 level=info msg=Attempting to delete the deployed resource group with the name: rgkmlq1h89
time=2024-07-05T15:22:27-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:22:27-07:00 level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.
'
StdErr: WARNING: Checking the existence of the resource group 'rgkmlq1h89'...
WARNING: Resource group 'rgkmlq1h89' exists ? : True 
ERROR: The location is restricted for provisioning of flexible servers. Please try using another region.

time=2024-07-05T15:22:29-07:00 level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-05T15:22:29-07:00 level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-05T15:22:29-07:00 level=info msg=Successfully built out the scenario: Env vars
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:22:29-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Finished executing:
 
time=2024-07-05T15:22:29-07:00 level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to /home/naman10parikh/NamanCode/executable-docs
time=2024-07-05T15:22:29-07:00 level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-05T15:22:29-07:00 level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-05T15:22:29-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-05T15:22:29-07:00 level=debug msg=Simalrity score of 0.300000 found
time=2024-07-05T15:22:29-07:00 level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-05T15:22:29-07:00 level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-05T15:22:29-07:00 level=info msg=Changed directory to .
time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-05T15:22:29-07:00 level=debug msg=Window size changed to: 124 x 21
time=2024-07-05T15:22:29-07:00 level=info msg=Command output to stdout:
 
time=2024-07-05T15:22:29-07:00 level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-05T15:22:29-07:00 level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:22:32-07:00 level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup4af110",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup4af110",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:22:32-07:00 level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.764887
time=2024-07-05T15:22:32-07:00 level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/d1aa957b-94f5-49ef-b29a-0178c58a7132/resourceGroups/myVMResourceGroup4af110",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup4af110",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-05T15:22:32-07:00 level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-05T15:22:32-07:00 level=debug msg=Attempting to extract resource group name from command output
time=2024-07-05T15:22:32-07:00 level=info msg=Found resource group named: myVMResourceGroup4af110
time=2024-07-05T15:22:32-07:00 level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-05T15:22:51-07:00 level=debug msg=Window size changed to: 108 x 21
time=2024-07-11T20:20:56Z level=info msg=INI file 'scenarios/CreateRHELVMAndSSH/README.ini' does not exist, skipping...
time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-11T20:20:56Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-11T20:20:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:20:56Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:20:56Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-11T20:20:56Z level=info msg=Successfully built out the scenario: Quickstart: Create a Red Hat Enterprise Linux virtual machine with the Azure CLI on Azure
time=2024-07-11T20:20:56Z level=info msg=Changed directory to .
time=2024-07-11T20:20:56Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-11T20:20:56Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:20:56Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="RedHat:RHEL:8-LVM:latest"

time=2024-07-11T20:20:56Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:21:00Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9a29a1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:21:00Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.761950
time=2024-07-11T20:21:00Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1",
  "location": "westeurope",
  "managedBy": null,
  "name": "myVMResourceGroup9a29a1",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:21:00Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:21:00Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:21:00Z level=info msg=Found resource group named: myVMResourceGroup9a29a1
time=2024-07-11T20:21:00Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-11T20:22:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}

Actual{
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1/providers/Microsoft.Compute/virtualMachines/myVM9a29a1",
  "identity": {
    "systemAssignedIdentity": "d0d9148b-bc1b-4663-922b-1391eb028e0a",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-43-F6-45",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.174.184.171",
  "resourceGroup": "myVMResourceGroup9a29a1",
  "zones": ""
}

time=2024-07-11T20:22:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.721691
time=2024-07-11T20:22:50Z level=info msg=Command output to stdout:
 {
  "fqdns": "",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1/providers/Microsoft.Compute/virtualMachines/myVM9a29a1",
  "identity": {
    "systemAssignedIdentity": "d0d9148b-bc1b-4663-922b-1391eb028e0a",
    "userAssignedIdentities": {}
  },
  "location": "westeurope",
  "macAddress": "00-0D-3A-43-F6-45",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.174.184.171",
  "resourceGroup": "myVMResourceGroup9a29a1",
  "zones": ""
}

time=2024-07-11T20:22:50Z level=info msg=Finished executing:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-11T20:22:50Z level=info msg=Executing command asynchronously:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-11T20:24:58Z level=info msg=Command output to stdout:
 {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroup9a29a1/providers/Microsoft.Compute/virtualMachines/myVM9a29a1/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "westeurope",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisionAfterExtensions": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myVMResourceGroup9a29a1",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}

time=2024-07-11T20:24:58Z level=info msg=Finished executing:
 az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME

time=2024-07-11T20:24:58Z level=info msg=Executing command asynchronously:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-11T20:25:00Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:25:00Z level=info msg=Finished executing:
 export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)

time=2024-07-11T20:25:00Z level=info msg=Executing command asynchronously:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-11T20:25:02Z level=info msg=Command output to stdout:
 Activate the web console with: systemctl enable --now cockpit.socket

Register this system with Red Hat Insights: insights-client --register
Create an account or view all your systems at https://red.ht/insights-dashboard

time=2024-07-11T20:25:02Z level=info msg=Finished executing:
 ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS

time=2024-07-11T20:25:02Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:25:02Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroup9a29a1
time=2024-07-11T20:25:06Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:25:06Z level=info msg=INI file 'scenarios/CreateAKSWebApp/README.ini' does not exist, skipping...
time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!--## Validate application is working

Wait for the SSL certificate to issue. The following command will query the 
status of the SSL certificate for 3 minutes. In rare occasions it may take up to 
15 minutes for Lets Encrypt to issue a successful challenge and 
the ready state to be 'True'

```bash
runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(kubectl get certificate --output jsonpath={..status.conditions[0].status}); echo $STATUS; if [ "$STATUS" = 'True' ]; then break; else sleep 10; fi; done
```

Validate SSL certificate is True by running the follow command:

```bash
kubectl get certificate --output jsonpath={..status.conditions[0].status}
```

Results:



time=2024-07-11T20:25:06Z level=debug msg=Found HTML block with the content: <!--
```ASCII
True
```


time=2024-07-11T20:25:06Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:25:06Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
` is not a paragraph, it is a Heading
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `curl "http://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:25:06Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `cluster_issuer_variables=$(<cluster-issuer-prod.yml)
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:25:06Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:25:06Z level=debug msg=Found 24 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
 Register to AKS Azure Resource Providers Verify Microsoft.OperationsManagement and Microsoft.OperationalInsights providers are registered on your subscription. These are Azure resource providers required to support [Container insights](https://docs.microsoft.com/azure/azure-monitor/containers/container-insights-overview). To check the registration status, run the following commands {  0 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait
 Install NGINX Ingress Controller  {  0 <nil>}} {bash cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF
 Deploy the Application A test voting app YML file is already prepared. {  0 <nil>}} {bash kubectl apply -f azure-vote-start.yml
 Deploy the Application To deploy this app, run the following command {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done
 Test The Application [!Note]
It often takes 2-3 minutes for the PODs to be created and the site to be reachable via HTTP {  0 <nil>}} {bash curl "http://$FQDN"
 Test The Application  {HTML <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div>
        </form>
        </div>
    </div>
</body>
</html>
 0.3 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial will install cert-manager into the cert-manager namespace. It is possible to run cert-manager in a different namespace, although you will need to make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. This can be installed by running the following: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the certmanager.k8s.io/disable-validation: "true" label to the cert-manager namespace by running the following. This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache {  0 <nil>}} {bash helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0
 Obtain certificate via Helm Charts Install Cert-Manager addon via helm by running the following: {  0 <nil>}} {bash cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF
 Obtain certificate via Helm Charts ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that are able to generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request.
The issuer we are using can be found in the `cluster-issuer-prod.yml file` {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yml)
 Obtain certificate via Helm Charts  {  0 <nil>}} {bash cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF
 Obtain certificate via Helm Charts The full YAML file can be found in `azure-vote-nginx-ssl.yml` {  0 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done
 Browse your AKS Deployment Secured via HTTPS [!Note]
It often takes 2-3 minutes for the SSL certificate to propogate and the site to be reachable via HTTPS. {  0 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS Deployment Secured via HTTPS  {  0 <nil>}}]
time=2024-07-11T20:25:06Z level=info msg=Successfully built out the scenario: Quickstart: Deploy a Scalable & Secure Azure Kubernetes Service cluster using the Azure CLI
time=2024-07-11T20:25:06Z level=info msg=Changed directory to .
time=2024-07-11T20:25:06Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:25:07Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:25:07Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:25:07Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:25:07Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:25:10Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup8f92a6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:25:10Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-11T20:25:10Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup8f92a6",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:25:10Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:25:10Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:25:10Z level=info msg=Found resource group named: myAKSResourceGroup8f92a6
time=2024-07-11T20:25:10Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:25:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.xxx.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx",
    "location": "eastus",
    "name": "myVNetxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.xxx.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myAKSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxx/subnets/mySNxxx",
        "name": "mySNxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.169.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6",
    "location": "westeurope",
    "name": "myVNet8f92a6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup8f92a6",
    "resourceGuid": "0241b791-836e-4ed0-9fff-2f2b7f4b16a8",
    "subnets": [
      {
        "addressPrefix": "10.169.0.0/22",
        "delegations": [],
        "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6/subnets/mySN8f92a6",
        "name": "mySN8f92a6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup8f92a6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:25:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.720060
time=2024-07-11T20:25:24Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.169.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6",
    "location": "westeurope",
    "name": "myVNet8f92a6",
    "provisioningState": "Succeeded",
    "resourceGroup": "myAKSResourceGroup8f92a6",
    "resourceGuid": "0241b791-836e-4ed0-9fff-2f2b7f4b16a8",
    "subnets": [
      {
        "addressPrefix": "10.169.0.0/22",
        "delegations": [],
        "etag": "W/\"9e6ee878-67eb-459c-9ad2-e31467a2c625\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6/subnets/mySN8f92a6",
        "name": "mySN8f92a6",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myAKSResourceGroup8f92a6",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:25:24Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:25:24Z level=info msg=Executing command asynchronously:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-11T20:25:33Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:25:33Z level=info msg=Finished executing:
 az provider register --namespace Microsoft.Insights
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights

time=2024-07-11T20:25:33Z level=info msg=Executing command asynchronously:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-11T20:30:37Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": {
    "omsagent": {
      "config": {
        "logAnalyticsWorkspaceResourceID": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/defaultresourcegroup-weu/providers/microsoft.operationalinsights/workspaces/defaultworkspace-325e7c34-99fb-4190-aa87-1df746c67705-weu",
        "useAADAuth": "true"
      },
      "enabled": true,
      "identity": null
    }
  },
  "agentPoolProfiles": [
    {
      "availabilityZones": [
        "1",
        "2",
        "3"
      ],
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": true,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": 3,
      "maxPods": 30,
      "minCount": 1,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup8f92a6/providers/Microsoft.Network/virtualNetworks/myVNet8f92a6/subnets/mySN8f92a6",
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": {
    "balanceSimilarNodeGroups": "false",
    "expander": "random",
    "maxEmptyBulkDelete": "10",
    "maxGracefulTerminationSec": "600",
    "maxNodeProvisionTime": "15m",
    "maxTotalUnreadyPercentage": "45",
    "newPodScaleUpDelay": "0s",
    "okTotalUnreadyCount": "3",
    "scaleDownDelayAfterAdd": "10m",
    "scaleDownDelayAfterDelete": "10s",
    "scaleDownDelayAfterFailure": "3m",
    "scaleDownUnneededTime": "10m",
    "scaleDownUnreadyTime": "20m",
    "scaleDownUtilizationThreshold": "0.5",
    "scanInterval": "10s",
    "skipNodesWithLocalStorage": "false",
    "skipNodesWithSystemPods": "true"
  },
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": "stable"
  },
  "azureMonitorProfile": {
    "metrics": null
  },
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-iq239nby.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-iq239nby.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup8f92a6/providers/Microsoft.ContainerService/managedClusters/myAKSCluster8f92a6",
  "identity": {
    "delegatedResources": null,
    "principalId": "317654c8-c25d-49af-b5f1-bec847f89bd1",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "7b262e02-c6e6-4097-8093-1c84fb33278e",
      "objectId": "d942fe5e-1307-4549-9c88-e239ac5be42d",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster8f92a6-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": null,
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster8f92a6",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope/providers/Microsoft.Network/publicIPAddresses/1a8239a3-edee-43f9-b50e-1d836e78723e",
          "resourceGroup": "MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": "azure",
    "networkMode": null,
    "networkPlugin": "azure",
    "networkPluginMode": null,
    "networkPolicy": "azure",
    "outboundType": "loadBalancer",
    "podCidr": null,
    "podCidrs": null,
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup8f92a6_myAKSCluster8f92a6_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup8f92a6",
  "resourceUid": "66903fd58709cf00012cd1c3",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": {
    "adminPassword": null,
    "adminUsername": "azureuser",
    "enableCsiProxy": true,
    "gmsaProfile": null,
    "licenseType": null
  },
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-11T20:30:37Z level=info msg=Finished executing:
 export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)
az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --auto-upgrade-channel stable \
  --enable-cluster-autoscaler \
  --enable-addons monitoring \
  --location $REGION \
  --node-count 1 \
  --min-count 1 \
  --max-count 3 \
  --network-plugin azure \
  --network-policy azure \
  --vnet-subnet-id $MY_SN_ID \
  --no-ssh-key \
  --node-vm-size Standard_DS2_v2 \
  --zones 1 2 3

time=2024-07-11T20:30:37Z level=info msg=Executing command asynchronously:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-11T20:30:37Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:30:37Z level=info msg=Finished executing:
 if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi

time=2024-07-11T20:30:37Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-11T20:30:39Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:30:39Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing

time=2024-07-11T20:30:39Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-11T20:30:43Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-36625524-vmss000000   Ready    agent   2m26s   v1.28.9

time=2024-07-11T20:30:43Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-11T20:30:43Z level=info msg=Executing command asynchronously:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-11T20:31:51Z level=info msg=Command output to stdout:
 "ingress-nginx" has been added to your repositories
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ
Release "ingress-nginx" does not exist. Installing it now.
NAME: ingress-nginx
LAST DEPLOYED: Thu Jul 11 20:30:54 2024
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes for the load balancer IP to be available.
You can watch the status by running 'kubectl get service --namespace ingress-nginx ingress-nginx-controller --output wide --watch'

An example Ingress that makes use of the controller:
  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: foo
  spec:
    ingressClassName: nginx
    rules:
      - host: www.example.com
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: exampleService
                  port:
                    number: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
      - hosts:
        - www.example.com
        secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls

time=2024-07-11T20:31:51Z level=info msg=Finished executing:
 export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
  --set controller.service.loadBalancerIP=$MY_STATIC_IP \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
  --wait

time=2024-07-11T20:31:51Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-11T20:31:51Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:31:51Z level=info msg=Finished executing:
 cat << EOF > azure-vote-start.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: docker.io/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: default
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: azure-vote-front
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-vote-front
            port:
              number: 80
EOF

time=2024-07-11T20:31:51Z level=info msg=Executing command asynchronously:
 kubectl apply -f azure-vote-start.yml

time=2024-07-11T20:31:54Z level=info msg=Command output to stdout:
 deployment.apps/azure-vote-back created
service/azure-vote-back created
deployment.apps/azure-vote-front created
service/azure-vote-front created
ingress.networking.k8s.io/vote-ingress created

time=2024-07-11T20:31:54Z level=info msg=Finished executing:
 kubectl apply -f azure-vote-start.yml

time=2024-07-11T20:31:54Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:32:36Z level=info msg=Command output to stdout:
 False
False
False
False
True

time=2024-07-11T20:32:36Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get pods -l app=azure-vote-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'); echo $STATUS;
   if [ "$STATUS" == 'True' ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:32:36Z level=info msg=Executing command asynchronously:
 curl "http://$FQDN"

time=2024-07-11T20:32:37Z level=info msg=Command output to stdout:
 <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" type="text/css" href="/static/default.css">
    <title>Azure Voting App</title>

    <script language="JavaScript">
        function send(form){
        }
    </script>

</head>
<body>
    <div id="container">
        <form id="form" name="form" action="/"" method="post"><center>
        <div id="logo">Azure Voting App</div>
        <div id="space"></div>
        <div id="form">
        <button name="vote" value="Cats" onclick="send()" class="button button1">Cats</button>
        <button name="vote" value="Dogs" onclick="send()" class="button button2">Dogs</button>
        <button name="vote" value="reset" onclick="send()" class="button button3">Reset</button>
        <div id="space"></div>
        <div id="space"></div>
        <div id="results"> Cats - 0 | Dogs - 0 </div> 
        </form>        
        </div>
    </div>     
</body>
</html>
time=2024-07-11T20:32:37Z level=info msg=Finished executing:
 curl "http://$FQDN"

time=2024-07-11T20:32:37Z level=info msg=Executing command asynchronously:
 kubectl create namespace cert-manager

time=2024-07-11T20:32:37Z level=info msg=Command output to stdout:
 namespace/cert-manager created

time=2024-07-11T20:32:37Z level=info msg=Finished executing:
 kubectl create namespace cert-manager

time=2024-07-11T20:32:37Z level=info msg=Executing command asynchronously:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 namespace/cert-manager labeled

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 "jetstack" has been added to your repositories

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 helm repo add jetstack https://charts.jetstack.io

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 helm repo update

time=2024-07-11T20:32:42Z level=info msg=Command output to stdout:
 Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "ingress-nginx" chart repository
...Successfully got an update from the "jetstack" chart repository
Update Complete. âŽˆHappy Helming!âŽˆ

time=2024-07-11T20:32:42Z level=info msg=Finished executing:
 helm repo update

time=2024-07-11T20:32:42Z level=info msg=Executing command asynchronously:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 NAME: cert-manager
LAST DEPLOYED: Thu Jul 11 20:32:44 2024
NAMESPACE: cert-manager
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
cert-manager v1.7.0 has been deployed successfully!

In order to begin issuing certificates, you will need to set up a ClusterIssuer
or Issuer resource (for example, by creating a 'letsencrypt-staging' issuer).

More information on the different types of issuers and how to configure them
can be found in our documentation:

https://cert-manager.io/docs/configuration/

For information on how to configure cert-manager to automatically provision
Certificates for Ingress resources, take a look at the `ingress-shim`
documentation:

https://cert-manager.io/docs/usage/ingress/

time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.0

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 cat <<EOF > cluster-issuer-prod.yml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: $SSL_EMAIL_ADDRESS
    # ACME server URL for Letâ€™s Encryptâ€™s prod environment.
    # The staging environment will not issue trusted certificates but is
    # used to ensure that the verification process is working properly
    # before moving to production
    server: https://acme-v02.api.letsencrypt.org/directory
    # Secret resource used to store the account's private key.
    privateKeySecretRef:
      name: letsencrypt
    # Enable the HTTP-01 challenge provider
    # you prove ownership of a domain by ensuring that a particular
    # file is present at the domain
    solvers:
    - http01:
        ingress:
          class: nginx
        podTemplate:
          spec:
            nodeSelector:
              "kubernetes.io/os": linux
EOF

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 cluster_issuer_variables=$(<cluster-issuer-prod.yml)

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 cat << EOF > azure-vote-nginx-ssl.yml
---
# INGRESS WITH SSL PROD
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vote-ingress
  namespace: default
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - $FQDN
    secretName: azure-vote-nginx-secret
  rules:
    - host: $FQDN
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: azure-vote-front
              port:
                number: 80
EOF

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 57.153.6.62

time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
   STATUS=$(kubectl get svc --namespace=ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
   echo $STATUS;
   if [ "$STATUS" == "$MY_STATIC_IP" ]; then
      break;
   else
      sleep 10;
   fi;
done

time=2024-07-11T20:33:17Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-11T20:33:17Z level=info msg=Command output to stdout:
 You can now visit your web server at https://mydnslabel8f92a6.westeurope.cloudapp.azure.com

time=2024-07-11T20:33:17Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$FQDN"

time=2024-07-11T20:33:17Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:33:17Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup8f92a6
time=2024-07-11T20:33:21Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:33:21Z level=info msg=INI file 'scenarios/CreateAKSDeployment/README.ini' does not exist, skipping...
time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-11T20:33:21Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-11T20:33:21Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:33:21Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:33:21Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:33:21Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:33:21Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-11T20:33:21Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-11T20:33:21Z level=info msg=Changed directory to .
time=2024-07-11T20:33:21Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:33:21Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:33:21Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:33:21Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:33:24Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup04ea4a",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup04ea4a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:33:24Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.750683
time=2024-07-11T20:33:24Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup04ea4a",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup04ea4a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:33:24Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:33:24Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:33:24Z level=info msg=Found resource group named: myAKSResourceGroup04ea4a
time=2024-07-11T20:33:24Z level=info msg=Executing command asynchronously:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-11T20:37:09Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-xxh60r2c.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-xxh60r2c.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup04ea4a/providers/Microsoft.ContainerService/managedClusters/myAKSCluster04ea4a",
  "identity": {
    "delegatedResources": null,
    "principalId": "b860ded6-e1b3-449d-be2f-6049b2feb991",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "0943991a-a7a8-45ae-a715-2bc6aa3b1036",
      "objectId": "3e2e4e8e-3bb5-4962-be0d-c19217f075c8",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster04ea4a-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/N7iKuyTQeFrNT9tI2sz64xbIeMoyC6S2/AaJgSRvV2WDqixmRhpWbbLdn8cCQspKMch8suH3oJQ4sYNHzHvqlbrW/JbnAnTibndgjD8a/30h3nmqUvzgs5LOb+RNxoVzGQYNu+Y0fUV+BFp8JBI7F7vcNub+d31j1bYV4/FToR8kV//LfHUkCiy4cIyvhiMJTdSgAp551TocavjH6ahtUF3V5MG3fA7V7t1iPZCDk7mXB+5TYOkpSH4yi1TAnMrqJFEzC/MMG3edXh3rK3Xls2T3gZaTlBMqTQUNqSCRfDK3PK7gcXF0PKBtOOuZZ87yFZgjyhJZA4n1/7Oy0d83"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster04ea4a",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope/providers/Microsoft.Network/publicIPAddresses/8247bd65-65d1-45c6-bc79-682d1217cfec",
          "resourceGroup": "MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup04ea4a_myAKSCluster04ea4a_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup04ea4a",
  "resourceUid": "6690419e99f6b000016c7cf6",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-11T20:37:09Z level=info msg=Finished executing:
 az aks create --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --enable-managed-identity --node-count 1 --generate-ssh-keys

time=2024-07-11T20:37:09Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:37:10Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:10Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:37:10Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-11T20:37:11Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-26792675-vmss000000   Ready    agent   64s   v1.28.9

time=2024-07-11T20:37:11Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-11T20:37:11Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-11T20:37:11Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-11T20:37:11Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup04ea4a
time=2024-07-11T20:37:16Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:37:16Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-11T20:37:17Z level=info msg=INI file 'scenarios/CreateContainerAppDeploymentFromSource/README.ini' does not exist, skipping...
time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Found HTML block with the content: <!--expected_similarity=0.5-->


time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Simalrity score of 0.500000 found
time=2024-07-11T20:37:17Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX
 Define Environment Variables The first step in this tutorial is to define environment variables. **Replace the values on the right with your own unique values.** These values will be used throughout the tutorial to create resources and configure the application. Use lowercase and no special characters for the storage account name. {  0 <nil>}} {bash git clone https://github.com/Azure/computer-vision-nextjs-webapp.git
 Clone the sample repository First, we're going to clone this repository onto our local machines. This will provide the starter code required to provide the functionality for the simple application outlined above. We can clone with a simple git command. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME",
  "location": "$REGION",
  "managedBy": null,
  "name": "$MY_RESOURCE_GROUP_NAME",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.5 <nil>}} {bash az storage account create --name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION --sku Standard_LRS
 Create the storage account To create a storage account in this resource group we need to run a simple command. To this command, we are passing the name of the storage account, the resource group to deploy it in, the physical region to deploy it in, and the SKU of the storage account. All values are configured using environment variables. {json {
  "accessTier": "Hot",
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": null,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2023-08-10T14:37:41.276351+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2023-08-10T14:37:41.370163+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.Storage/storageAccounts/$MY_STORAGE_ACCOUNT_NAME",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "keyCreationTime": {
    "key1": "2023-08-10T14:37:41.370163+00:00",
    "key2": "2023-08-10T14:37:41.370163+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "$REGION",
  "minimumTlsVersion": "TLS1_0",
  "name": "$MY_STORAGE_ACCOUNT_NAME",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://$MY_STORAGE_ACCOUNT_NAME.blob.core.windows.net/",
    "dfs": "https://$MY_STORAGE_ACCOUNT_NAME.dfs.core.windows.net/",
    "file": "https://$MY_STORAGE_ACCOUNT_NAME.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://$MY_STORAGE_ACCOUNT_NAME.queue.core.windows.net/",
    "table": "https://$MY_STORAGE_ACCOUNT_NAME.table.core.windows.net/",
    "web": "https://$MY_STORAGE_ACCOUNT_NAME.z22.web.core.windows.net/"
  },
  "primaryLocation": "$REGION",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
 0.5 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name $MY_STORAGE_ACCOUNT_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "[0].value" --output tsv)
 Create the storage account We also need to store one of the API keys for the storage account into an environment variable for later use (to create a container, and put it into an environment file for the code). We are calling the `keys list` command on the storage account and storing the first one in a `STORAGE_ACCOUNT_KEY` environment variable. {  0 <nil>}} {bash az storage container create --name images --account-name $MY_STORAGE_ACCOUNT_NAME --account-key $STORAGE_ACCOUNT_KEY --public-access blob
 Create a container in the storage account Run the following command to create an `images` container in the storage account we just created. User uploaded images will be stored as blobs in this container. {json {
  "created": true
}
 0.5 <nil>}} {bash az postgres flexible-server create \
  --name $MY_DATABASE_SERVER_NAME \
  --database-name $MY_DATABASE_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --tier Burstable \
  --sku-name Standard_B1ms \
  --storage-size 32 \
  --version 15 \
  --admin-user $MY_DATABASE_USERNAME \
  --admin-password $MY_DATABASE_PASSWORD \
  --yes
 Create a database We will be creating an Azure Database for PostgreSQL flexible server for the application to store users and their votes. We are passing several arguments to the `create` command: {json {
  "connectionString": "postgresql://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_NAME.postgres.database.azure.com/flexibleserverdb?sslmode=require",
  "databaseName": "$MY_DATABASE_NAME",
  "firewallName": "FirewallIPAddress_2023-8-10_10-53-21",
  "host": "$MY_DATABASE_NAME.postgres.database.azure.com",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_NAME",
  "location": "$REGION",
  "password": "$MY_DATABASE_PASSWORD",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "skuname": "Standard_B1ms",
  "username": "$MY_DATABASE_USERNAME",
  "version": "15"
}
 0.5 <nil>}} {bash export DATABASE_URL="postgres://$MY_DATABASE_USERNAME:$MY_DATABASE_PASSWORD@$MY_DATABASE_SERVER_NAME.postgres.database.azure.com/$MY_DATABASE_NAME"
 Create a database We also need to store the connection string to the database into an environment variable for later use. This URL will allow us to access the database within the resource we just created. {  0 <nil>}} {bash az cognitiveservices account create \
    --name $MY_COMPUTER_VISION_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --kind ComputerVision \
    --sku S1 \
    --yes
 Create a Computer Vision resource We will be creating a Computer Vision resource to be able to identify cats or dogs in the pictures users upload. Creating a Computer Vision resource can be done with a single command. We are passing several arguments to the `create` command: {json {
  "etag": "\"090ac83c-0000-0700-0000-64d4fcd80000\"",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.CognitiveServices/accounts/$MY_COMPUTER_VISION_NAME",
  "identity": null,
  "kind": "ComputerVision",
  "location": "$REGION",
  "name": "$MY_COMPUTER_VISION_NAME",
  "properties": {
    "allowedFqdnList": null,
    "apiProperties": null,
    "callRateLimit": {
      "count": null,
      "renewalPeriod": null,
      "rules": [
        {
          "count": 30.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision.recognizeText",
          "matchPatterns": [
            {
              "method": "POST",
              "path": "vision/recognizeText"
            },
            {
              "method": "GET",
              "path": "vision/textOperations/*"
            },
            {
              "method": "*",
              "path": "vision/read/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 15.0,
          "dynamicThrottlingEnabled": true,
          "key": "vision",
          "matchPatterns": [
            {
              "method": "*",
              "path": "vision/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        },
        {
          "count": 500.0,
          "dynamicThrottlingEnabled": null,
          "key": "container.billing",
          "matchPatterns": [
            {
              "method": "*",
              "path": "billing/*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 10.0
        },
        {
          "count": 20.0,
          "dynamicThrottlingEnabled": true,
          "key": "default",
          "matchPatterns": [
            {
              "method": "*",
              "path": "*"
            }
          ],
          "minCount": null,
          "renewalPeriod": 1.0
        }
      ]
    },
    "capabilities": [
      {
        "name": "DynamicThrottling",
        "value": null
      },
      {
        "name": "VirtualNetworks",
        "value": null
      },
      {
        "name": "Container",
        "value": "ComputerVision.VideoAnalytics,ComputerVision.ComputerVisionRead,ComputerVision.ocr,ComputerVision.readfile,ComputerVision.readfiledsd,ComputerVision.recognizetext,ComputerVision.ComputerVision,ComputerVision.ocrlayoutworker,ComputerVision.ocrcontroller,ComputerVision.ocrdispatcher,ComputerVision.ocrbillingprocessor,ComputerVision.ocranalyzer,ComputerVision.ocrpagesplitter,ComputerVision.ocrapi,ComputerVision.ocrengineworker"
      }
    ],
    "customSubDomainName": null,
    "dateCreated": "2023-08-10T15:06:00.4272845Z",
    "deletionDate": null,
    "disableLocalAuth": null,
    "dynamicThrottlingEnabled": null,
    "encryption": null,
    "endpoint": "https://$REGION.api.cognitive.microsoft.com/",
    "endpoints": {
      "Computer Vision": "https://$REGION.api.cognitive.microsoft.com/",
      "Container": "https://$REGION.api.cognitive.microsoft.com/"
    },
    "internalId": "93645816f9594fe49a8f4023c0bf34b4",
    "isMigrated": false,
    "migrationToken": null,
    "networkAcls": null,
    "privateEndpointConnections": [],
    "provisioningState": "Succeeded",
    "publicNetworkAccess": "Enabled",
    "quotaLimit": null,
    "restore": null,
    "restrictOutboundNetworkAccess": null,
    "scheduledPurgeDate": null,
    "skuChangeInfo": null,
    "userOwnedStorage": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "sku": {
    "capacity": null,
    "family": null,
    "name": "S1",
    "size": null,
    "tier": null
  },
  "systemData": {
    "createdAt": "2023-08-10T15:06:00.107300+00:00",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T15:06:00.107300+00:00",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "tags": null,
  "type": "Microsoft.CognitiveServices/accounts"
}
 0.5 <nil>}} {bash export COMPUTER_VISION_ENDPOINT=$(az cognitiveservices account show --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.endpoint" --output tsv)
export COMPUTER_VISION_KEY=$(az cognitiveservices account keys list --name $MY_COMPUTER_VISION_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "key1" --output tsv)
 Create a Computer Vision resource To access our computer vision resource, we need both the endpoint and the key. With the Azure CLI, we have access to two `az cognitiveservices account` commands: `show` and `keys list`, which give us what we need. {  0 <nil>}} {bash az extension add --upgrade -n containerapp
 Deploy the code into a Container App Now that we've got our storage, database, and Computer Vision resources all set up, we are ready to deploy the application code. To do this, we're going to use Azure Container Apps to host a containerized build of our Next.js app. The `Dockerfile` is already created at the root of the repository, so all we need to do is run a single command to deploy the code. Before running this command, we first need to install the containerapp extension for the Azure CLI. {  0 <nil>}} {bash az containerapp up \
  --name $MY_CONTAINER_APP_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --location $REGION \
  --environment $MY_CONTAINER_APP_ENV_NAME \
  --context-path computer-vision-nextjs-webapp \
  --source computer-vision-nextjs-webapp \
  --target-port 3000 \
  --ingress external \
  --env-vars \
    AZURE_DATABASE_URL=$DATABASE_URL \
    AZURE_COMPUTER_VISION_KEY=$COMPUTER_VISION_KEY \
    AZURE_COMPUTER_VISION_ENDPOINT=$COMPUTER_VISION_ENDPOINT \
    AZURE_STORAGE_ACCOUNT_NAME=$MY_STORAGE_ACCOUNT_NAME \
    AZURE_STORAGE_ACCOUNT_KEY=$STORAGE_ACCOUNT_KEY
 Deploy the code into a Container App This command will create an Azure Container Registry resource to host our Docker image, an Azure Container App resource which runs the image, and an Azure Container App Environment resource for our image. Let's break down what we're passing into the command. {  0 <nil>}} {bash az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME
 Deploy the code into a Container App We can verify that the command was successful by using: {json {
  "id": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/containerapps/$MY_CONTAINER_APP_NAME",
  "identity": {
    "type": "None"
  },
  "location": "West US",
  "name": "$MY_CONTAINER_APP_NAME",
  "properties": {
    "configuration": {
      "activeRevisionsMode": "Single",
      "dapr": null,
      "ingress": {
        "allowInsecure": false,
        "clientCertificateMode": null,
        "corsPolicy": null,
        "customDomains": null,
        "exposedPort": 0,
        "external": true,
        "fqdn": "$MY_CONTAINER_APP_NAME.kindocean-a506af76.$REGION.azurecontainerapps.io",
        "ipSecurityRestrictions": null,
        "stickySessions": null,
        "targetPort": 3000,
        "traffic": [
          {
            "latestRevision": true,
            "weight": 100
          }
        ],
        "transport": "Auto"
      },
      "maxInactiveRevisions": null,
      "registries": null,
      "secrets": null,
      "service": null
    },
    "customDomainVerificationId": "06C64CD176439F8B6CCBBE1B531758828A5CACEABFB30B4DC9750641532924F6",
    "environmentId": "/subscriptions/fake3265-2f64-47a4-8df4-7e41ab70c8dh/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "eventStreamEndpoint": "https://$REGION.azurecontainerapps.dev/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/containerApps/$MY_CONTAINER_APP_NAME/eventstream",
    "latestReadyRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "latestRevisionFqdn": "$MY_CONTAINER_APP_NAME--jl6fh75.kindocean-a506af76.$REGION.azurecontainerapps.io",
    "latestRevisionName": "$MY_CONTAINER_APP_NAME--jl6fh75",
    "managedEnvironmentId": "/subscriptions/eb9d8265-2f64-47a4-8df4-7e41db70c8d8/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.App/managedEnvironments/$MY_CONTAINER_APP_ENV_NAME",
    "outboundIpAddresses": ["20.237.221.47"],
    "provisioningState": "Succeeded",
    "runningStatus": "Running",
    "template": {
      "containers": [
        {
          "env": [
            {
              "name": "AZURE_DATABASE_URL",
              "value": "$DATABASE_URL"
            },
            {
              "name": "AZURE_COMPUTER_VISION_KEY",
              "value": "$COMPUTER_VISION_KEY"
            },
            {
              "name": "AZURE_COMPUTER_VISION_ENDPOINT",
              "value": "$COMPUTER_VISION_ENDPOINT"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "$MY_STORAGE_ACCOUNT_NAME"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "$STORAGE_ACCOUNT_KEY"
            }
          ],
          "image": "ralphr123/cn-app",
          "name": "$MY_CONTAINER_APP_NAME",
          "resources": {
            "cpu": 0.5,
            "ephemeralStorage": "2Gi",
            "memory": "1Gi"
          }
        }
      ],
      "initContainers": null,
      "revisionSuffix": "",
      "scale": {
        "maxReplicas": 10,
        "minReplicas": null,
        "rules": null
      },
      "serviceBinds": null,
      "terminationGracePeriodSeconds": null,
      "volumes": null
    },
    "workloadProfileName": null
  },
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "systemData": {
    "createdAt": "2023-08-10T21:50:07.2125698",
    "createdBy": "username@domain.com",
    "createdByType": "User",
    "lastModifiedAt": "2023-08-10T21:50:07.2125698",
    "lastModifiedBy": "username@domain.com",
    "lastModifiedByType": "User"
  },
  "type": "Microsoft.App/containerApps"
}
 0.5 <nil>}} {bash export CONTAINER_APP_IP=$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.outboundIpAddresses[0]" --output tsv)
 Create a database firewall rule By default, our database is configured to allow traffic from an allowlist of IP addresses. We need to add the IP of our newly deployed Container App to this allowlist. We can get the IP from the `az containerapp show` command. {  0 <nil>}} {bash az postgres flexible-server firewall-rule create \
  --name $MY_DATABASE_SERVER_NAME \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --rule-name allow-container-app \
  --start-ip-address $CONTAINER_APP_IP \
  --end-ip-address $CONTAINER_APP_IP
 Create a database firewall rule We can now add this IP as a firewall rule with this command: {json {
  "endIpAddress": "20.237.221.47",
  "id": "/subscriptions/ab9d8365-2f65-47a4-8df4-7e40db70c8d2/resourceGroups/$MY_RESOURCE_GROUP_NAME/providers/Microsoft.DBforPostgreSQL/flexibleServers/$MY_DATABASE_SERVER_NAME/firewallRules/allow-container-app",
  "name": "allow-container-app",
  "resourceGroup": "$MY_RESOURCE_GROUP_NAME",
  "startIpAddress": "20.237.221.47",
  "systemData": null,
  "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules"
}
 0.5 <nil>}} {bash export CONTAINER_APP_URL=https://$(az containerapp show --name $MY_CONTAINER_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "properties.configuration.ingress.fqdn" --output tsv)
 Create a storage CORS rule Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. We need to add a CORS rule on the URL of our web app to our storage account. First, let's get the URL with a similar `az containerapp show` command as earlier. {  0 <nil>}} {bash az storage cors add \
  --services b \
  --methods DELETE GET HEAD MERGE OPTIONS POST PUT PATCH \
  --origins $CONTAINER_APP_URL \
  --allowed-headers '*' \
  --max-age 3600 \
  --account-name $MY_STORAGE_ACCOUNT_NAME \
  --account-key $STORAGE_ACCOUNT_KEY
 Create a storage CORS rule Next, we're ready to add a CORS rule with the following command. Let's break down the different parts of this command. {  0 <nil>}} {bash echo $CONTAINER_APP_URL
 Create a storage CORS rule That's it! Feel free to access the newly deployed web app in your browser printing the CONTAINER_APP_URL environment variable we added earlier. {  0 <nil>}}]
time=2024-07-11T20:37:17Z level=info msg=Successfully built out the scenario: Create a Container App leveraging Blob Store, SQL, and Computer Vision
time=2024-07-11T20:37:17Z level=info msg=Changed directory to .
time=2024-07-11T20:37:17Z level=info msg=Executing command asynchronously:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-11T20:37:17Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:17Z level=info msg=Finished executing:
 export SUFFIX=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
export MY_RESOURCE_GROUP_NAME=rg$SUFFIX
export REGION=westus
export MY_STORAGE_ACCOUNT_NAME=storage$SUFFIX
export MY_DATABASE_SERVER_NAME=dbserver$SUFFIX
export MY_DATABASE_NAME=db$SUFFIX
export MY_DATABASE_USERNAME=dbuser$SUFFIX
export MY_DATABASE_PASSWORD=dbpass$SUFFIX
export MY_COMPUTER_VISION_NAME=computervision$SUFFIX
export MY_CONTAINER_APP_NAME=containerapp$SUFFIX
export MY_CONTAINER_APP_ENV_NAME=containerappenv$SUFFIX

time=2024-07-11T20:37:17Z level=info msg=Executing command asynchronously:
 git clone https://github.com/Azure/computer-vision-nextjs-webapp.git

time=2024-07-11T20:37:17Z level=error msg=Error executing command:
 command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
time=2024-07-11T20:37:17Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:37:17Z level=error msg=Error testing scenario: failed to execute code block 0 on step 1.
Error: command exited with 'exit status 128' and the message 'Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address
'
StdErr: Cloning into 'computer-vision-nextjs-webapp'...
fatal: could not read Username for 'https://github.com': No such device or address

time=2024-07-11T20:37:19Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/tutorial-lemp-stack.ini' does not exist, skipping...
time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!--
```bash
export MY_AZURE_USER_ID=$(az ad user list --filter "mail eq '$MY_AZURE_USER'" --query "[0].id" -o tsv)
```


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!--
## Assign Azure AD RBAC for Azure AD login for Linux Virtual Machine
The below command uses [az role assignment create](https://learn.microsoft.com/cli/azure/role/assignment#az-role-assignment-create) to assign the `Virtual Machine Administrator Login` role to the VM for your current Azure user.
```bash
export MY_RESOURCE_GROUP_ID=$(az group show --resource-group $MY_RESOURCE_GROUP_NAME --query id -o tsv)
az role assignment create \
    --role "Virtual Machine Administrator Login" \
    --assignee $MY_AZURE_USER_ID \
    --scope $MY_RESOURCE_GROUP_ID -o JSON
```
Results:


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!--
## Export the SSH configuration for use with SSH clients that support OpenSSH
Login to Azure Linux VMs with Azure AD supports exporting the OpenSSH certificate and configuration. That means you can use any SSH clients that support OpenSSH-based certificates to sign in through Azure AD. The following example exports the configuration for all IP addresses assigned to the VM:
```bash
az ssh config --file ~/.ssh/azure-config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=warning msg=The node before the codeblock `echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=warning msg=The node before the codeblock `{
  "condition": null,
  "conditionVersion": null,
  "createdBy": null,
  "createdOn": "2023-09-04T09:29:16.895907+00:00",
  "delegatedManagedIdentityResourceId": null,
  "description": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Authorization/roleAssignments/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "name": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "principalId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "principalType": "User",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "roleDefinitionId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/providers/Microsoft.Authorization/roleDefinitions/zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
  "scope": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "type": "Microsoft.Authorization/roleAssignments",
  "updatedBy": "wwwwwwww-wwww-wwww-wwww-wwwwwwwwwwww",
  "updatedOn": "2023-09-04T09:29:17.237445+00:00"
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:37:19Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$FQDN"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:37:19Z level=debug msg=Found 18 code blocks CodeBlocks=[{bash export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Variable declaration First we need to define a few variables that help with the configuration of the LEMP workload. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create a resource group Create a resource group with the [az group create](/cli/azure/group#az-group-create) command. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group named `$MY_RESOURCE_GROUP_NAME` in the `eastus` location. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON
 Create an Azure Virtual Network A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet.
Use [az network vnet create](/cli/azure/network/vnet#az-network-vnet-create) to create a virtual network named `$MY_VNET_NAME` with a subnet named `$MY_SN_NAME` in the `$MY_RESOURCE_GROUP_NAME` resource group. {JSON {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON
 Create an Azure Public IP [!NOTE]
The below options for zones are only valid selections in regions with [Availability Zones](../../reliability/availability-zones-service-support.md). {JSON {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON
 Create an Azure Network Security Group Security rules in network security groups enable you to filter the type of network traffic that can flow in and out of virtual network subnets and network interfaces. To learn more about network security groups, see [Network security group overview](../../virtual-network/network-security-groups-overview.md). {JSON {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}
 0.3 <nil>}} {bash az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON
 Create Azure Network Security Group rules Create a rule to allow connections to the virtual machine on port 22 for SSH and ports 80, 443 for HTTP and HTTPS. An extra rule is created to allow all ports for outbound connections. Use [az network nsg rule create](/cli/azure/network/nsg/rule#az-network-nsg-rule-create) to create a network security group rule. {JSON {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}
 0.3 <nil>}} {bash az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON
 Create an Azure Network Interface Use [az network nic create](/cli/azure/network/nic#az-network-nic-create) to create the network interface for the virtual machine. The public IP addresses and the NSG created previously are associated with the NIC. The network interface is attached to the virtual network you created previously. {JSON {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}
 0.3 <nil>}} {bash cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF
 Create cloud-init config file To see cloud-init in action, create a VM that installs a LEMP stack and runs a simple Wordpress app secured with an SSL certificate. The following cloud-init configuration installs the required packages, creates the Wordpress website, then initialize and starts the website. {  0 <nil>}} {bash az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON
 Create an Azure Private DNS Zone for Azure MySQL Flexible Server Azure Private DNS Zone integration allows you to resolve the private DNS within the current VNET or any in-region peered VNET where the private DNS Zone is linked. Use [az network private-dns zone create](/cli/azure/network/private-dns/zone#az-network-private-dns-zone-create) to create the private DNS zone. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}
 0.3 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL - Flexible Server Azure Database for MySQL - Flexible Server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create a flexible server with the [az mysql flexible-server create](../../mysql/flexible-server/quickstart-create-server-cli.md#create-an-azure-database-for-mysql-flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local environment: {JSON {
  "databaseName": "wp001",
  "host": "mydbxxxxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx",
  "location": "East US",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myMySQLSNxxxxxx",
  "username": "dbadminxxxxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW"
 Create an Azure Database for MySQL - Flexible Server  {  0 <nil>}} {bash runtime="10 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
  STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv);
  echo $STATUS;
  if [ "$STATUS" == 'Ready' ]; then
    break;
  else
    sleep 10;
  fi;
done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for Wordpress integration You can also modify the value of a certain server parameter, which updates the underlying configuration value for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](../../mysql/flexible-server/how-to-configure-server-parameters-cli.md#modify-a-server-parameter-value) command. {JSON {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.DBforMySQL/flexibleServers/mydbxxxxxx/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash az vm create \
    --name $MY_VM_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --admin-username $MY_VM_USERNAME \
    --authentication-type ssh \
    --assign-identity \
    --image $MY_VM_IMAGE \
    --location $REGION \
    --nic-delete-option Delete \
    --os-disk-caching ReadOnly \
    --os-disk-delete-option Delete \
    --os-disk-size-gb 30 \
    --size $MY_VM_SIZE \
    --generate-ssh-keys \
    --storage-sku Premium_LRS \
    --nics $MY_VM_NIC_NAME \
    --custom-data cloud-init.txt -o JSON
 Create an Azure Linux Virtual Machine Create a VM with the [az vm create](/cli/azure/vm#az-vm-create) command. {JSON {
  "fqdns": "mydnslabelxxxxxx.eastus.cloudapp.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx",
  "identity": {
    "principalId": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
    "tenantId": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "location": "eastus",
  "macAddress": "60-45-BD-D8-1D-84",
  "powerState": "VM running",
  "privateIpAddress": "10.19.0.4",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "zones": ""
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    STATUS=$(ssh -o StrictHostKeyChecking=no $MY_VM_USERNAME@$FQDN "cloud-init status --wait");
    echo $STATUS;
    if [[ "$STATUS" == *'status: done'* ]]; then
        break;
    else
        sleep 10;
    fi;
done
 Check the Azure Linux Virtual Machine status It takes a few minutes to create the VM and supporting resources. The provisioningState value of Succeeded appears when the extension is successfully installed on the VM. The VM must have a running [VM agent](../extensions/agent-linux.md) to install the extension. {  0 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME -o JSON
 Enable Azure AD login for a Linux Virtual Machine in Azure The following installs the extension to enable Azure AD login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {JSON {
  "autoUpgradeMinorVersion": true,
  "enableAutomaticUpgrade": null,
  "forceUpdateTag": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachines/myVMNamexxxxxx/extensions/AADSSHLoginForLinux",
  "instanceView": null,
  "location": "eastus",
  "name": "AADSSHLoginForLinux",
  "protectedSettings": null,
  "protectedSettingsFromKeyVault": null,
  "provisioningState": "Succeeded",
  "publisher": "Microsoft.Azure.ActiveDirectory",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "settings": null,
  "suppressFailures": null,
  "tags": null,
  "type": "Microsoft.Compute/virtualMachines/extensions",
  "typeHandlerVersion": "1.0",
  "typePropertiesType": "AADSSHLoginForLinux"
}
 0.3 <nil>}} {bash runtime="5 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s -f $FQDN > /dev/null ; then
        curl -L -s -f $FQDN 2> /dev/null | head -n 9
        break
    else
        sleep 10
    fi;
done
 Check and browse your WordPress website Validate that the application is running by curling the application url: {HTML <!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>Azure hosted blog</title>
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="Azure hosted blog &raquo; Comments Feed" href="https://mydnslabelxxxxxx.eastus.cloudapp.azure.com/?feed=comments-rss2" />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Check and browse your WordPress website  {  0 <nil>}}]
time=2024-07-11T20:37:19Z level=info msg=Successfully built out the scenario: Tutorial: Install a LEMP stack on an Azure Linux VM
time=2024-07-11T20:37:19Z level=info msg=Changed directory to .
time=2024-07-11T20:37:19Z level=info msg=Executing command asynchronously:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:37:19Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:19Z level=info msg=Finished executing:
 export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myLEMPResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_VM_USERNAME="azureadmin"
export MY_VM_SIZE='Standard_DS2_v2'
export MY_VM_IMAGE='Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest'
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_NSG_NAME="myNSG$RANDOM_ID"
export MY_NSG_SSH_RULE="Allow-Access$RANDOM_ID"
export MY_VM_NIC_NAME="myVMNic$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export MY_AZURE_USER=$(az account show --query user.name --output tsv)
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:37:19Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:37:19Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:22Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myLEMPResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup8f948f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:37:22Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.747348
time=2024-07-11T20:37:22Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f",
  "location": "westeurope",
  "managedBy": null,
  "name": "myLEMPResourceGroup8f948f",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:37:22Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:22Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:37:22Z level=info msg=Found resource group named: myLEMPResourceGroup8f948f
time=2024-07-11T20:37:22Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-11T20:37:37Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.19.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.19.0.0/24",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
        "name": "mySNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.115.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f",
    "location": "westeurope",
    "name": "myVNet8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "ae63e5ea-e901-4ebb-9ba8-bcb02950bb55",
    "subnets": [
      {
        "addressPrefix": "10.115.0.0/24",
        "delegations": [],
        "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
        "name": "mySN8f948f",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:37:37Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731877
time=2024-07-11T20:37:37Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.115.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f",
    "location": "westeurope",
    "name": "myVNet8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "ae63e5ea-e901-4ebb-9ba8-bcb02950bb55",
    "subnets": [
      {
        "addressPrefix": "10.115.0.0/24",
        "delegations": [],
        "etag": "W/\"30e449ed-4203-4f60-97fc-67401e4bfc8d\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
        "name": "mySN8f948f",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:37:37Z level=info msg=Finished executing:
 az network vnet create \
    --name $MY_VNET_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX -o JSON

time=2024-07-11T20:37:37Z level=info msg=Executing command asynchronously:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-11T20:37:43Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabelxxxxxx",
      "fqdn": "mydnslabelxxxxxx.eastus.cloudapp.azure.com"
    },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipTags": [],
    "location": "eastus",
    "name": "myPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel8f948f",
      "fqdn": "mydnslabel8f948f.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"4a3e492a-16ee-49d5-ae39-a6b6383debd5\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.6.46",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP8f948f",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f7280d30-ab1b-4c8f-93b0-079ef5cca4e4",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:37:43Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.754118
time=2024-07-11T20:37:43Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "dnsSettings": {
      "domainNameLabel": "mydnslabel8f948f",
      "fqdn": "mydnslabel8f948f.westeurope.cloudapp.azure.com"
    },
    "etag": "W/\"4a3e492a-16ee-49d5-ae39-a6b6383debd5\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "57.153.6.46",
    "ipTags": [],
    "location": "westeurope",
    "name": "myPublicIP8f948f",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f7280d30-ab1b-4c8f-93b0-079ef5cca4e4",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:37:43Z level=info msg=Finished executing:
 az network public-ip create \
    --name $MY_PUBLIC_IP_NAME \
    --location $REGION \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --dns-name $MY_DNS_LABEL \
    --sku Standard \
    --allocation-method static \
    --version IPv4 \
    --zone 1 2 3 -o JSON

time=2024-07-11T20:37:43Z level=info msg=Executing command asynchronously:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:47Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNSG": {
    "defaultSecurityRules":
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup104",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroup104/providers/Microsoft.Network/networkSecurityGroups/protect-vms",
    "location": "eastus",
    "name": "protect-vms",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup104",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

Actual{
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
    "location": "westeurope",
    "name": "myNSG8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "6c2a87a5-c3ef-41c4-bcc4-d3efeafa5dbf",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-11T20:37:47Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.568177
time=2024-07-11T20:37:47Z level=info msg=Command output to stdout:
 {
  "NewNSG": {
    "defaultSecurityRules": [
      {
        "access": "Allow",
        "description": "Allow inbound traffic from all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetInBound",
        "name": "AllowVnetInBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow inbound traffic from azure load balancer",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowAzureLoadBalancerInBound",
        "name": "AllowAzureLoadBalancerInBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "AzureLoadBalancer",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all inbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Inbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllInBound",
        "name": "DenyAllInBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to all VMs in VNET",
        "destinationAddressPrefix": "VirtualNetwork",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowVnetOutBound",
        "name": "AllowVnetOutBound",
        "priority": 65000,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "VirtualNetwork",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Allow",
        "description": "Allow outbound traffic from all VMs to Internet",
        "destinationAddressPrefix": "Internet",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/AllowInternetOutBound",
        "name": "AllowInternetOutBound",
        "priority": 65001,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      },
      {
        "access": "Deny",
        "description": "Deny all outbound traffic",
        "destinationAddressPrefix": "*",
        "destinationAddressPrefixes": [],
        "destinationPortRange": "*",
        "destinationPortRanges": [],
        "direction": "Outbound",
        "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/defaultSecurityRules/DenyAllOutBound",
        "name": "DenyAllOutBound",
        "priority": 65500,
        "protocol": "*",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "sourceAddressPrefix": "*",
        "sourceAddressPrefixes": [],
        "sourcePortRange": "*",
        "sourcePortRanges": [],
        "type": "Microsoft.Network/networkSecurityGroups/defaultSecurityRules"
      }
    ],
    "etag": "W/\"b93432c3-5362-4db7-b583-d2a1a99a660c\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
    "location": "westeurope",
    "name": "myNSG8f948f",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "6c2a87a5-c3ef-41c4-bcc4-d3efeafa5dbf",
    "securityRules": [],
    "type": "Microsoft.Network/networkSecurityGroups"
  }
}

time=2024-07-11T20:37:47Z level=info msg=Finished executing:
 az network nsg create \
    --name $MY_NSG_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION -o JSON

time=2024-07-11T20:37:47Z level=info msg=Executing command asynchronously:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-11T20:37:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx/securityRules/Allow-Accessxxxxxx",
  "name": "Allow-Accessxxxxxx",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

Actual{
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"db2cfba3-415b-4722-a55d-62cd4a2159a2\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/securityRules/Allow-Access8f948f",
  "name": "Allow-Access8f948f",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup8f948f",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-11T20:37:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.792033
time=2024-07-11T20:37:50Z level=info msg=Command output to stdout:
 {
  "access": "Allow",
  "destinationAddressPrefix": "*",
  "destinationAddressPrefixes": [],
  "destinationPortRanges": [
    "22",
    "80",
    "443"
  ],
  "direction": "Inbound",
  "etag": "W/\"db2cfba3-415b-4722-a55d-62cd4a2159a2\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f/securityRules/Allow-Access8f948f",
  "name": "Allow-Access8f948f",
  "priority": 100,
  "protocol": "Tcp",
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroup8f948f",
  "sourceAddressPrefix": "*",
  "sourceAddressPrefixes": [],
  "sourcePortRange": "*",
  "sourcePortRanges": [],
  "type": "Microsoft.Network/networkSecurityGroups/securityRules"
}

time=2024-07-11T20:37:50Z level=info msg=Finished executing:
 az network nsg rule create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --nsg-name $MY_NSG_NAME \
    --name $MY_NSG_SSH_RULE \
    --access Allow \
    --protocol Tcp \
    --direction Inbound \
    --priority 100 \
    --source-address-prefix '*' \
    --source-port-range '*' \
    --destination-address-prefix '*' \
    --destination-port-range 22 80 443 -o JSON

time=2024-07-11T20:37:50Z level=info msg=Executing command asynchronously:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-11T20:37:53Z level=debug msg=Comparing JSON strings:
Expected: {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": []
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "hostedWorkloads": [],
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx",
    "ipConfigurations": [
      {
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkInterfaces/myVMNicNamexxxxxx/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.19.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "resourceGroup": "myLEMPResourceGroupxxxxxx",
        "subnet": {
          "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/mySNxxxxxx",
          "resourceGroup": "myLEMPResourceGroupxxxxxx"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "eastus",
    "name": "myVMNicNamexxxxxx",
    "networkSecurityGroup": {
      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/networkSecurityGroups/myNSGNamexxxxxx",
      "resourceGroup": "myLEMPResourceGroupxxxxxx"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroupxxxxxx",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

Actual{
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "3lswhlqb3g3u3g3ixsycsuf1kf.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f",
    "ipConfigurations": [
      {
        "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.115.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic8f948f",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
      "resourceGroup": "myLEMPResourceGroup8f948f"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f661ff92-e4fa-4933-9655-4f0dbd6cb5f4",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-11T20:37:53Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.704592
time=2024-07-11T20:37:53Z level=info msg=Command output to stdout:
 {
  "NewNIC": {
    "auxiliaryMode": "None",
    "auxiliarySku": "None",
    "disableTcpStateTracking": false,
    "dnsSettings": {
      "appliedDnsServers": [],
      "dnsServers": [],
      "internalDomainNameSuffix": "3lswhlqb3g3u3g3ixsycsuf1kf.ax.internal.cloudapp.net"
    },
    "enableAcceleratedNetworking": false,
    "enableIPForwarding": false,
    "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
    "hostedWorkloads": [],
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f",
    "ipConfigurations": [
      {
        "etag": "W/\"4c44ffdc-d44b-4b12-816e-25d121f8b3ed\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkInterfaces/myVMNic8f948f/ipConfigurations/ipconfig1",
        "name": "ipconfig1",
        "primary": true,
        "privateIPAddress": "10.115.0.4",
        "privateIPAddressVersion": "IPv4",
        "privateIPAllocationMethod": "Dynamic",
        "provisioningState": "Succeeded",
        "publicIPAddress": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/publicIPAddresses/myPublicIP8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "resourceGroup": "myLEMPResourceGroup8f948f",
        "subnet": {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/virtualNetworks/myVNet8f948f/subnets/mySN8f948f",
          "resourceGroup": "myLEMPResourceGroup8f948f"
        },
        "type": "Microsoft.Network/networkInterfaces/ipConfigurations"
      }
    ],
    "location": "westeurope",
    "name": "myVMNic8f948f",
    "networkSecurityGroup": {
      "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myLEMPResourceGroup8f948f/providers/Microsoft.Network/networkSecurityGroups/myNSG8f948f",
      "resourceGroup": "myLEMPResourceGroup8f948f"
    },
    "nicType": "Standard",
    "provisioningState": "Succeeded",
    "resourceGroup": "myLEMPResourceGroup8f948f",
    "resourceGuid": "f661ff92-e4fa-4933-9655-4f0dbd6cb5f4",
    "tapConfigurations": [],
    "type": "Microsoft.Network/networkInterfaces",
    "vnetEncryptionSupported": false
  }
}

time=2024-07-11T20:37:53Z level=info msg=Finished executing:
 az network nic create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NIC_NAME \
    --location $REGION \
    --ip-forwarding false \
    --subnet $MY_SN_NAME \
    --vnet-name $MY_VNET_NAME \
    --network-security-group $MY_NSG_NAME \
    --public-ip-address $MY_PUBLIC_IP_NAME -o JSON

time=2024-07-11T20:37:53Z level=info msg=Executing command asynchronously:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-11T20:37:53Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:37:53Z level=info msg=Finished executing:
 cat << EOF > cloud-init.txt
#cloud-config
# Install, update, and upgrade packages
package_upgrade: true
package_update: true
package_reboot_if_require: true
# Install packages
packages:
  - vim
  - certbot
  - python3-certbot-nginx
  - bash-completion
  - nginx
  - mysql-client
  - php
  - php-cli
  - php-bcmath
  - php-curl
  - php-imagick
  - php-intl
  - php-json
  - php-mbstring
  - php-mysql
  - php-gd
  - php-xml
  - php-xmlrpc
  - php-zip
  - php-fpm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default.conf
    content: |
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            server_name $FQDN;
        }
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/$FQDN.conf
    content: |
        upstream php {
            server unix:/run/php/php8.1-fpm.sock;
        }
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name $FQDN;
            ssl_certificate /etc/letsencrypt/live/$FQDN/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/$FQDN/privkey.pem;
            root /var/www/$FQDN;
            index index.php;
            location / {
                try_files \$uri \$uri/ /index.php?\$args;
            }
            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_param  SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            }
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            }
        }
        server {
            listen 80;
            listen [::]:80;
            server_name $FQDN;
            return 301 https://$FQDN\$request_uri;
        }
runcmd:
  - sed -i 's/;cgi.fix_pathinfo.*/cgi.fix_pathinfo = 1/' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^max_execution_time \= .*/max_execution_time \= 300/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^upload_max_filesize \= .*/upload_max_filesize \= 64M/g' /etc/php/8.1/fpm/php.ini
  - sed -i 's/^post_max_size \= .*/post_max_size \= 64M/g' /etc/php/8.1/fpm/php.ini
  - systemctl restart php8.1-fpm
  - systemctl restart nginx
  - certbot --nginx certonly --non-interactive --agree-tos -d $FQDN -m dummy@dummy.com --redirect
  - ln -s /etc/nginx/sites-available/$FQDN.conf /etc/nginx/sites-enabled/
  - rm /etc/nginx/sites-enabled/default
  - systemctl restart nginx
  - curl --url https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar --output /tmp/wp-cli.phar
  - mv /tmp/wp-cli.phar /usr/local/bin/wp
  - chmod +x /usr/local/bin/wp
  - wp cli update
  - mkdir -m 0755 -p /var/www/$FQDN
  - chown -R azureadmin:www-data /var/www/$FQDN
  - sudo -u azureadmin -i -- wp core download --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp config create --dbhost=$MY_MYSQL_DB_NAME.mysql.database.azure.com --dbname=wp001 --dbuser=$MY_MYSQL_ADMIN_USERNAME --dbpass="$MY_MYSQL_ADMIN_PW" --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp core install --url=$FQDN --title="Azure hosted blog" --admin_user=$MY_WP_ADMIN_USER --admin_password="$MY_WP_ADMIN_PW" --admin_email=$MY_AZURE_USER --path=/var/www/$FQDN
  - sudo -u azureadmin -i -- wp plugin update --all --path=/var/www/$FQDN
  - chmod 600 /var/www/$FQDN/wp-config.php
  - mkdir -p -m 0775 /var/www/$FQDN/wp-content/uploads
  - chgrp www-data /var/www/$FQDN/wp-content/uploads
EOF

time=2024-07-11T20:37:53Z level=info msg=Executing command asynchronously:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-11T20:38:28Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myLEMPResourceGroupxxxxxx/providers/Microsoft.Network/privateDnsZones/mydnslabelxxxxxx.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabelxxxxxx.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "myLEMPResourceGroupxxxxxx",
  "tags": null,
  "type": "Microsoft.Network/privateDnsZones"
}

Actual{
  "etag": "c758e177-95aa-4aa0-b783-cd5d85bf0650",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup8f948f/providers/Microsoft.Network/privateDnsZones/mydnslabel8f948f.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel8f948f.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup8f948f",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-11T20:38:28Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.751878
time=2024-07-11T20:38:28Z level=info msg=Command output to stdout:
 {
  "etag": "c758e177-95aa-4aa0-b783-cd5d85bf0650",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/mylempresourcegroup8f948f/providers/Microsoft.Network/privateDnsZones/mydnslabel8f948f.private.mysql.database.azure.com",
  "location": "global",
  "maxNumberOfRecordSets": 25000,
  "maxNumberOfVirtualNetworkLinks": 1000,
  "maxNumberOfVirtualNetworkLinksWithRegistration": 100,
  "name": "mydnslabel8f948f.private.mysql.database.azure.com",
  "numberOfRecordSets": 1,
  "numberOfVirtualNetworkLinks": 0,
  "numberOfVirtualNetworkLinksWithRegistration": 0,
  "provisioningState": "Succeeded",
  "resourceGroup": "mylempresourcegroup8f948f",
  "type": "Microsoft.Network/privateDnsZones"
}

time=2024-07-11T20:38:28Z level=info msg=Finished executing:
 az network private-dns zone create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_DNS_LABEL.private.mysql.database.azure.com -o JSON

time=2024-07-11T20:38:28Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wp001 \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-11T20:38:31Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup8f948f'...
WARNING: Resource group 'myLEMPResourceGroup8f948f' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-11T20:38:31Z level=info msg=Attempting to delete the deployed resource group with the name: myLEMPResourceGroup8f948f
time=2024-07-11T20:38:36Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:38:36Z level=error msg=Error testing scenario: failed to execute code block 0 on step 9.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myLEMPResourceGroup8f948f'...
WARNING: Resource group 'myLEMPResourceGroup8f948f' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myLEMPResourceGroup8f948f'...
WARNING: Resource group 'myLEMPResourceGroup8f948f' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-11T20:38:38Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machines/linux/quick-create-cli.ini' does not exist, skipping...
time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!--## Export the SSH configuration for use with SSH clients that support OpenSSH & SSH into the VM.


time=2024-07-11T20:38:38Z level=debug msg=Found HTML block with the content: <!--
```bash
yes | az ssh config --file ~/.ssh/config --name $MY_VM_NAME --resource-group $MY_RESOURCE_GROUP_NAME
```


time=2024-07-11T20:38:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:38Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:38Z level=debug msg=Found 6 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
 Define environment variables The first step is to define the environment variables. Environment variables are commonly used in Linux to centralize configuration data to improve consistency and maintainability of the system. Create the following environment variables to specify the names of resources that you create later in this tutorial: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. The [az group create](/cli/azure/group) command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard
 Create the virtual machine All other values are configured using environment variables. {json {
  "fqdns": "",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "00-0D-3A-10-4F-70",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "52.147.208.85",
  "resourceGroup": "myVMResourceGroup",
  "zones": ""
}
 0.3 <nil>}} {bash az vm extension set \
    --publisher Microsoft.Azure.ActiveDirectory \
    --name AADSSHLoginForLinux \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --vm-name $MY_VM_NAME
 Enable Azure AD Login for a Linux virtual machine in Azure The following code example deploys a Linux VM and then installs the extension to enable an Azure AD Login for a Linux VM. VM extensions are small applications that provide post-deployment configuration and automation tasks on Azure virtual machines. {  0 <nil>}} {bash export IP_ADDRESS=$(az vm show --show-details --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_VM_NAME --query publicIps --output tsv)
 Store IP address of VM in order to SSH Run the following command to store the IP address of the VM as an environment variable: {  0 <nil>}} {bash ssh -o StrictHostKeyChecking=no $MY_USERNAME@$IP_ADDRESS
 SSH into the VM You can now SSH into the VM by running the output of the following command in your ssh client of choice: {  0 <nil>}}]
time=2024-07-11T20:38:38Z level=info msg=Successfully built out the scenario: Quickstart: Create a Linux virtual machine with the Azure CLI on Azure
time=2024-07-11T20:38:38Z level=info msg=Changed directory to .
time=2024-07-11T20:38:38Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-11T20:38:38Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:38:38Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VM_NAME="myVM$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"

time=2024-07-11T20:38:38Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:38:39Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupfd627a",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupfd627a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:39Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.767626
time=2024-07-11T20:38:39Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMResourceGroupfd627a",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMResourceGroupfd627a",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:39Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:38:39Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:38:39Z level=info msg=Found resource group named: myVMResourceGroupfd627a
time=2024-07-11T20:38:39Z level=info msg=Executing command asynchronously:
 az vm create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_VM_NAME \
    --image $MY_VM_IMAGE \
    --admin-username $MY_USERNAME \
    --assign-identity \
    --generate-ssh-keys \
    --public-ip-sku Standard

time=2024-07-11T20:38:45Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_uvenv41yCiQ2MWYkWfaQw6aXA400m68z' is not valid according to the validation procedure. The tracking id is '2951086b-b461-4b27-b37f-b5a337822d8b'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-11T20:38:45Z level=info msg=Attempting to delete the deployed resource group with the name: myVMResourceGroupfd627a
time=2024-07-11T20:38:47Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:38:47Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_uvenv41yCiQ2MWYkWfaQw6aXA400m68z' is not valid according to the validation procedure. The tracking id is '2951086b-b461-4b27-b37f-b5a337822d8b'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vm_deploy_uvenv41yCiQ2MWYkWfaQw6aXA400m68z' is not valid according to the validation procedure. The tracking id is '2951086b-b461-4b27-b37f-b5a337822d8b'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-11T20:38:49Z level=info msg=INI file 'scenarios/azure-docs/articles/static-web-apps/get-started-cli.ini' does not exist, skipping...
time=2024-07-11T20:38:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:38:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:49Z level=warning msg=The node before the codeblock `az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:38:49Z level=warning msg=The node before the codeblock `runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:38:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:38:49Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:38:49Z level=debug msg=Found 7 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"
 Define environment variables The first step in this quickstart is to define environment variables. {  0 <nil>}} {bash az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION
 Deploy a Static Web App Deploy the app as a static web app from the Azure CLI. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 
 Deploy a Static Web App  {  0 <nil>}} {bash export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)
 Deploy a Static Web App Before you can go to your new static site, the deployment build must first finish running. {  0 <nil>}} {bash runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done
 Deploy a Static Web App  {HTML <!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8 />
<meta name=viewport content="width=device-width, initial-scale=1.0" />
<meta http-equiv=X-UA-Compatible content="IE=edge" />
<title>Azure Static Web Apps - Welcome</title>
<link rel="shortcut icon" href=https://appservice.azureedge.net/images/static-apps/v3/favicon.svg type=image/x-icon />
<link rel=stylesheet href=https://ajax.aspnetcdn.com/ajax/bootstrap/4.1.1/css/bootstrap.min.css crossorigin=anonymous />
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"
 Deploy a Static Web App  {  0 <nil>}} {bash    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"
 View the Website via Git Run the following command to query for your website's URL. {  0 <nil>}}]
time=2024-07-11T20:38:49Z level=info msg=Successfully built out the scenario: Quickstart: Building your first static site using the Azure CLI
time=2024-07-11T20:38:49Z level=info msg=Changed directory to .
time=2024-07-11T20:38:49Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-11T20:38:49Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:38:49Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myStaticWebAppResourceGroup$RANDOM_ID"
export REGION=EastUS2
export MY_STATIC_WEB_APP_NAME="myStaticWebApp$RANDOM_ID"

time=2024-07-11T20:38:49Z level=info msg=Executing command asynchronously:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-11T20:38:50Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/my-swa-group",
  "location": "eastus2",
  "managedBy": null,
  "name": "my-swa-group",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupde2379",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupde2379",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:50Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712991
time=2024-07-11T20:38:50Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupde2379",
  "location": "eastus2",
  "managedBy": null,
  "name": "myStaticWebAppResourceGroupde2379",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:38:50Z level=info msg=Finished executing:
 az group create \
  --name $MY_RESOURCE_GROUP_NAME \
  --location $REGION

time=2024-07-11T20:38:50Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:38:50Z level=info msg=Found resource group named: myStaticWebAppResourceGroupde2379
time=2024-07-11T20:38:50Z level=info msg=Executing command asynchronously:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-11T20:38:55Z level=info msg=Command output to stdout:
 {
  "allowConfigFileUpdates": true,
  "branch": null,
  "buildProperties": null,
  "contentDistributionEndpoint": "https://content-eus2.infrastructure.5.azurestaticapps.net",
  "customDomains": [],
  "databaseConnections": [],
  "defaultHostname": "blue-sand-0d4492b0f.5.azurestaticapps.net",
  "enterpriseGradeCdnStatus": "Disabled",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myStaticWebAppResourceGroupde2379/providers/Microsoft.Web/staticSites/myStaticWebAppde2379",
  "identity": null,
  "keyVaultReferenceIdentity": "SystemAssigned",
  "kind": null,
  "linkedBackends": [],
  "location": "East US 2",
  "name": "myStaticWebAppde2379",
  "privateEndpointConnections": [],
  "provider": "None",
  "publicNetworkAccess": null,
  "repositoryToken": null,
  "repositoryUrl": null,
  "resourceGroup": "myStaticWebAppResourceGroupde2379",
  "sku": {
    "capabilities": null,
    "capacity": null,
    "family": null,
    "locations": null,
    "name": "Free",
    "size": null,
    "skuCapacity": null,
    "tier": "Free"
  },
  "stagingEnvironmentPolicy": "Enabled",
  "tags": null,
  "templateProperties": null,
  "type": "Microsoft.Web/staticSites",
  "userProvidedFunctionApps": null
}

time=2024-07-11T20:38:55Z level=info msg=Finished executing:
 az staticwebapp create \
    --name $MY_STATIC_WEB_APP_NAME \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION 

time=2024-07-11T20:38:55Z level=info msg=Executing command asynchronously:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-11T20:38:56Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:38:56Z level=info msg=Finished executing:
 export MY_STATIC_WEB_APP_URL=$(az staticwebapp show --name  $MY_STATIC_WEB_APP_NAME --resource-group $MY_RESOURCE_GROUP_NAME --query "defaultHostname" -o tsv)

time=2024-07-11T20:38:56Z level=info msg=Executing command asynchronously:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-11T20:38:56Z level=info msg=Command output to stdout:
 <!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

time=2024-07-11T20:38:56Z level=info msg=Finished executing:
 runtime="1 minute";
endtime=$(date -ud "$runtime" +%s);
while [[ $(date -u +%s) -le $endtime ]]; do
    if curl -I -s $MY_STATIC_WEB_APP_URL > /dev/null ; then 
        curl -L -s $MY_STATIC_WEB_APP_URL 2> /dev/null | head -n 9
        break
    else 
        sleep 10
    fi;
done

time=2024-07-11T20:38:56Z level=info msg=Executing command asynchronously:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-11T20:38:56Z level=info msg=Command output to stdout:
 You can now visit your web server at https://blue-sand-0d4492b0f.5.azurestaticapps.net

time=2024-07-11T20:38:56Z level=info msg=Finished executing:
 echo "You can now visit your web server at https://$MY_STATIC_WEB_APP_URL"

time=2024-07-11T20:38:56Z level=info msg=Executing command asynchronously:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-11T20:38:58Z level=info msg=Command output to stdout:
 "blue-sand-0d4492b0f.5.azurestaticapps.net"

time=2024-07-11T20:38:58Z level=info msg=Finished executing:
    az staticwebapp show \
     --name $MY_STATIC_WEB_APP_NAME \
     --query "defaultHostname"

time=2024-07-11T20:38:58Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:38:58Z level=info msg=Attempting to delete the deployed resource group with the name: myStaticWebAppResourceGroupde2379
time=2024-07-11T20:39:00Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:39:00Z level=info msg=INI file 'scenarios/azure-docs/articles/virtual-machine-scale-sets/flexible-virtual-machine-scale-sets-cli.ini' does not exist, skipping...
time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=warning msg=The node before the codeblock `az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
` is not a paragraph, it is a Heading
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=warning msg=The node before the codeblock `{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:39:00Z level=debug msg=Found 12 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"
 Define environment variables Define environment variables as follows. {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON
 Create a resource group A resource group is a logical container into which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON
 Create virtual network and subnet  {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON
 Create Application Gateway resources Azure Application Gateway requires a dedicated subnet within your virtual network. The following command creates a subnet named $MY_APPGW_SN_NAME with a specified address prefix named $MY_APPGW_SN_PREFIX in your virtual network $MY_VNET_NAME. {json {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON
 Create Application Gateway resources The following command creates a standard, zone redundant, static, public IPv4 in your resource group. {json {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}
 0.3 <nil>}} {bash az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON
 Create Application Gateway resources In this step, you create an Application Gateway that you're going to integrate with your Virtual Machine Scale Set. This example creates a zone redundant Application Gateway with Standard_v2 SKU and enables Http communication for the Application Gateway. The public IP $MY_APPGW_PUBLIC_IP_NAME created in previous step is attached to the Application Gateway. {json {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}
 0.3 <nil>}} {bash az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON
 Create a Virtual Machine Scale Set Now create a Virtual Machine Scale Set with [az vmss create](/cli/azure/vmss). The following example creates a zone redundant scale set with an instance count of *2* with public IP in subnet $MY_VM_SN_NAME within your resource group $MY_RESOURCE_GROUP_NAME, integrates the Application Gateway, and generates SSH keys. Make sure to save the SSH keys if you need to log into your VMs via ssh. {json {
  "vmss": {
    "doNotRunExtensionsOnOverprovisionedVMs": false,
    "orchestrationMode": "Uniform",
    "overprovision": true,
    "platformFaultDomainCount": 1,
    "provisioningState": "Succeeded",
    "singlePlacementGroup": false,
    "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
    "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
    "upgradePolicy": {
      "mode": "Automatic",
      "rollingUpgradePolicy": {
        "maxBatchInstancePercent": 20,
        "maxSurge": false,
        "maxUnhealthyInstancePercent": 20,
        "maxUnhealthyUpgradedInstancePercent": 20,
        "pauseTimeBetweenBatches": "PT0S",
        "rollbackFailedInstancesOnPolicyBreach": false
      }
    },
    "virtualMachineProfile": {
      "networkProfile": {
        "networkInterfaceConfigurations": [
          {
            "name": "myvmsa53cNic",
            "properties": {
              "disableTcpStateTracking": false,
              "dnsSettings": {
                "dnsServers": []
              },
              "enableAcceleratedNetworking": false,
              "enableIPForwarding": false,
              "ipConfigurations": [
                {
                  "name": "myvmsa53cIPConfig",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGW7xxxxx/backendAddressPools/appGatewayBackendPool",   
                        "resourceGroup": "myVMSSResourceGroupxxxxxx"
                      }
                    ],
                    "privateIPAddressVersion": "IPv4",
                    "publicIPAddressConfiguration": {
                      "name": "instancepublicip",
                      "properties": {
                        "idleTimeoutInMinutes": 10,
                        "ipTags": [],
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    "subnet": {
                      "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSN7xxxxx",
                      "resourceGroup": "myVMSSResourceGroupxxxxxxx"
                    }
                  }
                }
              ],
              "primary": true
            }
          }
        ]
      },
      "osProfile": {
        "adminUsername": "azureuser",
        "allowExtensionOperations": true,
        "computerNamePrefix": "myvmsa53c",
        "linuxConfiguration": {
          "disablePasswordAuthentication": true,
          "enableVMAgentPlatformUpdates": false,
          "provisionVMAgent": true,
          "ssh": {
            "publicKeys": [
              {
                "keyData": "ssh-rsa xxxxxxxx",
                "path": "/home/azureuser/.ssh/authorized_keys"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": true,
        "secrets": []
      },
      "storageProfile": {
        "diskControllerType": "SCSI",
        "imageReference": {
          "offer": "0001-com-ubuntu-server-jammy",
          "publisher": "Canonical",
          "sku": "22_04-lts-gen2",
          "version": "latest"
        },
        "osDisk": {
          "caching": "ReadWrite",
          "createOption": "FromImage",
          "diskSizeGB": 30,
          "managedDisk": {
            "storageAccountType": "Premium_LRS"
          },
          "osType": "Linux"
        }
      },
      "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00"
    },
    "zoneBalance": false
  }
}
 0.3 <nil>}} {bash az vmss extension set --publisher Microsoft.Azure.Extensions --version 2.0  --name CustomScript --resource-group $MY_RESOURCE_GROUP_NAME --vmss-name $MY_VMSS_NAME --settings '{ "fileUris": ["https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"], "commandToExecute": "./automate_nginx.sh" }' -o JSON
 Install ngnix with Virtual Machine Scale Sets extensions The following command uses the Virtual Machine Scale Sets extension to run a [custom script](https://github.com/Azure-Samples/compute-automation-configurations/blob/master/automate_nginx.sh) that installs ngnix and publishes a page that shows the hostname of the Virtual Machine that your HTTP requests hits. {json {
  "additionalCapabilities": null,
  "automaticRepairsPolicy": null,
  "constrainedMaximumCapacity": null,
  "doNotRunExtensionsOnOverprovisionedVMs": false,
  "extendedLocation": null,
  "hostGroup": null,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxx",
  "identity": null,
  "location": "eastus",
  "name": "myVMSSxxxx",
  "orchestrationMode": "Uniform",
  "overprovision": true,
  "plan": null,
  "platformFaultDomainCount": 1,
  "priorityMixPolicy": null,
  "provisioningState": "Succeeded",
  "proximityPlacementGroup": null,
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "scaleInPolicy": null,
  "singlePlacementGroup": false,
  "sku": {
    "capacity": 2,
    "name": "Standard_DS2_v2",
    "tier": "Standard"
  },
  "spotRestorePolicy": null,
  "tags": {},
  "timeCreated": "20xx-xx-xxTxx:xx:xx.xxxxxx+00:00",
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "uniqueId": "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx",
  "upgradePolicy": {
    "automaticOsUpgradePolicy": null,
    "mode": "Automatic",
    "rollingUpgradePolicy": {
      "enableCrossZoneUpgrade": null,
      "maxBatchInstancePercent": 20,
      "maxSurge": false,
      "maxUnhealthyInstancePercent": 20,
      "maxUnhealthyUpgradedInstancePercent": 20,
      "pauseTimeBetweenBatches": "PT0S",
      "prioritizeUnhealthyInstances": null,
      "rollbackFailedInstancesOnPolicyBreach": false
    }
  },
  "virtualMachineProfile": {
    "applicationProfile": null,
    "billingProfile": null,
    "capacityReservation": null,
    "diagnosticsProfile": null,
    "evictionPolicy": null,
    "extensionProfile": {
      "extensions": [
        {
          "autoUpgradeMinorVersion": true,
          "enableAutomaticUpgrade": null,
          "forceUpdateTag": null,
          "id": null,
          "name": "CustomScript",
          "protectedSettings": null,
          "protectedSettingsFromKeyVault": null,
          "provisionAfterExtensions": null,
          "provisioningState": null,
          "publisher": "Microsoft.Azure.Extensions",
          "settings": {
            "commandToExecute": "./automate_nginx.sh",
            "fileUris": [
              "https://raw.githubusercontent.com/Azure-Samples/compute-automation-configurations/master/automate_nginx.sh"
            ]
          },
          "suppressFailures": null,
          "type": null,
          "typeHandlerVersion": "2.0",
          "typePropertiesType": "CustomScript"
        }
      ],
      "extensionsTimeBudget": null
    },
    "hardwareProfile": null,
    "licenseType": null,
    "networkProfile": {
      "healthProbe": null,
      "networkApiVersion": null,
      "networkInterfaceConfigurations": [
        {
          "deleteOption": null,
          "disableTcpStateTracking": false,
          "dnsSettings": {
            "dnsServers": []
          },
          "enableAcceleratedNetworking": false,
          "enableFpga": null,
          "enableIpForwarding": false,
          "ipConfigurations": [
            {
              "applicationGatewayBackendAddressPools": [
                {
                  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxx/backendAddressPools/appGatewayBackendPool",
                  "resourceGroup": "myVMSSResourceGroupxxxxxx"
                }
              ],
              "applicationSecurityGroups": null,
              "loadBalancerBackendAddressPools": null,
              "loadBalancerInboundNatPools": null,
              "name": "myvmsdxxxIPConfig",
              "primary": null,
              "privateIpAddressVersion": "IPv4",
              "publicIpAddressConfiguration": null,
              "subnet": {
                "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxx/subnets/myVMSNxxxxx",
                "resourceGroup": "myVMSSResourceGroupaxxxxx"
              }
            }
          ],
          "name": "myvmsxxxxxx",
          "networkSecurityGroup": null,
          "primary": true
        }
      ]
    },
    "osProfile": {
      "adminPassword": null,
      "adminUsername": "azureuser",
      "allowExtensionOperations": true,
      "computerNamePrefix": "myvmsdxxx",
      "customData": null,
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "enableVmAgentPlatformUpdates": false,
        "patchSettings": null,
        "provisionVmAgent": true,
        "ssh": {
          "publicKeys": [
            {
              "keyData": "ssh-rsa xxxxxxxx",
              "path": "/home/azureuser/.ssh/authorized_keys"
            }
          ]
        }
      },
      "requireGuestProvisionSignal": true,
      "secrets": [],
      "windowsConfiguration": null
    },
    "priority": null,
    "scheduledEventsProfile": null,
    "securityPostureReference": null,
    "securityProfile": null,
    "serviceArtifactReference": null,
    "storageProfile": {
      "dataDisks": null,
      "diskControllerType": "SCSI",
      "imageReference": {
        "communityGalleryImageId": null,
        "exactVersion": null,
        "id": null,
        "offer": "0001-com-ubuntu-server-jammy",
        "publisher": "Canonical",
        "sharedGalleryImageId": null,
        "sku": "22_04-lts-gen2",
        "version": "latest"
      },
      "osDisk": {
        "caching": "ReadWrite",
        "createOption": "FromImage",
        "deleteOption": null,
        "diffDiskSettings": null,
        "diskSizeGb": 30,
        "image": null,
        "managedDisk": {
          "diskEncryptionSet": null,
          "securityProfile": null,
          "storageAccountType": "Premium_LRS"
        },
        "name": null,
        "osType": "Linux",
        "vhdContainers": null,
        "writeAcceleratorEnabled": null
      }
    },
    "userData": null
  },
  "zoneBalance": false,
  "zones": [
    "1",
    "2",
    "3"
  ]
}
 0.3 <nil>}} {bash az monitor autoscale create --resource-group $MY_RESOURCE_GROUP_NAME --resource  $MY_VMSS_NAME --resource-type Microsoft.Compute/virtualMachineScaleSets --name autoscale --min-count 2 --max-count 10 --count 2
 Define an autoscale profile To enable autoscale on a scale set, first define an autoscale profile. This profile defines the default, minimum, and maximum scale set capacity. These limits let you control cost by not continually creating VM instances and balance acceptable performance with a minimum number of instances that remain in a scale-in event.
The following example sets the default, minimum capacity of two VM instances, and a maximum capacity of 10: {json {
  "enabled": true,
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxx/providers/microsoft.insights/autoscalesettings/autoscale",
  "location": "eastus",
  "name": "autoscale",
  "namePropertiesName": "autoscale",
  "notifications": [
    {
      "email": {
        "customEmails": [],
        "sendToSubscriptionAdministrator": false,
        "sendToSubscriptionCoAdministrators": false
      },
      "webhooks": []
    }
  ],
  "predictiveAutoscalePolicy": {
    "scaleLookAheadTime": null,
    "scaleMode": "Disabled"
  },
  "profiles": [
    {
      "capacity": {
        "default": "2",
        "maximum": "10",
        "minimum": "2"
      },
      "fixedDate": null,
      "name": "default",
      "recurrence": null,
      "rules": []
    }
  ],
  "resourceGroup": "myVMSSResourceGroupxxxxx",
  "systemData": null,
  "tags": {},
  "targetResourceLocation": null,
  "targetResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
  "type": "Microsoft.Insights/autoscaleSettings"
}
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU > 70 avg 5m" --scale out 3
 Create a rule to autoscale out The following command creates a rule that increases the number of VM instances in a scale set when the average CPU load is greater than 70% over a 5-minute period. When the rule triggers, the number of VM instances increases by three. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "GreaterThan",
    "statistic": "Average",
    "threshold": "70",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Increase",
    "type": "ChangeCount",
    "value": "3"
  }
} 
 0.3 <nil>}} {bash az monitor autoscale rule create --resource-group  $MY_RESOURCE_GROUP_NAME --autoscale-name autoscale --condition "Percentage CPU < 30 avg 5m" --scale in 1
 Create a rule to autoscale in Create another rule with `az monitor autoscale rule create` that decreases the number of VM instances in a scale set when the average CPU load then drops below 30% over a 5-minute period. The following example defines the rule to scale in the number of VM instances by one. {json {
  "metricTrigger": {
    "dimensions": [],
    "dividePerInstance": null,
    "metricName": "Percentage CPU",
    "metricNamespace": null,
    "metricResourceLocation": null,
    "metricResourceUri": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Compute/virtualMachineScaleSets/myVMSSxxxxxx",
    "operator": "LessThan",
    "statistic": "Average",
    "threshold": "30",
    "timeAggregation": "Average",
    "timeGrain": "PT1M",
    "timeWindow": "PT5M"
  },
  "scaleAction": {
    "cooldown": "PT5M",
    "direction": "Decrease",
    "type": "ChangeCount",
    "value": "1"
  }
}
 0.3 <nil>}} {bash az network public-ip show --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --query [ipAddress]  --output tsv
 Test the page The following command shows you the public IP of your Application Gateway. Paste the IP address into a browser page for testing. {  0 <nil>}}]
time=2024-07-11T20:39:00Z level=info msg=Successfully built out the scenario: Create virtual machines in a scale set using Azure CLI
time=2024-07-11T20:39:00Z level=info msg=Changed directory to .
time=2024-07-11T20:39:00Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-11T20:39:00Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:39:00Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myVMSSResourceGroup$RANDOM_ID"
export REGION=EastUS
export MY_VMSS_NAME="myVMSS$RANDOM_ID"
export MY_USERNAME=azureuser
export MY_VM_IMAGE="Ubuntu2204"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export NETWORK_PREFIX="$(($RANDOM % 254 + 1))"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_VM_SN_NAME="myVMSN$RANDOM_ID"
export MY_VM_SN_PREFIX="10.$NETWORK_PREFIX.0.0/24"
export MY_APPGW_SN_NAME="myAPPGWSN$RANDOM_ID"
export MY_APPGW_SN_PREFIX="10.$NETWORK_PREFIX.1.0/24"
export MY_APPGW_NAME="myAPPGW$RANDOM_ID"
export MY_APPGW_PUBLIC_IP_NAME="myAPPGWPublicIP$RANDOM_ID"

time=2024-07-11T20:39:00Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-11T20:39:01Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupxxxxxx",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupf9e029",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:39:01Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.757226
time=2024-07-11T20:39:01Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029",
  "location": "eastus",
  "managedBy": null,
  "name": "myVMSSResourceGroupf9e029",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:39:01Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION -o JSON

time=2024-07-11T20:39:01Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:39:01Z level=info msg=Found resource group named: myVMSSResourceGroupf9e029
time=2024-07-11T20:39:01Z level=info msg=Executing command asynchronously:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-11T20:39:14Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.X.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx",
    "location": "eastus",
    "name": "myVNetxxxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subnets": [
      {
        "addressPrefix": "10.X.0.0/24",
        "delegations": [],
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myVMSNxxxxxx", 
        "name": "myVMSNxxxxxx",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.220.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029",
    "location": "eastus",
    "name": "myVNetf9e029",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "c1ac3f40-293e-4e01-94a3-9e5af33a89f1",
    "subnets": [
      {
        "addressPrefix": "10.220.0.0/24",
        "delegations": [],
        "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myVMSNf9e029",
        "name": "myVMSNf9e029",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:39:14Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.717601
time=2024-07-11T20:39:14Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.220.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029",
    "location": "eastus",
    "name": "myVNetf9e029",
    "provisioningState": "Succeeded",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "c1ac3f40-293e-4e01-94a3-9e5af33a89f1",
    "subnets": [
      {
        "addressPrefix": "10.220.0.0/24",
        "delegations": [],
        "etag": "W/\"7471cab8-016e-48c8-bf66-335a55821bbd\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myVMSNf9e029",
        "name": "myVMSNf9e029",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:39:14Z level=info msg=Finished executing:
 az network vnet create  --name $MY_VNET_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --location $REGION  --address-prefix $MY_VNET_PREFIX  --subnet-name $MY_VM_SN_NAME --subnet-prefix $MY_VM_SN_PREFIX -o JSON

time=2024-07-11T20:39:14Z level=info msg=Executing command asynchronously:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-11T20:39:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "10.66.1.0/24",
  "delegations": [],
  "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",    
  "name": "myAPPGWSNxxxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupxxxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.220.1.0/24",
  "delegations": [],
  "etag": "W/\"0ccfa810-3874-434a-a9db-83fee072af18\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
  "name": "myAPPGWSNf9e029",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupf9e029",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:39:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.731824
time=2024-07-11T20:39:27Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.220.1.0/24",
  "delegations": [],
  "etag": "W/\"0ccfa810-3874-434a-a9db-83fee072af18\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
  "name": "myAPPGWSNf9e029",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "myVMSSResourceGroupf9e029",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:39:27Z level=info msg=Finished executing:
 az network vnet subnet create  --name $MY_APPGW_SN_NAME  --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name  $MY_VNET_NAME --address-prefix  $MY_APPGW_SN_PREFIX -o JSON

time=2024-07-11T20:39:27Z level=info msg=Executing command asynchronously:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-11T20:39:31Z level=debug msg=Comparing JSON strings:
Expected: {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses//myAPPGWPublicIPxxxxxx",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "X.X.X.X",
    "ipTags": [],
    "location": "eastus",
    "name": "/myAPPGWPublicIPxxxxxx",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupxxxxxx",
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

Actual{
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"7c29baee-a561-459e-9934-919e7f98473b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.171.56.54",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPf9e029",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "6527a621-cf9b-4035-988c-e673a0ae67ff",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:39:31Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.745732
time=2024-07-11T20:39:31Z level=info msg=Command output to stdout:
 {
  "publicIp": {
    "ddosSettings": {
      "protectionMode": "VirtualNetworkInherited"
    },
    "etag": "W/\"7c29baee-a561-459e-9934-919e7f98473b\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
    "idleTimeoutInMinutes": 4,
    "ipAddress": "172.171.56.54",
    "ipTags": [],
    "location": "eastus",
    "name": "myAPPGWPublicIPf9e029",
    "provisioningState": "Succeeded",
    "publicIPAddressVersion": "IPv4",
    "publicIPAllocationMethod": "Static",
    "resourceGroup": "myVMSSResourceGroupf9e029",
    "resourceGuid": "6527a621-cf9b-4035-988c-e673a0ae67ff",
    "sku": {
      "name": "Standard",
      "tier": "Regional"
    },
    "type": "Microsoft.Network/publicIPAddresses",
    "zones": [
      "1",
      "2",
      "3"
    ]
  }
}

time=2024-07-11T20:39:31Z level=info msg=Finished executing:
 az network public-ip create  --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_APPGW_PUBLIC_IP_NAME --sku Standard   --location $REGION  --allocation-method static --version IPv4 --zone 1 2 3 -o JSON

time=2024-07-11T20:39:31Z level=info msg=Executing command asynchronously:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-11T20:47:40Z level=debug msg=Comparing JSON strings:
Expected: {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPxxxxxx",       
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/virtualNetworks/myVNetxxxxxx/subnets/myAPPGWSNxxxxxx",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          }
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "frontendPort": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupxxxxxx"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"",
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "httpListener": {
            "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myVMSSResourceGroupxxxxxx/providers/Microsoft.Network/applicationGateways/myAPPGWxxxxxx/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupxxxxxx"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupxxxxxx",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

Actual{
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "97a6695c-52bb-4824-b6c4-baf13822fdf6",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-11T20:47:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.733191
time=2024-07-11T20:47:40Z level=info msg=Command output to stdout:
 {
  "applicationGateway": {
    "backendAddressPools": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
        "name": "appGatewayBackendPool",
        "properties": {
          "backendAddresses": [],
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ]
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendAddressPools"
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
        "name": "appGatewayBackendHttpSettings",
        "properties": {
          "connectionDraining": {
            "drainTimeoutInSec": 1,
            "enabled": false
          },
          "cookieBasedAffinity": "Disabled",
          "pickHostNameFromBackendAddress": false,
          "port": 80,
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requestTimeout": 30
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/backendHttpSettingsCollection"
      }
    ],
    "backendSettingsCollection": [],
    "frontendIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "privateIPAllocationMethod": "Dynamic",
          "provisioningState": "Succeeded",
          "publicIPAddress": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/publicIPAddresses/myAPPGWPublicIPf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations"
      }
    ],
    "frontendPorts": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
        "name": "appGatewayFrontendPort",
        "properties": {
          "httpListeners": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "port": 80,
          "provisioningState": "Succeeded"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/frontendPorts"
      }
    ],
    "gatewayIPConfigurations": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/gatewayIPConfigurations/appGatewayFrontendIP",
        "name": "appGatewayFrontendIP",
        "properties": {
          "provisioningState": "Succeeded",
          "subnet": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/virtualNetworks/myVNetf9e029/subnets/myAPPGWSNf9e029",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          }
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/gatewayIPConfigurations"
      }
    ],
    "httpListeners": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
        "name": "appGatewayHttpListener",
        "properties": {
          "frontendIPConfiguration": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendIPConfigurations/appGatewayFrontendIP",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "frontendPort": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/frontendPorts/appGatewayFrontendPort",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "hostNames": [],
          "protocol": "Http",
          "provisioningState": "Succeeded",
          "requestRoutingRules": [
            {
              "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
              "resourceGroup": "myVMSSResourceGroupf9e029"
            }
          ],
          "requireServerNameIndication": false
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/httpListeners"
      }
    ],
    "listeners": [],
    "loadDistributionPolicies": [],
    "operationalState": "Running",
    "privateEndpointConnections": [],
    "privateLinkConfigurations": [],
    "probes": [],
    "provisioningState": "Succeeded",
    "redirectConfigurations": [],
    "requestRoutingRules": [
      {
        "etag": "W/\"ebbc8160-5c9d-4805-b283-5fb866175b1f\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/requestRoutingRules/rule1",
        "name": "rule1",
        "properties": {
          "backendAddressPool": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendAddressPools/appGatewayBackendPool",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "backendHttpSettings": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/backendHttpSettingsCollection/appGatewayBackendHttpSettings",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "httpListener": {
            "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myVMSSResourceGroupf9e029/providers/Microsoft.Network/applicationGateways/myAPPGWf9e029/httpListeners/appGatewayHttpListener",
            "resourceGroup": "myVMSSResourceGroupf9e029"
          },
          "priority": 1001,
          "provisioningState": "Succeeded",
          "ruleType": "Basic"
        },
        "resourceGroup": "myVMSSResourceGroupf9e029",
        "type": "Microsoft.Network/applicationGateways/requestRoutingRules"
      }
    ],
    "resourceGuid": "97a6695c-52bb-4824-b6c4-baf13822fdf6",
    "rewriteRuleSets": [],
    "routingRules": [],
    "sku": {
      "capacity": 2,
      "family": "Generation_1",
      "name": "Standard_v2",
      "tier": "Standard_v2"
    },
    "sslCertificates": [],
    "sslProfiles": [],
    "trustedClientCertificates": [],
    "trustedRootCertificates": [],
    "urlPathMaps": []
  }
}

time=2024-07-11T20:47:40Z level=info msg=Finished executing:
 az network application-gateway create   --name $MY_APPGW_NAME --location $REGION --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --subnet $MY_APPGW_SN_NAME --capacity 2  --zones 1 2 3 --sku Standard_v2   --http-settings-cookie-based-affinity Disabled   --frontend-port 80 --http-settings-port 80   --http-settings-protocol Http --public-ip-address $MY_APPGW_PUBLIC_IP_NAME --priority 1001 -o JSON

time=2024-07-11T20:47:40Z level=info msg=Executing command asynchronously:
 az vmss create --name $MY_VMSS_NAME --resource-group $MY_RESOURCE_GROUP_NAME --image $MY_VM_IMAGE --admin-username $MY_USERNAME --generate-ssh-keys --public-ip-per-vm --orchestration-mode Uniform --instance-count 2 --zones 1 2 3 --vnet-name $MY_VNET_NAME --subnet $MY_VM_SN_NAME --vm-sku Standard_DS2_v2 --upgrade-policy-mode Automatic --app-gateway $MY_APPGW_NAME --backend-pool-name appGatewayBackendPool -o JSON

time=2024-07-11T20:48:18Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_HDg0p3ypGUit0nmkcfQiKLr9jIrYF70r' is not valid according to the validation procedure. The tracking id is '3583d69f-7652-4dcb-a39f-ed750fd07a08'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
time=2024-07-11T20:48:18Z level=info msg=Attempting to delete the deployed resource group with the name: myVMSSResourceGroupf9e029
time=2024-07-11T20:48:21Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:48:21Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_HDg0p3ypGUit0nmkcfQiKLr9jIrYF70r' is not valid according to the validation procedure. The tracking id is '3583d69f-7652-4dcb-a39f-ed750fd07a08'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}
'
StdErr: ERROR: {"error":{"code":"InvalidTemplateDeployment","message":"The template deployment 'vmss_deploy_HDg0p3ypGUit0nmkcfQiKLr9jIrYF70r' is not valid according to the validation procedure. The tracking id is '3583d69f-7652-4dcb-a39f-ed750fd07a08'. See inner errors for details.","details":[{"code":"SkuNotAvailable","message":"The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details."}]}}

time=2024-07-11T20:48:22Z level=info msg=INI file 'scenarios/azure-docs/articles/mysql/flexible-server/tutorial-deploy-wordpress-on-aks.ini' does not exist, skipping...
time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=warning msg=The node before the codeblock `az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:22Z level=debug msg=Found 27 code blocks CodeBlocks=[{bash export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"
 Define Environment Variables The first step in this tutorial is to define environment variables. {  0 <nil>}} {bash az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION
 Create a resource group An Azure resource group is a logical group in which Azure resources are deployed and managed. All resources must be placed in a resource group. The following command creates a resource group with the previously defined `$MY_RESOURCE_GROUP_NAME` and `$REGION` parameters. {json {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX
 Create a virtual network and subnet A virtual network is the fundamental building block for private networks in Azure. Azure Virtual Network enables Azure resources like VMs to securely communicate with each other and the internet. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 
 Create an Azure Database for MySQL flexible server instance Azure Database for MySQL flexible server is a managed service that you can use to run, manage, and scale highly available MySQL servers in the cloud. Create an Azure Database for MySQL flexible server instance with the [az mysql flexible-server create](/cli/azure/mysql/flexible-server) command. A server can contain multiple databases. The following command creates a server using service defaults and variable values from your Azure CLI's local context: {  0 <nil>}} {bash az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON
 Create an Azure Database for MySQL flexible server instance  {json {
  "databaseName": "wordpress",
  "host": "mydbxxx.mysql.database.azure.com",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX",
  "location": "East US",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "skuname": "Standard_B2s",
  "subnetId": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/myMySQLSNXXX",
  "username": "dbadminxxx",
  "version": "8.0.21"
}
 0.3 <nil>}} {bash runtime="10 minute"; endtime=$(date -ud "$runtime" +%s); while [[ $(date -u +%s) -le $endtime ]]; do STATUS=$(az mysql flexible-server show -g $MY_RESOURCE_GROUP_NAME -n $MY_MYSQL_DB_NAME --query state -o tsv); echo $STATUS; if [ "$STATUS" = 'Ready' ]; then break; else sleep 10; fi; done
 Check the Azure Database for MySQL - Flexible Server status It takes a few minutes to create the Azure Database for MySQL - Flexible Server and supporting resources. {  0 <nil>}} {bash az mysql flexible-server parameter set \
    -g $MY_RESOURCE_GROUP_NAME \
    -s $MY_MYSQL_DB_NAME \
    -n require_secure_transport -v "OFF" -o JSON
 Disable Azure Database for MySQL - Flexible Server SSL connection parameter for WordPress integration You can also modify the value of certain server parameters to update the underlying configuration values for the MySQL server engine. To update the server parameter, use the [az mysql flexible-server parameter set](/cli/azure/mysql/flexible-server/parameter#az-mysql-flexible-server-parameter-set) command. {json {
  "allowedValues": "ON,OFF",
  "currentValue": "OFF",
  "dataType": "Enumeration",
  "defaultValue": "ON",
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX/providers/Microsoft.DBforMySQL/flexibleServers/mydbXXX/configurations/require_secure_transport",
  "isConfigPendingRestart": "False",
  "isDynamicConfig": "True",
  "isReadOnly": "False",
  "name": "require_secure_transport",
  "resourceGroup": "myWordPressAKSResourceGroupXXX",
  "source": "user-override",
  "systemData": null,
  "type": "Microsoft.DBforMySQL/flexibleServers/configurations",
  "value": "OFF"
}
 0.3 <nil>}} {bash export MY_SN_ID=$(az network vnet subnet list --resource-group $MY_RESOURCE_GROUP_NAME --vnet-name $MY_VNET_NAME --query "[0].id" --output tsv)

az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --auto-upgrade-channel stable \
    --enable-cluster-autoscaler \
    --enable-addons monitoring \
    --location $REGION \
    --node-count 1 \
    --min-count 1 \
    --max-count 3 \
    --network-plugin azure \
    --network-policy azure \
    --vnet-subnet-id $MY_SN_ID \
    --no-ssh-key \
    --node-vm-size Standard_DS2_v2 \
    --service-cidr 10.255.0.0/24 \
    --dns-service-ip 10.255.0.10 \
    --zones 1 2 3
 Create AKS cluster This action takes a few minutes. {  0 <nil>}} {bash    if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster To manage a Kubernetes cluster, use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/), the Kubernetes command-line client. If you use Azure Cloud Shell, `kubectl` is already installed. The following example installs `kubectl` locally using the [az aks install-cli](/cli/azure/aks#az-aks-install-cli) command. {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This command will overwrite any existing credentials with the same entry. {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster To verify the connection to your cluster, use the [kubectl get]( https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) command to return a list of the cluster nodes. {  0 <nil>}} {bash export MY_STATIC_IP=$(az network public-ip create --resource-group MC_${MY_RESOURCE_GROUP_NAME}_${MY_AKS_CLUSTER_NAME}_${REGION} --location ${REGION} --name ${MY_PUBLIC_IP_NAME} --dns-name ${MY_DNS_LABEL} --sku Standard --allocation-method static --version IPv4 --zone 1 2 3 --query publicIp.ipAddress -o tsv)
 Install NGINX ingress controller You can configure your ingress controller with a static public IP address. The static public IP address remains if you delete your ingress controller. The IP address doesn't remain if you delete your AKS cluster.
When you upgrade your ingress controller, you must pass a parameter to the Helm release to ensure the ingress controller service is made aware of the load balancer that will be allocated to it. For the HTTPS certificates to work correctly, use a DNS label to configure a fully qualified domain name (FQDN) for the ingress controller IP address. Your FQDN should follow this form: $MY_DNS_LABEL.AZURE_REGION_NAME.cloudapp.azure.com. {  0 <nil>}} {bash     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
    helm repo update
    helm upgrade --install --cleanup-on-fail --atomic ingress-nginx ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$MY_DNS_LABEL \
        --set controller.service.loadBalancerIP=$MY_STATIC_IP \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
        --wait --timeout 10m0s
 Install NGINX ingress controller Next, you add the ingress-nginx Helm repository, update the local Helm Chart repository cache, and install ingress-nginx addon via Helm. You can set the DNS label with the **--set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"="<DNS_LABEL>"** parameter either when you first deploy the ingress controller or later. In this example, you specify your own public IP address that you created in the previous step with the **--set controller.service.loadBalancerIP="<STATIC_IP>" parameter**. {  0 <nil>}} {bash kubectl create namespace cert-manager
 Set Up Cert Manager In order to install cert-manager, we must first create a namespace to run it in. This tutorial installs cert-manager into the cert-manager namespace. You can run cert-manager in a different namespace, but you must make modifications to the deployment manifests. {  0 <nil>}} {bash kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.0/cert-manager.crds.yaml
 Set Up Cert Manager We can now install cert-manager. All resources are included in a single YAML manifest file. Install the manifest file with the following command: {  0 <nil>}} {bash kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true
 Set Up Cert Manager Add the `certmanager.k8s.io/disable-validation: "true"` label to the cert-manager namespace by running the following. This allows the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace. {  0 <nil>}} {bash helm repo add jetstack https://charts.jetstack.io
 Obtain certificate via Helm Charts Add the Jetstack Helm repository. This repository is the only supported source of cert-manager charts. There are other mirrors and copies across the internet, but those are unofficial and could present a security risk. {  0 <nil>}} {bash helm repo update
 Obtain certificate via Helm Charts Update local Helm Chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail --atomic \
    --namespace cert-manager \
    --version v1.7.0 \
    --wait --timeout 10m0s \
    cert-manager jetstack/cert-manager
 Obtain certificate via Helm Charts Install Cert-Manager addon via Helm. {  0 <nil>}} {bash cluster_issuer_variables=$(<cluster-issuer-prod.yaml)
echo "${cluster_issuer_variables//\$SSL_EMAIL_ADDRESS/$SSL_EMAIL_ADDRESS}" | kubectl apply -f -
 Obtain certificate via Helm Charts Apply the certificate issuer YAML file. ClusterIssuers are Kubernetes resources that represent certificate authorities (CAs) that can generate signed certificates by honoring certificate signing requests. All cert-manager certificates require a referenced issuer that is in a ready condition to attempt to honor the request. You can find the issuer we're in the `cluster-issuer-prod.yml file`. {  0 <nil>}} {bash kubectl apply -f wp-azurefiles-sc.yaml
 Create a custom storage class The default storage classes suit the most common scenarios, but not all. For some cases, you might want to have your own storage class customized with your own parameters. For example, use the following manifest to configure the **mountOptions** of the file share.
The default value for **fileMode** and **dirMode** is **0755** for Kubernetes mounted file shares. You can specify the different mount options on the storage class object. {  0 <nil>}} {bash helm repo add bitnami https://charts.bitnami.com/bitnami
 Deploy WordPress to AKS cluster Add the Wordpress Bitnami Helm repository. {  0 <nil>}} {bash helm repo update
 Deploy WordPress to AKS cluster Update local Helm chart repository cache. {  0 <nil>}} {bash helm upgrade --install --cleanup-on-fail \
    --wait --timeout 10m0s \
    --namespace wordpress \
    --create-namespace \
    --set wordpressUsername="$MY_WP_ADMIN_USER" \
    --set wordpressPassword="$MY_WP_ADMIN_PW" \
    --set wordpressEmail="$SSL_EMAIL_ADDRESS" \
    --set externalDatabase.host="$MY_MYSQL_HOSTNAME" \
    --set externalDatabase.user="$MY_MYSQL_ADMIN_USERNAME" \
    --set externalDatabase.password="$MY_MYSQL_ADMIN_PW" \
    --set ingress.hostname="$FQDN" \
    --values helm-wp-aks-values.yaml \
    wordpress bitnami/wordpress
 Deploy WordPress to AKS cluster Install Wordpress workload via Helm. {text Release "wordpress" does not exist. Installing it now.
NAME: wordpress
LAST DEPLOYED: Tue Oct 24 16:19:35 2023
NAMESPACE: wordpress
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: wordpress
CHART VERSION: 18.0.8
APP VERSION: 6.3.2

** Please be patient while the chart is being deployed **

Your WordPress site can be accessed through the following DNS name from within your cluster:

    wordpress.wordpress.svc.cluster.local (port 80)

To access your WordPress site from outside the cluster follow the steps below:

1. Get the WordPress URL and associate WordPress hostname to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
   echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts
    export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
    echo "WordPress URL: https://mydnslabelxxx.eastus.cloudapp.azure.com/"
    echo "$CLUSTER_IP  mydnslabelxxx.eastus.cloudapp.azure.com" | sudo tee -a /etc/hosts

2. Open a browser and access WordPress using the obtained URL.

3. Login with the following credentials below to see your blog:

    echo Username: wpcliadmin
    echo Password: $(kubectl get secret --namespace wordpress wordpress -o jsonpath="{.data.wordpress-password}" | base64 -d)
 0.3 <nil>}} {bash runtime="5 minute"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]; do
    export DEPLOYMENT_REPLICAS=$(kubectl -n wordpress get deployment wordpress -o=jsonpath='{.status.availableReplicas}');
    echo Current number of replicas "$DEPLOYMENT_REPLICAS/3";
    if [ "$DEPLOYMENT_REPLICAS" = "3" ]; then
        break;
    else
        sleep 10;
    fi;
done
 Browse your AKS deployment secured via HTTPS [!NOTE]
It often takes 2-3 minutes for the SSL certificate to propagate and about 5 minutes to have all WordPress POD replicas ready and the site to be fully reachable via https. {  0 <nil>}} {bash if curl -I -s -f https://$FQDN > /dev/null ; then 
    curl -L -s -f https://$FQDN 2> /dev/null | head -n 9
else 
    exit 1
fi;
 Browse your AKS deployment secured via HTTPS Check that WordPress content is delivered correctly using the following command: {HTML {
<!DOCTYPE html>
<html lang="en-US">
<head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name='robots' content='max-image-preview:large' />
<title>WordPress on AKS</title>
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="WordPress on AKS &raquo; Comments Feed" href="https://mydnslabelxxx.eastus.cloudapp.azure.com/comments/feed/" />
}
 0.3 <nil>}} {bash echo "You can now visit your web server at https://$FQDN"
 Browse your AKS deployment secured via HTTPS Visit the website through the following URL: {  0 <nil>}}]
time=2024-07-11T20:48:22Z level=info msg=Successfully built out the scenario: Tutorial: Deploy WordPress app on AKS with Azure Database for MySQL - Flexible Server
time=2024-07-11T20:48:22Z level=info msg=Changed directory to .
time=2024-07-11T20:48:23Z level=info msg=Executing command asynchronously:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:48:23Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:48:23Z level=info msg=Finished executing:
 export SSL_EMAIL_ADDRESS="$(az account show --query user.name --output tsv)"
export NETWORK_PREFIX="$(($RANDOM % 253 + 1))"
export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myWordPressAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_PUBLIC_IP_NAME="myPublicIP$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
export MY_VNET_NAME="myVNet$RANDOM_ID"
export MY_VNET_PREFIX="10.$NETWORK_PREFIX.0.0/16"
export MY_SN_NAME="mySN$RANDOM_ID"
export MY_SN_PREFIX="10.$NETWORK_PREFIX.0.0/22"
export MY_MYSQL_DB_NAME="mydb$RANDOM_ID"
export MY_MYSQL_ADMIN_USERNAME="dbadmin$RANDOM_ID"
export MY_MYSQL_ADMIN_PW="$(openssl rand -base64 32)"
export MY_MYSQL_SN_NAME="myMySQLSN$RANDOM_ID"
export MY_MYSQL_HOSTNAME="$MY_MYSQL_DB_NAME.mysql.database.azure.com"
export MY_WP_ADMIN_PW="$(openssl rand -base64 32)"
export MY_WP_ADMIN_USER="wpcliadmin"
export FQDN="${MY_DNS_LABEL}.${REGION}.cloudapp.azure.com"

time=2024-07-11T20:48:23Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:48:23Z level=info msg=Executing command asynchronously:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-11T20:48:26Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myWordPressAKSResourceGroupXXX",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup70fcba",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:26Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.748837
time=2024-07-11T20:48:26Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba",
  "location": "westeurope",
  "managedBy": null,
  "name": "myWordPressAKSResourceGroup70fcba",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:26Z level=info msg=Finished executing:
 az group create \
    --name $MY_RESOURCE_GROUP_NAME \
    --location $REGION

time=2024-07-11T20:48:26Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:48:26Z level=info msg=Found resource group named: myWordPressAKSResourceGroup70fcba
time=2024-07-11T20:48:26Z level=info msg=Executing command asynchronously:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:48:40Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.210.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX",
    "location": "eastus",
    "name": "myVNet210",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroupXXX",
    "subnets": [
      {
        "addressPrefix": "10.210.0.0/22",
        "delegations": [],
        "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/myWordPressAKSResourceGroupXXX/providers/Microsoft.Network/virtualNetworks/myVNetXXX/subnets/mySNXXX",
        "name": "mySN210",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroupXXX",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.24.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba",
    "location": "westeurope",
    "name": "myVNet70fcba",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup70fcba",
    "resourceGuid": "157bf281-73b7-4ad6-a185-84ae43f129ff",
    "subnets": [
      {
        "addressPrefix": "10.24.0.0/22",
        "delegations": [],
        "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba/subnets/mySN70fcba",
        "name": "mySN70fcba",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup70fcba",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:48:40Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.729591
time=2024-07-11T20:48:40Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.24.0.0/16"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba",
    "location": "westeurope",
    "name": "myVNet70fcba",
    "provisioningState": "Succeeded",
    "resourceGroup": "myWordPressAKSResourceGroup70fcba",
    "resourceGuid": "157bf281-73b7-4ad6-a185-84ae43f129ff",
    "subnets": [
      {
        "addressPrefix": "10.24.0.0/22",
        "delegations": [],
        "etag": "W/\"9e477689-1201-495b-838c-a7975c3af9fe\"",
        "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myWordPressAKSResourceGroup70fcba/providers/Microsoft.Network/virtualNetworks/myVNet70fcba/subnets/mySN70fcba",
        "name": "mySN70fcba",
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "provisioningState": "Succeeded",
        "resourceGroup": "myWordPressAKSResourceGroup70fcba",
        "type": "Microsoft.Network/virtualNetworks/subnets"
      }
    ],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:48:40Z level=info msg=Finished executing:
 az network vnet create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --location $REGION \
    --name $MY_VNET_NAME \
    --address-prefix $MY_VNET_PREFIX \
    --subnet-name $MY_SN_NAME \
    --subnet-prefixes $MY_SN_PREFIX

time=2024-07-11T20:48:40Z level=info msg=Executing command asynchronously:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-11T20:48:40Z level=info msg=Command output to stdout:
 Your MySQL user dbadmin70fcba password is: iHWNuj6lyKZg8Z9OTDq3YcCd0zIGtpjfN6ycpalY3BY=

time=2024-07-11T20:48:40Z level=info msg=Finished executing:
 echo "Your MySQL user $MY_MYSQL_ADMIN_USERNAME password is: $MY_WP_ADMIN_PW" 

time=2024-07-11T20:48:40Z level=info msg=Executing command asynchronously:
 az mysql flexible-server create \
    --admin-password $MY_MYSQL_ADMIN_PW \
    --admin-user $MY_MYSQL_ADMIN_USERNAME \
    --auto-scale-iops Disabled \
    --high-availability Disabled \
    --iops 500 \
    --location $REGION \
    --name $MY_MYSQL_DB_NAME \
    --database-name wordpress \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --sku-name Standard_B2s \
    --storage-auto-grow Disabled \
    --storage-size 20 \
    --subnet $MY_MYSQL_SN_NAME \
    --private-dns-zone $MY_DNS_LABEL.private.mysql.database.azure.com \
    --tier Burstable \
    --version 8.0.21 \
    --vnet $MY_VNET_NAME \
    --yes -o JSON

time=2024-07-11T20:48:43Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup70fcba'...
WARNING: Resource group 'myWordPressAKSResourceGroup70fcba' exists ? : True 
ERROR: No available SKUs in this location
'
time=2024-07-11T20:48:43Z level=info msg=Attempting to delete the deployed resource group with the name: myWordPressAKSResourceGroup70fcba
time=2024-07-11T20:48:47Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:48:47Z level=error msg=Error testing scenario: failed to execute code block 1 on step 3.
Error: command exited with 'exit status 1' and the message 'WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup70fcba'...
WARNING: Resource group 'myWordPressAKSResourceGroup70fcba' exists ? : True 
ERROR: No available SKUs in this location
'
StdErr: WARNING: Checking the existence of the resource group 'myWordPressAKSResourceGroup70fcba'...
WARNING: Resource group 'myWordPressAKSResourceGroup70fcba' exists ? : True 
ERROR: No available SKUs in this location

time=2024-07-11T20:48:49Z level=info msg=INI file 'scenarios/azure-docs/articles/aks/learn/quick-kubernetes-deploy-cli.ini' does not exist, skipping...
time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- LINKS - external -->


time=2024-07-11T20:48:49Z level=debug msg=Found HTML block with the content: <!-- LINKS - internal -->


time=2024-07-11T20:48:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:49Z level=warning msg=The node before the codeblock `curl $IP_ADDRESS
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:48:49Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:48:49Z level=warning msg=The node before the codeblock `echo "You can now visit your web server at $IP_ADDRESS"
` is not a paragraph, it is a FencedCodeBlock
time=2024-07-11T20:48:49Z level=debug msg=Found 8 code blocks CodeBlocks=[{azurecli-interactive export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"
 Define environment variables Define the following environment variables for use throughout this quickstart: {  0 <nil>}} {azurecli-interactive az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group Create a resource group using the [`az group create`][az-group-create] command. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {azurecli-interactive az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys
 Create an AKS cluster Create an AKS cluster using the [`az aks create`][az-aks-create] command. The following example creates a cluster with one node and enables a system-assigned managed identity. {  0 <nil>}} {azurecli-interactive az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME
 Connect to the cluster Configure `kubectl` to connect to your Kubernetes cluster using the [az aks get-credentials][az-aks-get-credentials] command. This command downloads credentials and configures the Kubernetes CLI to use them. {  0 <nil>}} {azurecli-interactive kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the [kubectl get][kubectl-get] command. This command returns a list of the cluster nodes. {  0 <nil>}} {azurecli-interactive kubectl apply -f aks-store-quickstart.yaml
 Deploy the application Deploy the application using the [`kubectl apply`][kubectl-apply] command and specify the name of your YAML manifest. {  0 <nil>}} {azurecli-interactive runtime="5 minutes"
endtime=$(date -ud "$runtime" +%s)
while [[ $(date -u +%s) -le $endtime ]]
do
   STATUS=$(kubectl get pods -l app=store-front -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
   echo $STATUS
   if [ "$STATUS" == 'True' ]
   then
      export IP_ADDRESS=$(kubectl get service store-front --output 'jsonpath={..status.loadBalancer.ingress[0].ip}')
      echo "Service IP Address: $IP_ADDRESS"
      break
   else
      sleep 10
   fi
done
 Test the application Get the application URL using the following commands: {  0 <nil>}} {azurecli-interactive curl $IP_ADDRESS
 Test the application  {HTML <!doctype html>
<html lang="">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <link rel="icon" href="/favicon.ico">
      <title>store-front</title>
      <script defer="defer" src="/js/chunk-vendors.df69ae47.js"></script>
      <script defer="defer" src="/js/app.7e8cfbb2.js"></script>
      <link href="/css/app.a5dc49f6.css" rel="stylesheet">
   </head>
   <body>
      <div id="app"></div>
   </body>
</html>
 0.3 <nil>}}]
time=2024-07-11T20:48:49Z level=info msg=Successfully built out the scenario: Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure CLI
time=2024-07-11T20:48:49Z level=info msg=Changed directory to .
time=2024-07-11T20:48:49Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:48:49Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:48:49Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myAKSResourceGroup$RANDOM_ID"
export REGION="westeurope"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
export MY_DNS_LABEL="mydnslabel$RANDOM_ID"

time=2024-07-11T20:48:49Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:48:52Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myAKSResourceGroupxxxxxx",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup51ed0b",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup51ed0b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:52Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.746239
time=2024-07-11T20:48:52Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myAKSResourceGroup51ed0b",
  "location": "westeurope",
  "managedBy": null,
  "name": "myAKSResourceGroup51ed0b",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:48:52Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:48:52Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:48:52Z level=info msg=Found resource group named: myAKSResourceGroup51ed0b
time=2024-07-11T20:48:52Z level=info msg=Executing command asynchronously:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-11T20:52:36Z level=info msg=Command output to stdout:
 {
  "aadProfile": null,
  "addonProfiles": null,
  "agentPoolProfiles": [
    {
      "availabilityZones": null,
      "capacityReservationGroupId": null,
      "count": 1,
      "creationData": null,
      "currentOrchestratorVersion": "1.28.9",
      "enableAutoScaling": false,
      "enableEncryptionAtHost": false,
      "enableFips": false,
      "enableNodePublicIp": false,
      "enableUltraSsd": false,
      "gpuInstanceProfile": null,
      "hostGroupId": null,
      "kubeletConfig": null,
      "kubeletDiskType": "OS",
      "linuxOsConfig": null,
      "maxCount": null,
      "maxPods": 110,
      "minCount": null,
      "mode": "System",
      "name": "nodepool1",
      "networkProfile": null,
      "nodeImageVersion": "AKSUbuntu-2204gen2containerd-202406.25.0",
      "nodeLabels": null,
      "nodePublicIpPrefixId": null,
      "nodeTaints": null,
      "orchestratorVersion": "1.28",
      "osDiskSizeGb": 128,
      "osDiskType": "Managed",
      "osSku": "Ubuntu",
      "osType": "Linux",
      "podSubnetId": null,
      "powerState": {
        "code": "Running"
      },
      "provisioningState": "Succeeded",
      "proximityPlacementGroupId": null,
      "scaleDownMode": null,
      "scaleSetEvictionPolicy": null,
      "scaleSetPriority": null,
      "spotMaxPrice": null,
      "tags": null,
      "type": "VirtualMachineScaleSets",
      "upgradeSettings": {
        "drainTimeoutInMinutes": null,
        "maxSurge": "10%",
        "nodeSoakDurationInMinutes": null
      },
      "vmSize": "Standard_DS2_v2",
      "vnetSubnetId": null,
      "windowsProfile": null,
      "workloadRuntime": null
    }
  ],
  "apiServerAccessProfile": null,
  "autoScalerProfile": null,
  "autoUpgradeProfile": {
    "nodeOsUpgradeChannel": "NodeImage",
    "upgradeChannel": null
  },
  "azureMonitorProfile": null,
  "azurePortalFqdn": "myaksclust-myaksresourcegro-325e7c-ztxlk5g6.portal.hcp.westeurope.azmk8s.io",
  "currentKubernetesVersion": "1.28.9",
  "disableLocalAccounts": false,
  "diskEncryptionSetId": null,
  "dnsPrefix": "myAKSClust-myAKSResourceGro-325e7c",
  "enablePodSecurityPolicy": null,
  "enableRbac": true,
  "extendedLocation": null,
  "fqdn": "myaksclust-myaksresourcegro-325e7c-ztxlk5g6.hcp.westeurope.azmk8s.io",
  "fqdnSubdomain": null,
  "httpProxyConfig": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/myAKSResourceGroup51ed0b/providers/Microsoft.ContainerService/managedClusters/myAKSCluster51ed0b",
  "identity": {
    "delegatedResources": null,
    "principalId": "0c08ab1e-cdbb-4b7b-bf43-76b7cebd1dd1",
    "tenantId": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "type": "SystemAssigned",
    "userAssignedIdentities": null
  },
  "identityProfile": {
    "kubeletidentity": {
      "clientId": "e82e3854-a3f5-476e-ab9c-51446d64b39b",
      "objectId": "11bbad14-1dcf-4d09-8a8f-ae873eb87f25",
      "resourceId": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourcegroups/MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myAKSCluster51ed0b-agentpool"
    }
  },
  "ingressProfile": null,
  "kubernetesVersion": "1.28",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/N7iKuyTQeFrNT9tI2sz64xbIeMoyC6S2/AaJgSRvV2WDqixmRhpWbbLdn8cCQspKMch8suH3oJQ4sYNHzHvqlbrW/JbnAnTibndgjD8a/30h3nmqUvzgs5LOb+RNxoVzGQYNu+Y0fUV+BFp8JBI7F7vcNub+d31j1bYV4/FToR8kV//LfHUkCiy4cIyvhiMJTdSgAp551TocavjH6ahtUF3V5MG3fA7V7t1iPZCDk7mXB+5TYOkpSH4yi1TAnMrqJFEzC/MMG3edXh3rK3Xls2T3gZaTlBMqTQUNqSCRfDK3PK7gcXF0PKBtOOuZZ87yFZgjyhJZA4n1/7Oy0d83"
        }
      ]
    }
  },
  "location": "westeurope",
  "maxAgentPools": 100,
  "metricsProfile": {
    "costAnalysis": {
      "enabled": false
    }
  },
  "name": "myAKSCluster51ed0b",
  "networkProfile": {
    "dnsServiceIp": "10.0.0.10",
    "ipFamilies": [
      "IPv4"
    ],
    "loadBalancerProfile": {
      "allocatedOutboundPorts": null,
      "backendPoolType": "nodeIPConfiguration",
      "effectiveOutboundIPs": [
        {
          "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope/providers/Microsoft.Network/publicIPAddresses/17619f70-fc4e-4462-8f0f-0ff49297a5a6",
          "resourceGroup": "MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope"
        }
      ],
      "enableMultipleStandardLoadBalancers": null,
      "idleTimeoutInMinutes": null,
      "managedOutboundIPs": {
        "count": 1,
        "countIpv6": null
      },
      "outboundIPs": null,
      "outboundIpPrefixes": null
    },
    "loadBalancerSku": "standard",
    "natGatewayProfile": null,
    "networkDataplane": null,
    "networkMode": null,
    "networkPlugin": "kubenet",
    "networkPluginMode": null,
    "networkPolicy": null,
    "outboundType": "loadBalancer",
    "podCidr": "10.244.0.0/16",
    "podCidrs": [
      "10.244.0.0/16"
    ],
    "serviceCidr": "10.0.0.0/16",
    "serviceCidrs": [
      "10.0.0.0/16"
    ]
  },
  "nodeResourceGroup": "MC_myAKSResourceGroup51ed0b_myAKSCluster51ed0b_westeurope",
  "oidcIssuerProfile": {
    "enabled": false,
    "issuerUrl": null
  },
  "podIdentityProfile": null,
  "powerState": {
    "code": "Running"
  },
  "privateFqdn": null,
  "privateLinkResources": null,
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "myAKSResourceGroup51ed0b",
  "resourceUid": "6690453dc6617f0001c57a83",
  "securityProfile": {
    "azureKeyVaultKms": null,
    "defender": null,
    "imageCleaner": null,
    "workloadIdentity": null
  },
  "serviceMeshProfile": null,
  "servicePrincipalProfile": {
    "clientId": "msi",
    "secret": null
  },
  "sku": {
    "name": "Base",
    "tier": "Free"
  },
  "storageProfile": {
    "blobCsiDriver": null,
    "diskCsiDriver": {
      "enabled": true
    },
    "fileCsiDriver": {
      "enabled": true
    },
    "snapshotController": {
      "enabled": true
    }
  },
  "supportPlan": "KubernetesOfficial",
  "systemData": null,
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters",
  "upgradeSettings": null,
  "windowsProfile": null,
  "workloadAutoScalerProfile": {
    "keda": null,
    "verticalPodAutoscaler": null
  }
}

time=2024-07-11T20:52:36Z level=info msg=Finished executing:
 az aks create \
    --resource-group $MY_RESOURCE_GROUP_NAME \
    --name $MY_AKS_CLUSTER_NAME \
    --node-count 1 \
    --generate-ssh-keys

time=2024-07-11T20:52:36Z level=info msg=Executing command asynchronously:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:52:37Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:52:37Z level=info msg=Finished executing:
 az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME

time=2024-07-11T20:52:37Z level=info msg=Executing command asynchronously:
 kubectl get nodes

time=2024-07-11T20:52:38Z level=info msg=Command output to stdout:
 NAME                                STATUS   ROLES   AGE   VERSION
aks-nodepool1-19017769-vmss000000   Ready    agent   77s   v1.28.9

time=2024-07-11T20:52:38Z level=info msg=Finished executing:
 kubectl get nodes

time=2024-07-11T20:52:38Z level=info msg=Executing command asynchronously:
 kubectl apply -f aks-store-quickstart.yaml

time=2024-07-11T20:52:38Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
time=2024-07-11T20:52:38Z level=info msg=Attempting to delete the deployed resource group with the name: myAKSResourceGroup51ed0b
time=2024-07-11T20:52:43Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:52:43Z level=error msg=Error testing scenario: failed to execute code block 0 on step 4.
Error: command exited with 'exit status 1' and the message 'error: the path "aks-store-quickstart.yaml" does not exist
'
StdErr: error: the path "aks-store-quickstart.yaml" does not exist

time=2024-07-11T20:52:45Z level=info msg=INI file 'scenarios/DeployIGonAKS/README.ini' does not exist, skipping...
time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$"-->


time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!--expected_similarity="(?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$"-->


time=2024-07-11T20:52:45Z level=debug msg=Found HTML block with the content: <!--
## Clean Up

### Undeploy Inspektor Gadget

```bash
kubectl gadget undeploy
```

### Clean up Azure resources

When no longer needed, you can use `az group delete` to remove the resource group, cluster, and all related resources as follows. The `--no-wait` parameter returns control to the prompt without waiting for the operation to complete. The `--yes` parameter confirms that you wish to delete the resources without an additional prompt to do so.

```bash
az group delete --name $MY_RESOURCE_GROUP_NAME --no-wait --yes
```


time=2024-07-11T20:52:45Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:52:45Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: not installed$" found
time=2024-07-11T20:52:45Z level=debug msg=Regex "(?m)^Client version: v\\d+\\.\\d+\\.\\d+$\\n^Server version: v\\d+\\.\\d+\\.\\d+$" found
time=2024-07-11T20:52:45Z level=debug msg=Found 11 code blocks CodeBlocks=[{bash export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"
 Define Environment Variables The First step in this tutorial is to define environment variables: {  0 <nil>}} {bash az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $MY_RESOURCE_GROUP_NAME and $REGION parameters. {JSON {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key
 Create AKS Cluster This will take a few minutes. {  0 <nil>}} {bash if ! [ -x "$(command -v kubectl)" ]; then az aks install-cli; fi
 Connect to the cluster Install az aks CLI locally using the az aks install-cli command {  0 <nil>}} {bash az aks get-credentials --resource-group $MY_RESOURCE_GROUP_NAME --name $MY_AKS_CLUSTER_NAME --overwrite-existing
 Connect to the cluster [!WARNING]
This will overwrite any existing credentials with the same entry {  0 <nil>}} {bash kubectl get nodes
 Connect to the cluster Verify the connection to your cluster using the kubectl get command. This command returns a list of the cluster nodes. {  0 <nil>}} {bash IG_VERSION=$(curl -s https://api.github.com/repos/inspektor-gadget/inspektor-gadget/releases/latest | jq -r .tag_name)
IG_ARCH=amd64
mkdir -p $HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
curl -sL https://github.com/inspektor-gadget/inspektor-gadget/releases/download/${IG_VERSION}/kubectl-gadget-linux-${IG_ARCH}-${IG_VERSION}.tar.gz  | tar -C $HOME/.local/bin -xzf - kubectl-gadget
 Installing the kubectl plugin: `gadget` [!NOTE]
If you want to install it using [`krew`](https://sigs.k8s.io/krew) or compile it from the source, please follow the official documentation: [installing kubectl gadget](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-kubectl-gadget). {  0 <nil>}} {bash kubectl gadget version
 Installing the kubectl plugin: `gadget` Now, letâ€™s verify the installation by running the `version` command: {text Client version: vX.Y.Z
Server version: not installed
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: not installed$}} {bash kubectl gadget deploy
 Installing Inspektor Gadget in the cluster [!NOTE]
Several options are available to customize the deployment: use a specific container image, deploy to specific nodes, and many others. To know all of them, please check the official documentation: [installing in the cluster](https://github.com/inspektor-gadget/inspektor-gadget/blob/main/docs/install.md#installing-in-the-cluster). {  0 <nil>}} {bash kubectl gadget version
 Installing Inspektor Gadget in the cluster Now, letâ€™s verify the installation by running the `version` command again: {text Client version: vX.Y.Z
Server version: vX.Y.Z
 0 (?m)^Client version: v\d+\.\d+\.\d+$\n^Server version: v\d+\.\d+\.\d+$}} {bash kubectl gadget help
 Installing Inspektor Gadget in the cluster You can now start running the gadgets: {  0 <nil>}}]
time=2024-07-11T20:52:45Z level=info msg=Successfully built out the scenario: Quickstart: Deploy Inspektor Gadget in an Azure Kubernetes Service cluster
time=2024-07-11T20:52:45Z level=info msg=Changed directory to .
time=2024-07-11T20:52:45Z level=info msg=Executing command asynchronously:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-11T20:52:45Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:52:45Z level=info msg=Finished executing:
 export RANDOM_ID="$(openssl rand -hex 3)"
export MY_RESOURCE_GROUP_NAME="myResourceGroup$RANDOM_ID"
export REGION="eastus"
export MY_AKS_CLUSTER_NAME="myAKSCluster$RANDOM_ID"

time=2024-07-11T20:52:45Z level=info msg=Executing command asynchronously:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:52:46Z level=debug msg=Comparing JSON strings:
Expected: {
  "id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/myResourceGroup210",
  "location": "eastus",
  "managedBy": null,
  "name": "testResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup5be4bb",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup5be4bb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:52:46Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.762943
time=2024-07-11T20:52:46Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/myResourceGroup5be4bb",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup5be4bb",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:52:46Z level=info msg=Finished executing:
 az group create --name $MY_RESOURCE_GROUP_NAME --location $REGION

time=2024-07-11T20:52:46Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:52:46Z level=info msg=Found resource group named: myResourceGroup5be4bb
time=2024-07-11T20:52:46Z level=info msg=Executing command asynchronously:
 az aks create \
  --resource-group $MY_RESOURCE_GROUP_NAME \
  --name $MY_AKS_CLUSTER_NAME \
  --location $REGION \
  --no-ssh-key

time=2024-07-11T20:52:56Z level=error msg=Error executing command:
 command exited with 'exit status 1' and the message 'ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
time=2024-07-11T20:52:56Z level=info msg=Attempting to delete the deployed resource group with the name: myResourceGroup5be4bb
time=2024-07-11T20:52:58Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:52:58Z level=error msg=Error testing scenario: failed to execute code block 0 on step 2.
Error: command exited with 'exit status 1' and the message 'ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
'
StdErr: ERROR: (SkuNotAvailable) Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 
Code: SkuNotAvailable
Message: Preflight validation check for resource(s) for container service myAKSCluster5be4bb in resource group MC_myResourceGroup5be4bb_myAKSCluster5be4bb_eastus failed. Message: The requested VM size for resource 'Following SKUs have failed for Capacity Restrictions: Standard_DS2_v2' is currently not available in location 'eastus'. Please try another size or deploy to a different location or different zone. See https://aka.ms/azureskunotavailable for details.. Details: 

time=2024-07-11T20:53:01Z level=info msg=INI file 'scenarios/BlobVisionOnAKS/README.ini' does not exist, skipping...
time=2024-07-11T20:53:01Z level=debug msg=Found 0 code blocks CodeBlocks=[]
time=2024-07-11T20:53:01Z level=info msg=Successfully built out the scenario: Env vars
time=2024-07-11T20:53:01Z level=info msg=Changed directory to .
time=2024-07-11T20:53:01Z level=info msg=Executing command asynchronously:
 
time=2024-07-11T20:53:01Z level=info msg=Command output to stdout:
 
time=2024-07-11T20:53:01Z level=info msg=Finished executing:
 
time=2024-07-11T20:53:01Z level=info msg=The last codeblock was executed. Requesting to exit test mode...
time=2024-07-11T20:53:01Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:53:01Z level=info msg=INI file 'scenarios/DeployHAPGonARO/README.ini' does not exist, skipping...
time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Found HTML block with the content: <!-- expected_similarity=0.3 -->


time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Simalrity score of 0.300000 found
time=2024-07-11T20:53:01Z level=debug msg=Found 15 code blocks CodeBlocks=[{bash export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS
 Create a resource group A resource group is a container for related resources. All resources must be placed in a resource group. We will create one for this tutorial. The following command creates a resource group with the previously defined $RG_NAME, $LOCATION, and $RGTAGS parameters. {json {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}
 0.3 <nil>}} {bash export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR
 Create VNet In this section, you'll be creating a Virtual Network (VNet) in Azure. Start by defining several environment variables. These variables will hold the names of your VNet and subnets, as well as the CIDR block for your VNet. Next, create the VNet  with the specified name and CIDR block in your resource group using the az network vnet create command. This process may take a few minutes. {json {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23
 Create Main Nodes Subnet In this section, you'll be creating the main nodes subnet with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. This process may take a few minutes. After the subnet is successfully created, you'll be ready to deploy resources into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23
 Create Worker Nodes Subnet In this section, you'll be creating a subnet for your worker nodes with the specified name and CIDR block within your previously created Virtual Network (VNet). Start by running the az network vnet subnet create command. After the subnet is successfully created, you'll be ready to deploy your worker nodes into this subnet. {json {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"
 Create Storage accounts This code snippet performs the following steps: {  0 <nil>}} {bash export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}
 Deploy the ARO cluster In this section, you'll be deploying an Azure Red Hat OpenShift (ARO) cluster. The ARO_CLUSTER_NAME variable will hold the name of your ARO cluster. The az aro create command will deploy the ARO cluster with the specified name, resource group, virtual network, subnets, and the RedHat OpenShift pull secret that you previously downloaded and saved in your Key Vault. This process may take about 30 minutes to complete. {json {
  "apiserverProfile": {
    "ip": "xx.xxx.xx.xxx",
    "url": "https://api.xxxxx.xxxxxx.aroapp.io:xxxx/",
    "visibility": "Public"
  },
  "clusterProfile": {
    "domain": "xxxxxx",
    "fipsValidatedModules": "Disabled",
    "pullSecret": null,
    "resourceGroupId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourcegroups/xxxxxx-xxxxxx",
    "version": "4.12.25"
  },
  "consoleProfile": {
    "url": "https://console-openshift-console.apps.xxxxxx.xxxxxx.aroapp.io/"
  },
  "id": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.RedHatOpenShift/openShiftClusters/aro-arodemo-xxxxxx",
  "ingressProfiles": [
    {
      "ip": "xx.xxx.xx.xxx",
      "name": "default",
      "visibility": "Public"
    }
  ],
  "location": "westus",
  "masterProfile": {
    "diskEncryptionSetId": null,
    "encryptionAtHost": "Disabled",
    "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-main-jffspl",
    "vmSize": "Standard_D8s_v3"
  },
  "name": "aro-arodemo-xxxxxx",
  "networkProfile": {
    "outboundType": "Loadbalancer",
    "podCidr": "xx.xxx.xx.xxx/xx",
    "preconfiguredNsg": "Disabled",
    "serviceCidr": "xx.xxx.xx.xxx/xx"
  },
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-xxxxxx",
  "servicePrincipalProfile": {
    "clientId": "xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx",
    "clientSecret": null
  },
  "systemData": {
    "createdAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "createdBy": "xxxxxx@xxxxxx.xxx",
    "createdByType": "User",
    "lastModifiedAt": "xxxxxx-xx-xxxxxx:xx:xx.xxxxxx+xx:xx",
    "lastModifiedBy": "xxxxxx@xxxxxx.xxx",
    "lastModifiedByType": "User"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.RedHatOpenShift/openShiftClusters",
  "workerProfiles": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "worker",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ],
  "workerProfilesStatus": [
    {
      "count": 3,
      "diskEncryptionSetId": null,
      "diskSizeGb": 128,
      "encryptionAtHost": "Disabled",
      "name": "aro-arodemo-xxxxxx-xxxxxx-worker-westus",
      "subnetId": "/subscriptions/xxxxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx/resourceGroups/rg-arodemo-xxxxxx/providers/Microsoft.Network/virtualNetworks/vnet-arodemo-xxxxxx/subnets/sn-worker-xxxxxx",
      "vmSize": "Standard_D4s_v3"
    }
  ]
}
 0.3 <nil>}} {bash export apiServer=$(az aro show -g $RG_NAME -n $ARO_CLUSTER_NAME --query apiserverProfile.url -o tsv)
export loginCred=$(az aro list-credentials --name $ARO_CLUSTER_NAME --resource-group $RG_NAME --query "kubeadminPassword" -o tsv)

oc login $apiServer -u kubeadmin -p $loginCred --insecure-skip-tls-verify
 Obtain cluster credentials and login Finally, the `oc login` command is used to log in to the ARO cluster using the retrieved API server URL, the `kubeadmin` username, and the login credentials. {  0 <nil>}} {bash export NAMESPACE="openshift-operators"
 Add operators to ARO Set the namespace to install the operators to the built-in namespace `openshift-operators`. {  0 <nil>}} {bash channelspec=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v1.22")
IFS=" " read -r -a array <<< "${channelspec}"
channel=${array[1]}
csv=${array[3]}

catalogSource=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace=$(oc get packagemanifests cloud-native-postgresql -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cloud-native-postgresql
  namespace: ${NAMESPACE}
spec:
    channel: $channel
    name: cloud-native-postgresql
    source: $catalogSource
    sourceNamespace: $catalogSourceNamespace
    installPlanApproval: Automatic
    startingCSV: $csv
EOF
 Add operators to ARO Cloud Native Postgresql operator {  0 <nil>}} {bash channelspec_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{range .status.channels[*]}Channel: {.name} currentCSV: {.currentCSV}{'\n'}{end}" | grep "stable-v22")
IFS=" " read -r -a array <<< "${channelspec_kc}"
channel_kc=${array[1]}
csv_kc=${array[3]}

catalogSource_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSource}")
catalogSourceNamespace_kc=$(oc get packagemanifests rhbk-operator -o jsonpath="{.status.catalogSourceNamespace}")

cat <<EOF | oc apply -f -
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhbk-operator
  namespace: ${NAMESPACE}
spec:
  channel: $channel_kc
  name: rhbk-operator
  source: $catalogSource_kc
  sourceNamespace: $catalogSourceNamespace_kc
  startingCSV: $csv_kc
EOF
 Add operators to ARO RedHat Keycloak operator {text subscription.operators.coreos.com/rhbk-operator created
 0.3 <nil>}} {bash pgUserName=$(az keyvault secret show --name AroPGUser --vault-name kv-rdp-dev --query value -o tsv)
pgPassword=$(az keyvault secret show --name AroPGPassword --vault-name kv-rdp-dev --query value -o tsv)

oc create secret generic app-auth --from-literal=username=${pgUserName} --from-literal=password=${pgPassword} -n ${NAMESPACE}
 Create the ARO PosgreSQL Database Fetch secrets from Key Vault and create the ARO database login secret object. {text secret/app-auth created
 0.3 <nil>}} {bash export STORAGE_ACCOUNT_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT_NAME} --resource-group ${RG_NAME} --query "[0].value" --output tsv)
oc create secret generic azure-storage-secret --from-literal=storage-account-name=${STORAGE_ACCOUNT_NAME} --from-literal=storage-account-key=${STORAGE_ACCOUNT_KEY} --namespace ${NAMESPACE}
 Create the ARO PosgreSQL Database Create the secret for backing up to Azure Storage {text secret/azure-storage-secret created
 0.3 <nil>}} {bash cat <<EOF | oc apply -f -
---
apiVersion: postgresql.k8s.enterprisedb.io/v1
kind: Cluster
metadata:
  name: cluster-arodemo
  namespace: ${NAMESPACE}
spec:
  description: "HA Postgres Cluster Demo for ARO"
  # Choose your PostGres Database Version
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
  # Number of Replicas
  instances: 3
  startDelay: 300
  stopDelay: 300
  replicationSlots:
    highAvailability:
      enabled: true
    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      # - hostssl app all all cert
      - host app app all password
  logLevel: debug
  # Choose the right storageclass for type of workload.
  storage:
    storageClass: managed-csi
    size: 1Gi
  walStorage:
    storageClass: managed-csi
    size: 1Gi
  monitoring:
    enablePodMonitor: true
  bootstrap:
    initdb: # Deploying a new cluster
      database: WorldDB
      owner: app
      secret:
        name: app-auth
  backup:
    barmanObjectStore:
      # For backup, we use a blob container in an Azure Storage Account to store data.
      # On this Blueprint, we get the account and container name from the environment variables.
      destinationPath: https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${BARMAN_CONTAINER_NAME}/
      azureCredentials:
        storageAccount:
          name: azure-storage-secret
          key: storage-account-name
        storageKey:
          name: azure-storage-secret
          key: storage-account-key
      wal:
        compression: gzip
        maxParallel: 8
    retentionPolicy: "30d"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
EOF
 Create the ARO PosgreSQL Database Create the Postgres Cluster {text cluster.postgresql.k8s.enterprisedb.io/cluster-arodemo created
 0.3 <nil>}} {bash export kc_hosts=$(echo $apiServer | sed -E 's/\/\/api\./\/\/apps./' | sed -En 's/.*\/\/([^:]+).*/\1/p' )

cat <<EOF | oc apply -f -
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  labels:
    app: sso
  name: kc001
  namespace: ${NAMESPACE}
spec:
  db:
    database: WorldDB
    host: cluster-arodemo-rw
    passwordSecret:
      key: password
      name: app-auth
    port: 5432
    usernameSecret:
      key: username
      name: app-auth
    vendor: postgres
  hostname:
    hostname: kc001.${kc_hosts}
  http:
    httpEnabled: true
  ingress:
    enabled: true
  instances: 1
  transaction:
    xaEnabled: false
EOF
 Create the ARO Keycloak instance Deploy a Keycloak instance on an OpenShift cluster. It uses the `oc apply` command to apply a YAML configuration file that defines the Keycloak resource.
The YAML configuration specifies various settings for the Keycloak instance, including the database, hostname, HTTP settings, ingress, number of instances, and transaction settings.
To deploy Keycloak, run this code block in a shell environment with the necessary permissions and access to the OpenShift cluster.
Note: Make sure to replace the values of the variables `$apiServer`, `$kc_hosts`, and the database credentials (`passwordSecret` and `usernameSecret`) with the appropriate values for your environment. {text keycloak.k8s.keycloak.org/kc001 created
 0.3 <nil>}} {bash URL=$(ooc get ingress kc001-ingress -o json | jq -r '.spec.rules[0].host')
curl -Iv https://$URL
 Create the ARO Keycloak instance Access the workload {text *   Trying 104.42.132.245:443...
* Connected to kc001.apps.foppnyl9.westus.aroapp.io (104.42.132.245) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
*  CAfile: /etc/ssl/certs/ca-certificates.crt
*  CApath: /etc/ssl/certs
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
 0.3 <nil>}}]
time=2024-07-11T20:53:01Z level=info msg=Successfully built out the scenario: Create a Highly Available PostgreSQL Cluster on Azure Red Hat OpenShift
time=2024-07-11T20:53:01Z level=info msg=Changed directory to .
time=2024-07-11T20:53:01Z level=info msg=Executing command asynchronously:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-11T20:53:02Z level=debug msg=Comparing JSON strings:
Expected: {
"id": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/xx-xxxxx-xxxxx",
"location": "westus",
"managedBy": null,
"name": "xx-xxxxx-xxxxx",
"properties": {
    "provisioningState": "Succeeded"
},
"tags": {
    "owner": "xxx xxxx"
},
"type": "Microsoft.Resources/resourceGroups"
}

Actual{
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:53:02Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.696390
time=2024-07-11T20:53:02Z level=info msg=Command output to stdout:
 {
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm",
  "location": "westus",
  "managedBy": null,
  "name": "rg-arodemo-perm",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": {
    "Demo": "",
    "owner": "ARO"
  },
  "type": "Microsoft.Resources/resourceGroups"
}

time=2024-07-11T20:53:02Z level=info msg=Finished executing:
 export RGTAGS="owner=ARO Demo"
export LOCATION="westus"
export LOCAL_NAME="arodemo"
export RG_NAME="rg-arodemo-perm"
az group create -n $RG_NAME -l $LOCATION --tags $RGTAGS

time=2024-07-11T20:53:02Z level=debug msg=Attempting to extract resource group name from command output
time=2024-07-11T20:53:02Z level=info msg=Found resource group named: rg-arodemo-perm
time=2024-07-11T20:53:02Z level=info msg=Executing command asynchronously:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-11T20:53:15Z level=debug msg=Comparing JSON strings:
Expected: {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "xx.x.x.x/xx"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
    "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx",
    "location": "westus",
    "name": "xxxxx-xxxxx-xxxxx-xxxxx",
    "provisioningState": "Succeeded",
    "resourceGroup": "xx-xxxxx-xxxxx",
    "resourceGuid": "xxxxx-xxxxx-xxxxx-xxxxx",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

Actual{
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"164ee3d7-5eee-4c11-a84d-95bf0d88ea5a\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "bb085447-7709-4255-b2a8-738585368f7c",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:53:15Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.712721
time=2024-07-11T20:53:15Z level=info msg=Command output to stdout:
 {
  "newVNet": {
    "addressSpace": {
      "addressPrefixes": [
        "10.0.0.0/22"
      ]
    },
    "enableDdosProtection": false,
    "etag": "W/\"164ee3d7-5eee-4c11-a84d-95bf0d88ea5a\"",
    "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo",
    "location": "westus",
    "name": "vnet-arodemo",
    "provisioningState": "Succeeded",
    "resourceGroup": "rg-arodemo-perm",
    "resourceGuid": "bb085447-7709-4255-b2a8-738585368f7c",
    "subnets": [],
    "type": "Microsoft.Network/virtualNetworks",
    "virtualNetworkPeerings": []
  }
}

time=2024-07-11T20:53:15Z level=info msg=Finished executing:
 export VNET_NAME="vnet-${LOCAL_NAME}"
export SUBNET1_NAME="sn-main"
export SUBNET2_NAME="sn-worker"
export VNET_CIDR="10.0.0.0/22"
az network vnet create -g $RG_NAME -n $VNET_NAME --address-prefixes $VNET_CIDR

time=2024-07-11T20:53:15Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-11T20:53:27Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-main-xxxxx",
  "name": "sn-main-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"01ade483-48cd-4ff6-916d-a14c90dd6214\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:27Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.726797
time=2024-07-11T20:53:27Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.0.0/23",
  "delegations": [],
  "etag": "W/\"01ade483-48cd-4ff6-916d-a14c90dd6214\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-main",
  "name": "sn-main",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:27Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET1_NAME --address-prefixes 10.0.0.0/23

time=2024-07-11T20:53:27Z level=info msg=Executing command asynchronously:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-11T20:53:39Z level=debug msg=Comparing JSON strings:
Expected: {
  "addressPrefix": "xx.x.x.x/xx",
  "delegations": [],
  "etag": "W/\"xxxxx-xxxxx-xxxxx-xxxxx\"",
  "id": "/subscriptions/xxxxxx-xxxx-xxxx-xxxxxx/resourceGroups/xx-xxxxx-xxxxx/providers/Microsoft.Network/virtualNetworks/vnet-xx-xxxxx-xxxxx/subnets/sn-worker-xxxxx",
  "name": "sn-worker-xxxxx",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "xx-xxxxx-xxxxx",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

Actual{
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"2546d215-c301-48de-9114-441d2dc3e580\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:39Z level=debug msg=Expected Similarity: 0.300000, Actual Similarity: 0.728469
time=2024-07-11T20:53:39Z level=info msg=Command output to stdout:
 {
  "addressPrefix": "10.0.2.0/23",
  "delegations": [],
  "etag": "W/\"2546d215-c301-48de-9114-441d2dc3e580\"",
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Network/virtualNetworks/vnet-arodemo/subnets/sn-worker",
  "name": "sn-worker",
  "privateEndpointNetworkPolicies": "Disabled",
  "privateLinkServiceNetworkPolicies": "Enabled",
  "provisioningState": "Succeeded",
  "resourceGroup": "rg-arodemo-perm",
  "type": "Microsoft.Network/virtualNetworks/subnets"
}

time=2024-07-11T20:53:39Z level=info msg=Finished executing:
 az network vnet subnet create -g $RG_NAME --vnet-name $VNET_NAME -n $SUBNET2_NAME --address-prefixes 10.0.2.0/23

time=2024-07-11T20:53:39Z level=info msg=Executing command asynchronously:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-11T20:54:08Z level=info msg=Command output to stdout:
 {
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "2024-07-11T20:53:43.753634+00:00",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "encryption": {
    "encryptionIdentity": null,
    "keySource": "Microsoft.Storage",
    "keyVaultProperties": null,
    "requireInfrastructureEncryption": null,
    "services": {
      "blob": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-11T20:53:44.003668+00:00"
      },
      "file": {
        "enabled": true,
        "keyType": "Account",
        "lastEnabledTime": "2024-07-11T20:53:44.003668+00:00"
      },
      "queue": null,
      "table": null
    }
  },
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/325e7c34-99fb-4190-aa87-1df746c67705/resourceGroups/rg-arodemo-perm/providers/Microsoft.Storage/storageAccounts/storarodemo",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyCreationTime": {
    "key1": "2024-07-11T20:53:43.862932+00:00",
    "key2": "2024-07-11T20:53:43.862932+00:00"
  },
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "westus",
  "minimumTlsVersion": "TLS1_0",
  "name": "storarodemo",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://storarodemo.blob.core.windows.net/",
    "dfs": "https://storarodemo.dfs.core.windows.net/",
    "file": "https://storarodemo.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://storarodemo.queue.core.windows.net/",
    "table": "https://storarodemo.table.core.windows.net/",
    "web": "https://storarodemo.z22.web.core.windows.net/"
  },
  "primaryLocation": "westus",
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "rg-arodemo-perm",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}
{
  "created": true
}

time=2024-07-11T20:54:08Z level=info msg=Finished executing:
 export STORAGE_ACCOUNT_NAME="stor${LOCAL_NAME,,}"
export BARMAN_CONTAINER_NAME="barman"

az storage account create --name "${STORAGE_ACCOUNT_NAME}" --resource-group "${RG_NAME}" --sku Standard_LRS
az storage container create --name "${BARMAN_CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}"

time=2024-07-11T20:54:08Z level=info msg=Executing command asynchronously:
 export ARO_CLUSTER_NAME="aro-${LOCAL_NAME}"
export ARO_PULL_SECRET=$(az keyvault secret show --name AroPullSecret --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_ID=$(az keyvault secret show --name arodemo-sp-id --vault-name kv-rdp-dev --query value -o tsv)
export ARO_SP_PASSWORD=$(az keyvault secret show --name arodemo-sp-password --vault-name kv-rdp-dev --query value -o tsv)
echo "This will take about 30 minutes to complete..." 
az aro create -g $RG_NAME -n $ARO_CLUSTER_NAME --vnet $VNET_NAME --master-subnet $SUBNET1_NAME --worker-subnet $SUBNET2_NAME --tags $RGTAGS --pull-secret ${ARO_PULL_SECRET} --client-id ${ARO_SP_ID} --client-secret ${ARO_SP_PASSWORD}

time=2024-07-11T20:54:13Z level=error msg=Error executing command:
 command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:10.0559289Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 79814455-cc00-41d4-906c-0c364ccfd400 Correlation ID: 30c2e57b-af65-417e-9785-408b42b9849b Timestamp: 2024-07-11 20:54:10Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:11.1811032Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f5413bee-aec3-422e-8308-25467f50d600 Correlation ID: e45b6055-11e4-4247-bbc6-dd3f968235fe Timestamp: 2024-07-11 20:54:11Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:12.1626287Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 8a823e87-2667-4dd2-93d4-d6d83534c400 Correlation ID: 4edb5729-77b4-4c5e-b158-3ab109dc0b8f Timestamp: 2024-07-11 20:54:12Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
time=2024-07-11T20:54:13Z level=info msg=Attempting to delete the deployed resource group with the name: rg-arodemo-perm
time=2024-07-11T20:54:15Z level=info msg=Changed directory to /home/runner/work/executable-docs/executable-docs
time=2024-07-11T20:54:15Z level=error msg=Error testing scenario: failed to execute code block 0 on step 5.
Error: command exited with 'exit status 2' and the message 'ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:10.0559289Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 79814455-cc00-41d4-906c-0c364ccfd400 Correlation ID: 30c2e57b-af65-417e-9785-408b42b9849b Timestamp: 2024-07-11 20:54:10Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:11.1811032Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f5413bee-aec3-422e-8308-25467f50d600 Correlation ID: e45b6055-11e4-4247-bbc6-dd3f968235fe Timestamp: 2024-07-11 20:54:11Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:12.1626287Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 8a823e87-2667-4dd2-93d4-d6d83534c400 Correlation ID: 4edb5729-77b4-4c5e-b158-3ab109dc0b8f Timestamp: 2024-07-11 20:54:12Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs
'
StdErr: ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:10.0559289Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 79814455-cc00-41d4-906c-0c364ccfd400 Correlation ID: 30c2e57b-af65-417e-9785-408b42b9849b Timestamp: 2024-07-11 20:54:10Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:11.1811032Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: f5413bee-aec3-422e-8308-25467f50d600 Correlation ID: e45b6055-11e4-4247-bbc6-dd3f968235fe Timestamp: 2024-07-11 20:54:11Z
ERROR: AADSTS700024: Client assertion is not within its valid time range. Current time: 2024-07-11T20:54:12.1626287Z, assertion valid from 2024-07-11T20:20:45.0000000Z, expiry time of assertion 2024-07-11T20:25:45.0000000Z. Review the documentation at https://learn.microsoft.com/entra/identity-platform/certificate-credentials . Trace ID: 8a823e87-2667-4dd2-93d4-d6d83534c400 Correlation ID: 4edb5729-77b4-4c5e-b158-3ab109dc0b8f Timestamp: 2024-07-11 20:54:12Z
ERROR: argument --pull-secret: expected one argument

Examples from AI knowledge base:
az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --worker-count 5 --pull-secret @pullsecret.txt
Create a cluster with 5 compute nodes and Red Hat pull secret.

az aro create --resource-group MyResourceGroup --name MyCluster --vnet MyVnet --master-subnet MyMasterSubnet --worker-subnet MyWorkerSubnet --apiserver-visibility Private --ingress-visibility Private
Create a Private cluster

https://docs.microsoft.com/en-US/cli/azure/aro#az_aro_create
Read more about the command in reference docs

